From grumbel at berlios.de  Mon Aug  1 02:36:10 2005
From: grumbel at berlios.de (Ingo Ruhnke at BerliOS)
Date: Mon, 1 Aug 2005 02:36:10 +0200
Subject: [Flexlay-commit] r580 - in trunk: lib windstille
Message-ID: <200508010036.j710aApn014007@sheep.berlios.de>

Author: grumbel
Date: 2005-08-01 02:35:36 +0200 (Mon, 01 Aug 2005)
New Revision: 580

Modified:
   trunk/lib/tile_selector.cxx
   trunk/windstille/gui.rb
   trunk/windstille/level.rb
   trunk/windstille/tileset.rb
Log:
- some small bugfixes and enhancements


Modified: trunk/lib/tile_selector.cxx
===================================================================
--- trunk/lib/tile_selector.cxx	2005-07-25 14:26:50 UTC (rev 579)
+++ trunk/lib/tile_selector.cxx	2005-08-01 00:35:36 UTC (rev 580)
@@ -173,8 +173,8 @@
 
   const TileBrush& brush = TileMapPaintTool::current().get_brush();
 
-  int start_row = offset / tileset.get_tile_size();
-  int end_row   = start_row + (get_screen_rect().get_height() / tileset.get_tile_size());
+  int start_row = offset / int(tileset.get_tile_size() * scale);
+  int end_row   = start_row + (get_screen_rect().get_height() / int(tileset.get_tile_size() * scale));
   int end_index = std::min(end_row*width, int(tiles.size())); 
   
   // Draw tiles

Modified: trunk/windstille/gui.rb
===================================================================
--- trunk/windstille/gui.rb	2005-07-25 14:26:50 UTC (rev 579)
+++ trunk/windstille/gui.rb	2005-08-01 00:35:36 UTC (rev 580)
@@ -120,7 +120,9 @@
     @selector_window = Panel.new(CL_Rect.new(CL_Point.new($screen_width-128-64-6, 23+33), 
                                              CL_Size.new(128 + 64 + 6, $screen_height - 600 + 558)),
                                  @gui.get_component())
-    @tileselector = TileSelector.new(CL_Rect.new(CL_Point.new(3, 3), CL_Size.new(128+64, $screen_height - 600 + 552)), @selector_window)
+    @tileselector = TileSelector.new(CL_Rect.new(CL_Point.new(3, 3), 
+                                                 CL_Size.new(128+64, $screen_height - 600 + 552)),
+                                     @selector_window)
     @tileselector.set_tileset($tileset)
     @tileselector.set_scale(0.5)
     @tileselector.set_tiles($tileset.tilegroups[0].tiles)

Modified: trunk/windstille/level.rb
===================================================================
--- trunk/windstille/level.rb	2005-07-25 14:26:50 UTC (rev 579)
+++ trunk/windstille/level.rb	2005-08-01 00:35:36 UTC (rev 580)
@@ -148,7 +148,7 @@
       if tilemap then
         width  = tilemap.get_width()
         height = tilemap.get_height()
-        f.write("  (tilemap (name \"%s\") (width %d) (height %d)\n" % \
+        f.write("  (tilemap (name \"%s\") (width %d) (height %d) (z-pos 0)\n" % \
                 [name, width, height]) # FIXME: add escaping to strings
         f.write("    (data")
         tilemap.get_data().each_with_index {|item, i|

Modified: trunk/windstille/tileset.rb
===================================================================
--- trunk/windstille/tileset.rb	2005-07-25 14:26:50 UTC (rev 579)
+++ trunk/windstille/tileset.rb	2005-08-01 00:35:36 UTC (rev 580)
@@ -90,6 +90,8 @@
         width  = get_value_from_tree(['width', '_'], data, 0)
         height = get_value_from_tree(['height', '_'], data, 0)
 
+        puts $datadir + image
+
         pixelbuffer = make_pixelbuffer($datadir + image);
 
         (0..width-1).each {|y|



From grumbel at berlios.de  Mon Aug  1 16:41:23 2005
From: grumbel at berlios.de (Ingo Ruhnke at BerliOS)
Date: Mon, 1 Aug 2005 16:41:23 +0200
Subject: [Flexlay-commit] r581 - trunk/windstille
Message-ID: <200508011441.j71EfN1D007628@sheep.berlios.de>

Author: grumbel
Date: 2005-08-01 16:41:22 +0200 (Mon, 01 Aug 2005)
New Revision: 581

Modified:
   trunk/windstille/gui.rb
Log:
- switched to 8 tiles in a row


Modified: trunk/windstille/gui.rb
===================================================================
--- trunk/windstille/gui.rb	2005-08-01 00:35:36 UTC (rev 580)
+++ trunk/windstille/gui.rb	2005-08-01 14:41:22 UTC (rev 581)
@@ -124,7 +124,7 @@
                                                  CL_Size.new(128+64, $screen_height - 600 + 552)),
                                      @selector_window)
     @tileselector.set_tileset($tileset)
-    @tileselector.set_scale(0.5)
+    @tileselector.set_scale(0.375)
     @tileselector.set_tiles($tileset.tilegroups[0].tiles)
     # @tileselector.set_tiles($tileset.get_tiles())
     @tileselector.show(true)



From grumbel at berlios.de  Wed Aug  3 16:49:13 2005
From: grumbel at berlios.de (Ingo Ruhnke at BerliOS)
Date: Wed, 3 Aug 2005 16:49:13 +0200
Subject: [Flexlay-commit] r582 - trunk/windstille
Message-ID: <200508031449.j73EnDxu009016@sheep.berlios.de>

Author: grumbel
Date: 2005-08-03 16:49:10 +0200 (Wed, 03 Aug 2005)
New Revision: 582

Modified:
   trunk/windstille/gui.rb
   trunk/windstille/tileset.rb
Log:
- little bug fix
- added tilegroup menu

Modified: trunk/windstille/gui.rb
===================================================================
--- trunk/windstille/gui.rb	2005-08-01 14:41:22 UTC (rev 581)
+++ trunk/windstille/gui.rb	2005-08-03 14:49:10 UTC (rev 582)
@@ -71,6 +71,8 @@
     @foreground_icon = @button_panel.add_icon("../data/images/icons24/foreground.png")
     @eye_icon = @button_panel.add_icon("../data/images/icons24/eye.png")
 
+    @button_panel.add_icon("../data/images/icons24/eye.png", proc{ @tilegroup_menu.run() })
+
     @layer_menu = Menu.new(CL_Point.new(32*15+2, 54), @gui.get_component())
     
     @toolbar = ButtonPanel.new(0, 23+33, 33, 32*4+2, false, @gui.get_component)
@@ -110,6 +112,13 @@
     @save_dialog = SimpleFileDialog.new("Save SuperTux Level as...", "Save", "Cancel", @gui.get_component())
     @save_dialog.set_filename($datadir + "levels/")
 
+    # FIXME: Having position in the Menus here is EXTREMLY ugly
+    @tilegroup_menu = Menu.new(CL_Point.new(35*15+2, 54), @gui.get_component())
+    @tilegroup_menu.add_item($mysprite, "All Tiles", proc{@tileselector.set_tiles($tileset.get_tiles())})
+    $tileset.tilegroups.each { |tilegroup|
+      @tilegroup_menu.add_item($mysprite, tilegroup.name, proc{@tileselector.set_tiles(tilegroup.tiles)})
+    }
+
     toggle_minimap()
 
     # Init the GUI, so that button state is in sync with internal state
@@ -125,8 +134,8 @@
                                      @selector_window)
     @tileselector.set_tileset($tileset)
     @tileselector.set_scale(0.375)
-    @tileselector.set_tiles($tileset.tilegroups[0].tiles)
-    # @tileselector.set_tiles($tileset.get_tiles())
+    # @tileselector.set_tiles($tileset.tilegroups[0].tiles)
+    @tileselector.set_tiles($tileset.get_tiles())
     @tileselector.show(true)
     
     @objectselector = ObjectSelector.new(CL_Rect.new(0, 0, 128, $screen_height - 600 + 552), 42, 42, @selector_window)

Modified: trunk/windstille/tileset.rb
===================================================================
--- trunk/windstille/tileset.rb	2005-08-01 14:41:22 UTC (rev 581)
+++ trunk/windstille/tileset.rb	2005-08-03 14:49:10 UTC (rev 582)
@@ -90,15 +90,19 @@
         width  = get_value_from_tree(['width', '_'], data, 0)
         height = get_value_from_tree(['height', '_'], data, 0)
 
-        puts $datadir + image
+        puts "Loading: #{width}x#{height} #{$datadir + image}"
 
         pixelbuffer = make_pixelbuffer($datadir + image);
 
-        (0..width-1).each {|y|
-          (0..height-1).each {|x|
-            $tileset.add_tile(ids[y*width + x],
-                              Tile.new(make_region_pixelbuffer(pixelbuffer,
-                                                               64*x, 64*y, 64, 64)))
+        (0..height-1).each {|y|
+          (0..width-1).each {|x|
+            if (y*width + x < ids.length) then
+              $tileset.add_tile(ids[y*width + x],
+                                Tile.new(make_region_pixelbuffer(pixelbuffer,
+                                                                 64*x, 64*y, 64, 64)))
+            else
+              puts "Id out of range: #{y*width + x} >= #{ids.length} for image #{$datadir + image}"
+            end
           }
         }
       end



From grumbel at berlios.de  Fri Aug  5 15:18:18 2005
From: grumbel at berlios.de (Ingo Ruhnke at BerliOS)
Date: Fri, 5 Aug 2005 15:18:18 +0200
Subject: [Flexlay-commit] r583 - trunk/netpanzer
Message-ID: <200508051318.j75DII4u021801@sheep.berlios.de>

Author: grumbel
Date: 2005-08-05 15:18:16 +0200 (Fri, 05 Aug 2005)
New Revision: 583

Modified:
   trunk/netpanzer/netpanzer.cxx
   trunk/netpanzer/netpanzer.hxx
   trunk/netpanzer/netpanzer.i
   trunk/netpanzer/netpanzer.rb
Log:
- added move attributes

Modified: trunk/netpanzer/netpanzer.cxx
===================================================================
--- trunk/netpanzer/netpanzer.cxx	2005-08-03 14:49:10 UTC (rev 582)
+++ trunk/netpanzer/netpanzer.cxx	2005-08-05 13:18:16 UTC (rev 583)
@@ -127,7 +127,7 @@
   datadir = datadir_;
   std::cout << "NetPanzerData: Loading data from '" << datadir << "'" << std::endl;
   palette = load_palette(datadir + "/" + "wads/netp.act");
-  tileset = load_tileset(datadir + "/" + "wads/summer12mb.tls");
+  load_tileset(datadir + "/" + "wads/summer12mb.tls");
 }
 
 CL_Surface
@@ -142,16 +142,54 @@
           {
             const CL_Palette& palette = NetPanzerData::instance()->get_palette();
             unsigned char* data = NetPanzerData::instance()->get_tiledata() + (32*32) * (start + width*y + x);
-            
+
+            NetPanzerTileHeader header = NetPanzerData::instance()->get_tile_headers()[start + width*y + x]; 
+           
             CL_PixelBuffer tile(32, 32, 32*3, CL_PixelFormat::rgb888);
+
             tile.lock();
             unsigned char* target = static_cast<unsigned char*>(tile.get_data());
 
+            float r = 1.0f;
+            float g = 1.0f;
+            float b = 1.0f;
+
+            switch (header.move_value)
+              {
+              case 0: // streets, allowing faster movement
+                r = 1.0f;
+                g = 1.0f;
+                b = 0.0f;
+                break;
+
+              case 1: // normal ground which allows to move
+                r = 1.0f;
+                g = 1.0f;
+                b = 1.0f;
+                break;
+
+              case 4: // unpassable terrain
+                r = 0.0f;
+                g = 1.0;
+                b = 0.0f;
+                break;
+
+              case 5: // water
+                r = 0.0f;
+                g = 0.0f;
+                b = 1.0f;
+                break;
+
+              default:
+                std::cout << "Unknown header value: " << int(header.move_value) << std::endl;
+                break;
+              }
+
             for(int i = 0; i < 32*32; ++i)
               {
-                target[3*i+0] = palette[data[i]].get_blue();
-                target[3*i+1] = palette[data[i]].get_green();
-                target[3*i+2] = palette[data[i]].get_red();
+                target[3*i+0] = int(palette[data[i]].get_blue()  * b);
+                target[3*i+1] = int(palette[data[i]].get_green() * g);
+                target[3*i+2] = int(palette[data[i]].get_red()   * r);
               }
             tile.unlock();
                 
@@ -211,6 +249,12 @@
   return palette;
 }
 
+const std::vector<NetPanzerTileHeader>&
+NetPanzerData::get_tile_headers() const
+{
+  return tile_headers;
+}
+
 unsigned char*
 NetPanzerData::get_tiledata() const
 {
@@ -243,7 +287,7 @@
   return palette;
 }
 
-Tileset
+void
 NetPanzerData::load_tileset(const std::string& filename)
 {
   unsigned char	netp_id_header[64];
@@ -258,7 +302,6 @@
   if (!file)
     {
       std::cout << "Couldn't load " << filename << std::endl;
-      return Tileset();
     }
   else
     {
@@ -269,9 +312,9 @@
       file.read(reinterpret_cast<char*>(&tile_count), sizeof(tile_count));
       file.read(reinterpret_cast<char*>(raw_palette), sizeof(raw_palette));
 
-      NetPanzerTileHeader* tile_headers = new NetPanzerTileHeader[tile_count];
+      tile_headers.resize(tile_count);
 
-      file.read(reinterpret_cast<char*>(tile_headers), 
+      file.read(reinterpret_cast<char*>(&*tile_headers.begin()), 
                 sizeof(NetPanzerTileHeader)*tile_count);
 
       cl_uint32 tilesize = width * height;
@@ -287,14 +330,13 @@
       
       NetPanzerData::instance()->tiledata = tiledata;
       
-      Tileset tileset(width);
+      tileset = Tileset(width);
 
       for(int i = 0; i < tile_count; ++i)
         {
           Tile tile(TileProvider(new NetPanzerTileProviderImpl(i)));
           tileset.add_tile(i, &tile);
         }
-      return tileset;
     }
 }
 

Modified: trunk/netpanzer/netpanzer.hxx
===================================================================
--- trunk/netpanzer/netpanzer.hxx	2005-08-03 14:49:10 UTC (rev 582)
+++ trunk/netpanzer/netpanzer.hxx	2005-08-05 13:18:16 UTC (rev 583)
@@ -73,7 +73,7 @@
   unsigned char* tiledata;
   typedef std::vector<NetPanzerTileGroup> TileGroups;
   TileGroups tilegroups;
-
+  std::vector<NetPanzerTileHeader> tile_headers;
 public:
   NetPanzerData();
 
@@ -89,15 +89,18 @@
   void load_data(const std::string& datadir_);
   const CL_Palette& get_palette() const;
   const Tileset&    get_tileset() const;
+  const std::vector<NetPanzerTileHeader>& get_tile_headers() const;
   unsigned char*    get_tiledata() const;
 
   CL_Palette load_palette(const std::string& filename);
-  Tileset    load_tileset(const std::string& filename);
   CL_Sprite  get_tilegroup_sprite(int index);
 
   /** Locate the tilegroup in which the tile with \a tileindex is
       located */
   NetPanzerTileGroup& find_tilegroup(int tileindex);
+
+private:
+  void       load_tileset(const std::string& filename);
 };
 
 class NetPanzerFileStruct

Modified: trunk/netpanzer/netpanzer.i
===================================================================
--- trunk/netpanzer/netpanzer.i	2005-08-03 14:49:10 UTC (rev 582)
+++ trunk/netpanzer/netpanzer.i	2005-08-05 13:18:16 UTC (rev 583)
@@ -11,4 +11,5 @@
 %import  "../lib/flexlay_wrap.i"
 %include "netpanzer.hxx"
 
+
 // EOF //

Modified: trunk/netpanzer/netpanzer.rb
===================================================================
--- trunk/netpanzer/netpanzer.rb	2005-08-03 14:49:10 UTC (rev 582)
+++ trunk/netpanzer/netpanzer.rb	2005-08-05 13:18:16 UTC (rev 583)
@@ -51,8 +51,7 @@
 
 $config = Config.new()
 
-$datadir = "/home/matze/projects/netpanzer"
-
+$datadir = "/home/ingo/projects/netpanzer/netpanzer"
 $brushes.each_with_index{|(start, width, height, name), index|
   NetPanzerData::instance().register_tilegroup(start, width, height)
 }



From grumbel at berlios.de  Sun Aug  7 18:17:50 2005
From: grumbel at berlios.de (Ingo Ruhnke at BerliOS)
Date: Sun, 7 Aug 2005 18:17:50 +0200
Subject: [Flexlay-commit] r584 - trunk/windstille
Message-ID: <200508071617.j77GHohA030106@sheep.berlios.de>

Author: grumbel
Date: 2005-08-07 18:17:49 +0200 (Sun, 07 Aug 2005)
New Revision: 584

Modified:
   trunk/windstille/gui.rb
   trunk/windstille/level.rb
Log:
- hooked up undo/redo

Modified: trunk/windstille/gui.rb
===================================================================
--- trunk/windstille/gui.rb	2005-08-05 13:18:16 UTC (rev 583)
+++ trunk/windstille/gui.rb	2005-08-07 16:17:49 UTC (rev 584)
@@ -162,6 +162,20 @@
     connect_v2(@editor_map.sig_on_key("1"),  proc{ |x, y| show_background()})
   end
 
+  def on_map_change()
+    if (@workspace.get_map().undo_stack_size() > 0)
+      @undo_icon.enable()
+    else
+      @undo_icon.disable()
+    end
+
+    if (@workspace.get_map().redo_stack_size() > 0)
+      @redo_icon.enable()
+    else
+      @redo_icon.disable()        
+    end
+  end
+
   def show_background()
     TilemapLayer.set_current(@workspace.get_map().get_metadata().background)
   end

Modified: trunk/windstille/level.rb
===================================================================
--- trunk/windstille/level.rb	2005-08-05 13:18:16 UTC (rev 583)
+++ trunk/windstille/level.rb	2005-08-07 16:17:49 UTC (rev 584)
@@ -130,6 +130,8 @@
 
     TilemapLayer.set_current(@layers[@current_layer])
     ObjectLayer.set_current(@objects)
+
+    connect(@editormap.sig_change(), proc{$gui.on_map_change()})
   end
 
   def save(filename)



From grumbel at berlios.de  Sun Aug  7 18:39:50 2005
From: grumbel at berlios.de (Ingo Ruhnke at BerliOS)
Date: Sun, 7 Aug 2005 18:39:50 +0200
Subject: [Flexlay-commit] r585 - trunk/windstille
Message-ID: <200508071639.j77Gdoi5014340@sheep.berlios.de>

Author: grumbel
Date: 2005-08-07 18:39:37 +0200 (Sun, 07 Aug 2005)
New Revision: 585

Modified:
   trunk/windstille/gui.rb
Log:
- made foreground/background/interactive buttons change state


Modified: trunk/windstille/gui.rb
===================================================================
--- trunk/windstille/gui.rb	2005-08-07 16:17:49 UTC (rev 584)
+++ trunk/windstille/gui.rb	2005-08-07 16:39:37 UTC (rev 585)
@@ -66,9 +66,9 @@
     @grid_icon = @button_panel.add_icon("../data/images/icons24/grid.png", proc{ toggle_grid() })
     @button_panel.add_separator()
 
-    @background_icon = @button_panel.add_icon("../data/images/icons24/background.png")
+    @background_icon  = @button_panel.add_icon("../data/images/icons24/background.png")
     @interactive_icon = @button_panel.add_icon("../data/images/icons24/interactive.png")
-    @foreground_icon = @button_panel.add_icon("../data/images/icons24/foreground.png")
+    @foreground_icon  = @button_panel.add_icon("../data/images/icons24/foreground.png")
     @eye_icon = @button_panel.add_icon("../data/images/icons24/eye.png")
 
     @button_panel.add_icon("../data/images/icons24/eye.png", proc{ @tilegroup_menu.run() })
@@ -177,14 +177,23 @@
   end
 
   def show_background()
+    @background_icon.set_down();
+    @interactive_icon.set_up();
+    @foreground_icon.set_up();
     TilemapLayer.set_current(@workspace.get_map().get_metadata().background)
   end
 
   def show_interactive()
+    @background_icon.set_up();
+    @interactive_icon.set_down();
+    @foreground_icon.set_up();
     TilemapLayer.set_current(@workspace.get_map().get_metadata().interactive)
   end
 
   def show_foreground()
+    @background_icon.set_up();
+    @interactive_icon.set_up();
+    @foreground_icon.set_down();
     TilemapLayer.set_current(@workspace.get_map().get_metadata().foreground)
   end
 



From grumbel at berlios.de  Fri Aug 12 18:37:23 2005
From: grumbel at berlios.de (Ingo Ruhnke at BerliOS)
Date: Fri, 12 Aug 2005 18:37:23 +0200
Subject: [Flexlay-commit] r586 - in trunk: ruby windstille
Message-ID: <200508121637.j7CGbNTe016084@sheep.berlios.de>

Author: grumbel
Date: 2005-08-12 18:37:09 +0200 (Fri, 12 Aug 2005)
New Revision: 586

Modified:
   trunk/ruby/flexlay.rb
   trunk/windstille/gui.rb
Log:
- added some data-driven constructors to button panel and menu

Modified: trunk/ruby/flexlay.rb
===================================================================
--- trunk/ruby/flexlay.rb	2005-08-07 16:39:37 UTC (rev 585)
+++ trunk/ruby/flexlay.rb	2005-08-12 16:37:09 UTC (rev 586)
@@ -70,24 +70,62 @@
     item = create_item(name)
     connect(item.sig_clicked(), func)
   end
+
+  def CL_Menu.new_from_spec(menubarspec, parent)
+    menu = CL_Menu.new(parent)
+    
+    menubarspec.each { |(title, *menu_spec)|
+      menu_spec.each{ |(name, callback)|
+        menu.add_item("#{title}/#{name}", callback)
+      }
+    }
+    
+    return menu
+  end
 end
 
 class ButtonPanel
-  attr_reader :panel
+  attr_reader :panel, :items
 
-  def initialize(x, y, width, height, horizontal, parent)
+  def initialize(x, y, width, height, horizontal, parent, &block)
     @panel = Panel.new(CL_Rect.new(CL_Point.new(x, y), CL_Size.new(width, height)), parent)
     @pos   = 2
     @horizontal = horizontal
+    @items = {}
+
+    if block then
+      instance_eval(&block)
+    end
   end
 
-  def add_small_icon(filename, callback = nil, tooltip = "")
+  def ButtonPanel.new_from_spec(x, y, width, height, horizontal, spec, parent)
+    buttonpanel = ButtonPanel.new(x, y, width, height, horizontal, parent)
+
+    spec.each{ |(type, *data)|
+      case type
+      when :icon
+        buttonpanel.items[data[0]] = buttonpanel.add_icon(data[1], data[2])
+      when :toggle
+        buttonpanel.items[data[0]] = buttonpanel.add_icon(data[1], data[2])
+      when :small_icon
+        buttonpanel.items[data[0]] = buttonpanel.add_small_icon(data[1], data[2])
+      when :seperator
+        buttonpanel.add_separator()
+      else
+        raise "ButtonPanel: Unknown type #{type}"
+      end
+    }
+    
+    return buttonpanel
+  end
+
+  def add_small_icon(image = nil, callback = nil, tooltip = "")
     if (@horizontal)
       icon = Icon.new(CL_Rect.new(CL_Point.new(@pos,  2), CL_Size.new(16, 32)),
-                      make_sprite(filename), tooltip, @panel);
+                      make_sprite(image), tooltip, @panel);
     else
       icon = Icon.new(CL_Rect.new(CL_Point.new(2, @pos), CL_Size.new(16, 32)),
-                      make_sprite(filename), tooltip, @panel);
+                      make_sprite(image), tooltip, @panel);
     end
     
     @pos += 16
@@ -97,13 +135,18 @@
     return icon
   end
 
-  def add_icon(filename, callback = nil, tooltip = "")
+  def add_icon(image = nil, callback = nil, &block)
+    tooltip = ""
+    if block then
+      callback = block
+    end
+
     if (@horizontal)
       icon = Icon.new(CL_Rect.new(CL_Point.new(@pos,  2), CL_Size.new(32, 32)),
-                      make_sprite(filename), tooltip, @panel);
+                      make_sprite(image), tooltip, @panel);
     else
       icon = Icon.new(CL_Rect.new(CL_Point.new(2, @pos), CL_Size.new(32, 32)),
-                      make_sprite(filename), tooltip, @panel);
+                      make_sprite(image), tooltip, @panel);
     end
     
     @pos += 32

Modified: trunk/windstille/gui.rb
===================================================================
--- trunk/windstille/gui.rb	2005-08-07 16:39:37 UTC (rev 585)
+++ trunk/windstille/gui.rb	2005-08-12 16:37:09 UTC (rev 586)
@@ -23,6 +23,53 @@
 $screen_width  = 1024
 $screen_height = 768
 
+class MyButtonPanel
+end
+
+$menu_spec = [
+  ["File",
+    ["Open...",    proc{ $gui.level_load() }],
+    ["Save...",    proc{ $gui.level_save() }],
+    ["Save As...", proc{ $gui.level_save_as() }],
+    ["Quit",       proc{ $gui.gui.quit() }],
+  ],
+  ["Edit",
+    ["Resize", proc{ $gui.resize_level() }],
+    ["Resize to selection", proc{ $gui.resize_level_to_selection()}],
+    ["Debug Shell", proc{ $gui.run_python()}],
+  ],
+  ["Zoom",
+    ["1:4 (25%)",   proc{ $gui.set_zoom(0.25) }],
+    ["1:2 (50%) ",  proc{ $gui.set_zoom(0.5) }],
+    ["1:1 (100%) ", proc{ $gui.set_zoom(1.0) }],
+    ["2:1 (200%) ", proc{ $gui.set_zoom(2.0) }],
+    ["4:1 (400%) ", proc{ $gui.set_zoom(4.0) }],
+  ]
+]
+
+$toolbar_spec = [
+  [:icon,       "new",         "../data/images/icons24/stock_new.png",     proc{ $gui.new_level() }],
+  [:icon,       "open",        "../data/images/icons24/stock_open.png",    proc{ $gui.level_load() }],
+  [:small_icon, "recent",      "../data/images/icons24/downarrow.png",     proc{ $controller.recent_files_menu.run() }],
+  [:icon,       "save",        "../data/images/icons24/stock_save.png",    proc{ $gui.level_save() }],
+  [:icon,       "saveas",      "../data/images/icons24/stock_save_as.png", proc{ $gui.level_save_as() }],
+  [:seperator],
+  [:icon,       "copy",        "../data/images/icons24/stock_copy.png",    nil],
+  [:icon,       "paste",       "../data/images/icons24/stock_paste.png",   nil],
+  [:seperator],
+  [:icon,       "undo",        "../data/images/icons24/stock_undo.png",    proc{ $gui.workspace.get_map().undo() }],
+  [:icon,       "redo",        "../data/images/icons24/stock_redo.png",    proc{ $gui.workspace.get_map().redo() }],
+  [:seperator],
+  [:toggle,     "minimap",     "../data/images/icons24/minimap.png",       proc{ $gui.toggle_minimap() }],
+  [:toggle,     "grid",        "../data/images/icons24/grid.png",          proc{ $gui.toggle_grid() }],
+  [:seperator],
+  [:icon,       "background",  "../data/images/icons24/background.png",    proc{ $gui.show_background() }],
+  [:icon,       "interactive", "../data/images/icons24/interactive.png",   proc{ $gui.show_interactive() }],
+  [:icon,       "foreground",  "../data/images/icons24/foreground.png",    proc{ $gui.show_foreground() }],
+  [:icon,       "viewprops",   "../data/images/icons24/eye.png",           proc{ @layer_menu.run() }],
+  [:icon,       "tilegroups",  "../data/images/icons24/eye.png",           proc{ @tilegroup_menu.run() }],
+]
+
 ## GUI class which holds all the GUI components and the state of them
 class GUI
   attr_reader :workspace, :gui, :tileselector, :objectselector
@@ -46,67 +93,25 @@
                                                     CL_Size.new($screen_width - 6 -134-16, 50)), 
                            @gui.get_component())
 
-    @button_panel = ButtonPanel.new(0, 23, $screen_width, 33, true, @gui.get_component)
+    @button_panel = ButtonPanel.new_from_spec(0, 23, $screen_width, 33, true, $toolbar_spec, @gui.get_component)
 
-    @button_panel.add_icon("../data/images/icons24/stock_new.png")
-    @button_panel.add_icon("../data/images/icons24/stock_open.png", proc{ level_load() })
-    @button_panel.add_small_icon("../data/images/icons24/downarrow.png", proc{ $controller.recent_files_menu.run() })
-    @button_panel.add_icon("../data/images/icons24/stock_save.png", proc{ level_save() })
-    @button_panel.add_icon("../data/images/icons24/stock_save_as.png", proc{ level_save_as() })
-    @button_panel.add_separator()
-    @button_panel.add_icon("../data/images/icons24/stock_copy.png")
-    @button_panel.add_icon("../data/images/icons24/stock_paste.png")
-    @button_panel.add_separator()
-    @undo_icon = @button_panel.add_icon("../data/images/icons24/stock_undo.png", proc{ @workspace.get_map().undo() })
-    @redo_icon = @button_panel.add_icon("../data/images/icons24/stock_redo.png", proc{ @workspace.get_map().redo() })
-    @undo_icon.disable()
-    @redo_icon.disable()
-    @button_panel.add_separator()
-    @minimap_icon = @button_panel.add_icon("../data/images/icons24/minimap.png", proc{ toggle_minimap() })
-    @grid_icon = @button_panel.add_icon("../data/images/icons24/grid.png", proc{ toggle_grid() })
-    @button_panel.add_separator()
+    @button_panel.items["undo"].disable()
+    @button_panel.items["redo"].disable()
 
-    @background_icon  = @button_panel.add_icon("../data/images/icons24/background.png")
-    @interactive_icon = @button_panel.add_icon("../data/images/icons24/interactive.png")
-    @foreground_icon  = @button_panel.add_icon("../data/images/icons24/foreground.png")
-    @eye_icon = @button_panel.add_icon("../data/images/icons24/eye.png")
-
-    @button_panel.add_icon("../data/images/icons24/eye.png", proc{ @tilegroup_menu.run() })
-
     @layer_menu = Menu.new(CL_Point.new(32*15+2, 54), @gui.get_component())
     
     @toolbar = ButtonPanel.new(0, 23+33, 33, 32*4+2, false, @gui.get_component)
-    @paint  = @toolbar.add_icon("../data/images/tools/stock-tool-pencil-22.png", proc{ $controller.set_tilemap_paint_tool() })
-    @select = @toolbar.add_icon("../data/images/tools/stock-tool-rect-select-22.png", proc{ $controller.set_tilemap_select_tool() })
-    @zoom   = @toolbar.add_icon("../data/images/tools/stock-tool-zoom-22.png", proc{ $controller.set_zoom_tool() })
-    @object = @toolbar.add_icon("../data/images/tools/stock-tool-clone-22.png", proc{ $controller.set_objmap_select_tool() })
+    @paint  = @toolbar.add_icon("../data/images/tools/stock-tool-pencil-22.png") { $controller.set_tilemap_paint_tool() }
+    @select = @toolbar.add_icon("../data/images/tools/stock-tool-rect-select-22.png") { $controller.set_tilemap_select_tool() }
+    @zoom   = @toolbar.add_icon("../data/images/tools/stock-tool-zoom-22.png") { $controller.set_zoom_tool() }
+    @object = @toolbar.add_icon("../data/images/tools/stock-tool-clone-22.png") { $controller.set_objmap_select_tool() }
 
-    @foreground_icon.set_callback(proc{ show_foreground() })
-    @interactive_icon.set_callback(proc{ show_interactive() })
-    @background_icon.set_callback(proc{ show_background() })
-    @eye_icon.set_callback(proc{ $layer_menu.run() })
-
     @layer_menu.add_item($mysprite, "Show all", proc{ show_all() })
     @layer_menu.add_item($mysprite, "Show current", proc{ show_current() })
     @layer_menu.add_item($mysprite, "Show only current", proc{ show_only_current() })
 
-    @menu = CL_Menu.new(@gui.get_component())
-    @menu.add_item("File/Open...", proc{ level_load() })
-    @menu.add_item("File/Save...", proc{ level_save() })
-    # @menu.add_item("File/Save Commands...", menu_file_save_commands)
-    @menu.add_item("File/Save As...", proc{ level_save_as() })
-    @menu.add_item("File/Quit",  proc{ @gui.quit() })
+    @menu = CL_Menu.new_from_spec($menu_spec, @gui.get_component)
 
-    @menu.add_item("Edit/Resize", proc{ resize_level() })
-    @menu.add_item("Edit/Resize to selection", proc{ resize_level_to_selection()})
-    @menu.add_item("Edit/Debug Shell", proc{ run_python()})
-
-    @menu.add_item("Zoom/1:4 (25%) ",  proc{ set_zoom(0.25) })
-    @menu.add_item("Zoom/1:2 (50%) ",  proc{ set_zoom(0.5) })
-    @menu.add_item("Zoom/1:1 (100%) ", proc{ set_zoom(1.0) }) 
-    @menu.add_item("Zoom/2:1 (200%) ", proc{ set_zoom(2.0) })
-    @menu.add_item("Zoom/4:1 (400%) ", proc{ set_zoom(4.0) })
-
     @load_dialog = SimpleFileDialog.new("Load SuperTux Level", "Load", "Cancel", @gui.get_component())
     @load_dialog.set_filename($datadir + "levels/")
     @save_dialog = SimpleFileDialog.new("Save SuperTux Level as...", "Save", "Cancel", @gui.get_component())
@@ -164,36 +169,36 @@
 
   def on_map_change()
     if (@workspace.get_map().undo_stack_size() > 0)
-      @undo_icon.enable()
+      @button_panel.items["undo"].enable()
     else
-      @undo_icon.disable()
+      @button_panel.items["undo"].disable()
     end
 
     if (@workspace.get_map().redo_stack_size() > 0)
-      @redo_icon.enable()
+      @button_panel.items["redo"].enable()
     else
-      @redo_icon.disable()        
+      @button_panel.items["redo"].disable()
     end
   end
 
   def show_background()
-    @background_icon.set_down();
-    @interactive_icon.set_up();
-    @foreground_icon.set_up();
+    @button_panel.items["background"].set_down();
+    @button_panel.items["interactive"].set_up();
+    @button_panel.items["foreground"].set_up();
     TilemapLayer.set_current(@workspace.get_map().get_metadata().background)
   end
 
   def show_interactive()
-    @background_icon.set_up();
-    @interactive_icon.set_down();
-    @foreground_icon.set_up();
+    @button_panel.items["background"].set_up();
+    @button_panel.items["interactive"].set_down();
+    @button_panel.items["foreground"].set_up();
     TilemapLayer.set_current(@workspace.get_map().get_metadata().interactive)
   end
 
   def show_foreground()
-    @background_icon.set_up();
-    @interactive_icon.set_up();
-    @foreground_icon.set_down();
+    @button_panel.items["background"].set_up();
+    @button_panel.items["interactive"].set_up();
+    @button_panel.items["foreground"].set_down();
     TilemapLayer.set_current(@workspace.get_map().get_metadata().foreground)
   end
 
@@ -212,10 +217,10 @@
   def toggle_minimap()
     if @minimap.is_visible()
       @minimap.show(false)
-      @minimap_icon.set_up()
+      @button_panel.items["minimap"].set_up()
     else
       @minimap.show(true)
-      @minimap_icon.set_down()
+      @button_panel.items["minimap"].set_down()
     end
   end
 
@@ -224,9 +229,9 @@
     tilemap.set_draw_grid(!tilemap.get_draw_grid())
 
     if tilemap.get_draw_grid()
-      @grid_icon.set_down()
+      @button_panel.items["grid"].set_down()
     else
-      @grid_icon.set_up()
+      @button_panel.items["grid"].set_up()
     end
   end
 
@@ -264,6 +269,17 @@
     gc.set_zoom(zoom)
     gc.set_pos(pos)
   end
+  
+  def new_level()
+    level = @workspace.get_map().get_metadata()
+    dialog = GenericDialog.new("Create New Level", @gui.get_component())
+    dialog.add_int("Width: ", level.width)
+    dialog.add_int("Height: ", level.height)
+    dialog.add_int("X: ", 0)
+    dialog.add_int("Y: ", 0)
+    dialog.set_callback(proc{|w, h, x, y| 
+                          level.resize(CL_Size.new(w, h), CL_Point.new(x, y))})
+  end
 end
 
 # EOF #



From grumbel at berlios.de  Fri Aug 12 22:18:55 2005
From: grumbel at berlios.de (Ingo Ruhnke at BerliOS)
Date: Fri, 12 Aug 2005 22:18:55 +0200
Subject: [Flexlay-commit] r587 - in trunk: lib windstille
Message-ID: <200508122018.j7CKItjY004153@sheep.berlios.de>

Author: grumbel
Date: 2005-08-12 22:18:53 +0200 (Fri, 12 Aug 2005)
New Revision: 587

Added:
   trunk/windstille/controller.rb
   trunk/windstille/gui_specs.rb
Modified:
   trunk/lib/menu.cxx
   trunk/windstille/gui.rb
   trunk/windstille/windstille.rb
Log:
- some more cleanup


Modified: trunk/lib/menu.cxx
===================================================================
--- trunk/lib/menu.cxx	2005-08-12 16:37:09 UTC (rev 586)
+++ trunk/lib/menu.cxx	2005-08-12 20:18:53 UTC (rev 587)
@@ -242,7 +242,6 @@
 {
   if (current_item != -1)
     {
-      std::cout << "Current_Item: " << current_item << std::endl;
       items[current_item]->sig_clicked()();
     }
   parent->release_mouse();

Added: trunk/windstille/controller.rb
===================================================================
--- trunk/windstille/controller.rb	2005-08-12 16:37:09 UTC (rev 586)
+++ trunk/windstille/controller.rb	2005-08-12 20:18:53 UTC (rev 587)
@@ -0,0 +1,42 @@
+class Controller
+  attr_reader :tilemap_paint_tool, :tilemap_select_tool, :zoom_tool, :objmap_select_tool, :recent_files
+
+  def initialize()
+    @tilemap_paint_tool  = TileMapPaintTool.new()
+    @tilemap_select_tool = TileMapSelectTool.new()
+    @zoom_tool           = ZoomTool.new()
+    @objmap_select_tool  = ObjMapSelectTool.new()
+    @recent_files        = []
+  end
+    
+  def set_tilemap_paint_tool()
+    $gui.workspace.set_tool(@tilemap_paint_tool.to_tool())
+    $gui.set_tool_icon(:tilemap_paint)
+  end
+
+  def set_tilemap_select_tool()
+    $gui.workspace.set_tool(@tilemap_select_tool.to_tool())
+    $gui.set_tool_icon(:tilemap_select)
+  end
+
+  def set_zoom_tool()
+    $gui.workspace.set_tool(@zoom_tool.to_tool())
+    $gui.set_tool_icon(:zoom)
+  end
+
+  def set_objmap_select_tool()
+    $gui.workspace.set_tool(@objmap_select_tool.to_tool())
+    $gui.set_tool_icon(:object_select)
+  end  
+
+  def load_level(filename)
+    $startlevel = Level.new(filename)
+    $startlevel.activate($workspace)
+  end
+
+  def save_level(filename)
+    $startlevel.save(filename)
+  end
+end
+
+# EOF #

Modified: trunk/windstille/gui.rb
===================================================================
--- trunk/windstille/gui.rb	2005-08-12 16:37:09 UTC (rev 586)
+++ trunk/windstille/gui.rb	2005-08-12 20:18:53 UTC (rev 587)
@@ -1,6 +1,9 @@
 ##  $Id$
-## 
-##  Flexlay - A Generic 2D Game Editor
+##   ______ __               ___
+##  |   ___|  |.-----.--.--.|   | .---.-.--.--.
+##  |   ___|  ||  -__|_   _||   |_|  _  |  |  |
+##  |__|   |__||_____|__.__||_____|___._|___  |
+##                                      |_____|
 ##  Copyright (C) 2004 Ingo Ruhnke <grumbel at gmx.de>
 ##
 ##  This program is free software; you can redistribute it and/or
@@ -15,64 +18,17 @@
 ## 
 ##  You should have received a copy of the GNU General Public License
 ##  along with this program; if not, write to the Free Software
-##  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+##  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+##  02111-1307, USA.
 
 ## Create some Basic GUI, this is a bit more complicated then it
 ## should be due to the lack of proper button-banel class and layout manager
 
-$screen_width  = 1024
-$screen_height = 768
+require "gui_specs.rb"
 
-class MyButtonPanel
-end
-
-$menu_spec = [
-  ["File",
-    ["Open...",    proc{ $gui.level_load() }],
-    ["Save...",    proc{ $gui.level_save() }],
-    ["Save As...", proc{ $gui.level_save_as() }],
-    ["Quit",       proc{ $gui.gui.quit() }],
-  ],
-  ["Edit",
-    ["Resize", proc{ $gui.resize_level() }],
-    ["Resize to selection", proc{ $gui.resize_level_to_selection()}],
-    ["Debug Shell", proc{ $gui.run_python()}],
-  ],
-  ["Zoom",
-    ["1:4 (25%)",   proc{ $gui.set_zoom(0.25) }],
-    ["1:2 (50%) ",  proc{ $gui.set_zoom(0.5) }],
-    ["1:1 (100%) ", proc{ $gui.set_zoom(1.0) }],
-    ["2:1 (200%) ", proc{ $gui.set_zoom(2.0) }],
-    ["4:1 (400%) ", proc{ $gui.set_zoom(4.0) }],
-  ]
-]
-
-$toolbar_spec = [
-  [:icon,       "new",         "../data/images/icons24/stock_new.png",     proc{ $gui.new_level() }],
-  [:icon,       "open",        "../data/images/icons24/stock_open.png",    proc{ $gui.level_load() }],
-  [:small_icon, "recent",      "../data/images/icons24/downarrow.png",     proc{ $controller.recent_files_menu.run() }],
-  [:icon,       "save",        "../data/images/icons24/stock_save.png",    proc{ $gui.level_save() }],
-  [:icon,       "saveas",      "../data/images/icons24/stock_save_as.png", proc{ $gui.level_save_as() }],
-  [:seperator],
-  [:icon,       "copy",        "../data/images/icons24/stock_copy.png",    nil],
-  [:icon,       "paste",       "../data/images/icons24/stock_paste.png",   nil],
-  [:seperator],
-  [:icon,       "undo",        "../data/images/icons24/stock_undo.png",    proc{ $gui.workspace.get_map().undo() }],
-  [:icon,       "redo",        "../data/images/icons24/stock_redo.png",    proc{ $gui.workspace.get_map().redo() }],
-  [:seperator],
-  [:toggle,     "minimap",     "../data/images/icons24/minimap.png",       proc{ $gui.toggle_minimap() }],
-  [:toggle,     "grid",        "../data/images/icons24/grid.png",          proc{ $gui.toggle_grid() }],
-  [:seperator],
-  [:icon,       "background",  "../data/images/icons24/background.png",    proc{ $gui.show_background() }],
-  [:icon,       "interactive", "../data/images/icons24/interactive.png",   proc{ $gui.show_interactive() }],
-  [:icon,       "foreground",  "../data/images/icons24/foreground.png",    proc{ $gui.show_foreground() }],
-  [:icon,       "viewprops",   "../data/images/icons24/eye.png",           proc{ @layer_menu.run() }],
-  [:icon,       "tilegroups",  "../data/images/icons24/eye.png",           proc{ @tilegroup_menu.run() }],
-]
-
 ## GUI class which holds all the GUI components and the state of them
 class GUI
-  attr_reader :workspace, :gui, :tileselector, :objectselector
+  attr_reader :workspace, :gui, :tileselector, :objectselector, :tilegroup_menu, :layer_menu
 
   def run()
     ## Enter main loop here
@@ -88,32 +44,27 @@
     @workspace  = Workspace.new(myrect.get_width(), myrect.get_height())
     @editor_map.set_workspace(@workspace)
 
-    @minimap = Minimap.new(@editor_map, CL_Rect.new(CL_Point.new(3 + myrect.left, 
-                                                                 $screen_height - 600 + 488+3-14  + myrect.top), 
-                                                    CL_Size.new($screen_width - 6 -134-16, 50)), 
-                           @gui.get_component())
+    @button_panel = ButtonPanel.new_from_spec(0, 23, $screen_width, 33, true, $buttonpanel_spec, @gui.get_component)
 
-    @button_panel = ButtonPanel.new_from_spec(0, 23, $screen_width, 33, true, $toolbar_spec, @gui.get_component)
-
     @button_panel.items["undo"].disable()
     @button_panel.items["redo"].disable()
 
     @layer_menu = Menu.new(CL_Point.new(32*15+2, 54), @gui.get_component())
+    @layer_menu.add_item($mysprite, "Show all",          proc{ show_all() })
+    @layer_menu.add_item($mysprite, "Show current",      proc{ show_current() })
+    @layer_menu.add_item($mysprite, "Show only current", proc{ show_only_current() })
     
-    @toolbar = ButtonPanel.new(0, 23+33, 33, 32*4+2, false, @gui.get_component)
-    @paint  = @toolbar.add_icon("../data/images/tools/stock-tool-pencil-22.png") { $controller.set_tilemap_paint_tool() }
-    @select = @toolbar.add_icon("../data/images/tools/stock-tool-rect-select-22.png") { $controller.set_tilemap_select_tool() }
-    @zoom   = @toolbar.add_icon("../data/images/tools/stock-tool-zoom-22.png") { $controller.set_zoom_tool() }
-    @object = @toolbar.add_icon("../data/images/tools/stock-tool-clone-22.png") { $controller.set_objmap_select_tool() }
+    @toolbar = ButtonPanel.new_from_spec(0, 23+33, 33, 32*4+2, false, $toolbar_spec, @gui.get_component)
+    @paint  = @toolbar.items["paint"]
+    @select = @toolbar.items["select"]
+    @zoom   = @toolbar.items["zoom"]
+    @object = @toolbar.items["object"]
 
-    @layer_menu.add_item($mysprite, "Show all", proc{ show_all() })
-    @layer_menu.add_item($mysprite, "Show current", proc{ show_current() })
-    @layer_menu.add_item($mysprite, "Show only current", proc{ show_only_current() })
-
     @menu = CL_Menu.new_from_spec($menu_spec, @gui.get_component)
 
     @load_dialog = SimpleFileDialog.new("Load SuperTux Level", "Load", "Cancel", @gui.get_component())
     @load_dialog.set_filename($datadir + "levels/")
+
     @save_dialog = SimpleFileDialog.new("Save SuperTux Level as...", "Save", "Cancel", @gui.get_component())
     @save_dialog.set_filename($datadir + "levels/")
 
@@ -124,8 +75,6 @@
       @tilegroup_menu.add_item($mysprite, tilegroup.name, proc{@tileselector.set_tiles(tilegroup.tiles)})
     }
 
-    toggle_minimap()
-
     # Init the GUI, so that button state is in sync with internal state
     # show_interactive()
     # show_current()
@@ -134,8 +83,13 @@
     @selector_window = Panel.new(CL_Rect.new(CL_Point.new($screen_width-128-64-6, 23+33), 
                                              CL_Size.new(128 + 64 + 6, $screen_height - 600 + 558)),
                                  @gui.get_component())
+
+    @minimap = Minimap.new(@editor_map, CL_Rect.new(CL_Point.new(3,  $screen_height - 600 + 552 - 144 - 12), 
+                                                    CL_Size.new(192, 144)),
+                           @selector_window)
+
     @tileselector = TileSelector.new(CL_Rect.new(CL_Point.new(3, 3), 
-                                                 CL_Size.new(128+64, $screen_height - 600 + 552)),
+                                                 CL_Size.new(128+64, $screen_height - 600 + 552 - 144 - 3)),
                                      @selector_window)
     @tileselector.set_tileset($tileset)
     @tileselector.set_scale(0.375)
@@ -143,30 +97,32 @@
     @tileselector.set_tiles($tileset.get_tiles())
     @tileselector.show(true)
     
-    @objectselector = ObjectSelector.new(CL_Rect.new(0, 0, 128, $screen_height - 600 + 552), 42, 42, @selector_window)
+    @objectselector = ObjectSelector.new(CL_Rect.new(0, 0, 128, $screen_height - 600 + 552 - 144 - 3), 42, 42, @selector_window)
     @objectselector.show(false)
 
     connect_v2_ObjectBrush_Point(@objectselector.sig_drop(), proc{|brush, point| on_object_drop() })
 
-#    $game_objects.each do |object|
-#     @objectselector.add_brush(ObjectBrush.new(make_sprite($datadir + object[1]),
-#                                                make_metadata(object)))
-#    end
+    #    $game_objects.each do |object|
+    #     @objectselector.add_brush(ObjectBrush.new(make_sprite($datadir + object[1]),
+    #                                                make_metadata(object)))
+    #    end
 
     @load_dialog = SimpleFileDialog.new("Load SuperTux Level", "Load", "Cancel", @gui.get_component())
     @load_dialog.set_filename($datadir + "levels/")
     @save_dialog = SimpleFileDialog.new("Save SuperTux Level as...", "Save", "Cancel", @gui.get_component())
     @save_dialog.set_filename($datadir + "levels/")
+    
+    register_keybindings($keybinding_spec)
 
-    connect_v2(@editor_map.sig_on_key("f1"), proc{ |x, y| toggle_minimap()})
-    connect_v2(@editor_map.sig_on_key("m"),  proc{ |x, y| toggle_minimap()})
-    connect_v2(@editor_map.sig_on_key("g"),  proc{ |x, y| toggle_grid()})
-    connect_v2(@editor_map.sig_on_key("4"),  proc{ |x, y| toggle_display_props()})
-    connect_v2(@editor_map.sig_on_key("3"),  proc{ |x, y| show_foreground()})
-    connect_v2(@editor_map.sig_on_key("2"),  proc{ |x, y| show_interactive()})
-    connect_v2(@editor_map.sig_on_key("1"),  proc{ |x, y| show_background()})
+    set_zoom(0.5)
   end
 
+  def register_keybindings(spec)
+    spec.each{ |(key, callback)|
+      connect_v2(@editor_map.sig_on_key(key), callback)
+    }
+  end
+
   def on_map_change()
     if (@workspace.get_map().undo_stack_size() > 0)
       @button_panel.items["undo"].enable()
@@ -181,25 +137,27 @@
     end
   end
 
-  def show_background()
-    @button_panel.items["background"].set_down();
-    @button_panel.items["interactive"].set_up();
-    @button_panel.items["foreground"].set_up();
-    TilemapLayer.set_current(@workspace.get_map().get_metadata().background)
-  end
+  def show_layer(layer)
+    if layer == :background then
+      @button_panel.items["background"].set_down();
+      TilemapLayer.set_current(@workspace.get_map().get_metadata().background)
+    else
+      @button_panel.items["background"].set_up();
+    end
 
-  def show_interactive()
-    @button_panel.items["background"].set_up();
-    @button_panel.items["interactive"].set_down();
-    @button_panel.items["foreground"].set_up();
-    TilemapLayer.set_current(@workspace.get_map().get_metadata().interactive)
-  end
+    if layer == :interactive then
+      @button_panel.items["interactive"].set_down();
+      TilemapLayer.set_current(@workspace.get_map().get_metadata().interactive)
+    else
+      @button_panel.items["interactive"].set_up();
+    end
 
-  def show_foreground()
-    @button_panel.items["background"].set_up();
-    @button_panel.items["interactive"].set_up();
-    @button_panel.items["foreground"].set_down();
-    TilemapLayer.set_current(@workspace.get_map().get_metadata().foreground)
+    if layer == :foreground then
+      @button_panel.items["foreground"].set_down();
+      TilemapLayer.set_current(@workspace.get_map().get_metadata().interactive)
+    else
+      @button_panel.items["foreground"].set_up();
+    end
   end
 
   def level_load()
@@ -213,16 +171,6 @@
   def level_save_as()
     @save_dialog.run(proc{|filename| $controller.save_level(filename) })
   end
-  
-  def toggle_minimap()
-    if @minimap.is_visible()
-      @minimap.show(false)
-      @button_panel.items["minimap"].set_up()
-    else
-      @minimap.show(true)
-      @button_panel.items["minimap"].set_down()
-    end
-  end
 
   def toggle_grid()
     tilemap = @workspace.get_map().get_data().layers[0];
@@ -235,41 +183,20 @@
     end
   end
 
-  def set_tilemap_paint_tool()
-    @paint.set_down()
-    @select.set_up()
-    @zoom.set_up()
-    @object.set_up()
+  def set_tool_icon(tool)
+    if tool == :tilemap_paint  then  @paint.set_down()  else @paint.set_up()  end
+    if tool == :tilemap_select then  @select.set_down() else @select.set_up() end
+    if tool == :zoom           then  @zoom.set_down()   else @zoom.set_up()   end
+    if tool == :object_select  then  @object.set_down() else @object.set_up() end
   end
-
-  def set_tilemap_select_tool()
-    @paint.set_up()
-    @select.set_down()
-    @zoom.set_up()
-    @object.set_up()
-  end
-
-  def set_zoom_tool()
-    @paint.set_up()
-    @select.set_up()
-    @zoom.set_down()
-    @object.set_up()
-  end
-
-  def set_objmap_select_tool()
-    @paint.set_up()
-    @select.set_up()
-    @zoom.set_up()
-    @object.set_down()
-  end
-
+  
   def set_zoom(zoom)
     gc = @editor_map.get_workspace().get_gc_state()
     pos = gc.get_pos()
     gc.set_zoom(zoom)
     gc.set_pos(pos)
   end
-  
+
   def new_level()
     level = @workspace.get_map().get_metadata()
     dialog = GenericDialog.new("Create New Level", @gui.get_component())

Added: trunk/windstille/gui_specs.rb
===================================================================
--- trunk/windstille/gui_specs.rb	2005-08-12 16:37:09 UTC (rev 586)
+++ trunk/windstille/gui_specs.rb	2005-08-12 20:18:53 UTC (rev 587)
@@ -0,0 +1,88 @@
+##  $Id$
+##   ______ __               ___
+##  |   ___|  |.-----.--.--.|   | .---.-.--.--.
+##  |   ___|  ||  -__|_   _||   |_|  _  |  |  |
+##  |__|   |__||_____|__.__||_____|___._|___  |
+##                                      |_____|
+##  Copyright (C) 2004 Ingo Ruhnke <grumbel at gmx.de>
+##
+##  This program is free software; you can redistribute it and/or
+##  modify it under the terms of the GNU General Public License
+##  as published by the Free Software Foundation; either version 2
+##  of the License, or (at your option) any later version.
+##
+##  This program is distributed in the hope that it will be useful,
+##  but WITHOUT ANY WARRANTY; without even the implied warranty of
+##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+##  GNU General Public License for more details.
+## 
+##  You should have received a copy of the GNU General Public License
+##  along with this program; if not, write to the Free Software
+##  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+##  02111-1307, USA.
+
+$screen_width  = 1024
+$screen_height = 768
+
+$menu_spec = [
+  ["File",
+    ["Open...",    proc{ $gui.level_load() }],
+    ["Save...",    proc{ $gui.level_save() }],
+    ["Save As...", proc{ $gui.level_save_as() }],
+    ["Quit",       proc{ $gui.gui.quit() }],
+  ],
+  ["Edit",
+    ["Resize", proc{ $gui.resize_level() }],
+    ["Resize to selection", proc{ $gui.resize_level_to_selection()}],
+    ["Debug Shell", proc{ $gui.run_python()}],
+  ],
+  ["Zoom",
+    ["1:4 (25%)",   proc{ $gui.set_zoom(0.125) }],
+    ["1:2 (50%) ",  proc{ $gui.set_zoom(0.25) }],
+    ["1:1 (100%) ", proc{ $gui.set_zoom(0.5) }],
+    ["2:1 (200%) ", proc{ $gui.set_zoom(1.0) }],
+    ["4:1 (400%) ", proc{ $gui.set_zoom(2.0) }],
+  ]
+]
+
+$buttonpanel_spec = [
+  [:icon,       "new",         "../data/images/icons24/stock_new.png",     proc{ $gui.new_level() }],
+  [:icon,       "open",        "../data/images/icons24/stock_open.png",    proc{ $gui.level_load() }],
+  [:small_icon, "recent",      "../data/images/icons24/downarrow.png",     proc{ $controller.recent_files_menu.run() }],
+  [:icon,       "save",        "../data/images/icons24/stock_save.png",    proc{ $gui.level_save() }],
+  [:icon,       "saveas",      "../data/images/icons24/stock_save_as.png", proc{ $gui.level_save_as() }],
+  [:seperator],
+  [:icon,       "copy",        "../data/images/icons24/stock_copy.png",    nil],
+  [:icon,       "paste",       "../data/images/icons24/stock_paste.png",   nil],
+  [:seperator],
+  [:icon,       "undo",        "../data/images/icons24/stock_undo.png",    proc{ $gui.workspace.get_map().undo() }],
+  [:icon,       "redo",        "../data/images/icons24/stock_redo.png",    proc{ $gui.workspace.get_map().redo() }],
+  [:seperator],
+  [:toggle,     "grid",        "../data/images/icons24/grid.png",          proc{ $gui.toggle_grid() }],
+  [:seperator],
+  [:icon,       "background",  "../data/images/icons24/background.png",    proc{ $gui.show_layer(:background) }],
+  [:icon,       "interactive", "../data/images/icons24/interactive.png",   proc{ $gui.show_layer(:interactive) }],
+  [:icon,       "foreground",  "../data/images/icons24/foreground.png",    proc{ $gui.show_layer(:foreground) }],
+  [:icon,       "viewprops",   "../data/images/icons24/eye.png",           proc{ $gui.layer_menu.run() }],
+  [:icon,       "tilegroups",  "../data/images/icons24/eye.png",           proc{ $gui.tilegroup_menu.run() }],
+]
+
+$toolbar_spec = [
+  [:icon, "paint",  "../data/images/tools/stock-tool-pencil-22.png",      proc{ $controller.set_tilemap_paint_tool() }],
+  [:icon, "select", "../data/images/tools/stock-tool-rect-select-22.png", proc{ $controller.set_tilemap_select_tool() }],
+  [:icon, "zoom",   "../data/images/tools/stock-tool-zoom-22.png",        proc{ $controller.set_zoom_tool() }],
+  [:icon, "object", "../data/images/tools/stock-tool-clone-22.png",       proc{ $controller.set_objmap_select_tool() }],
+]
+
+$keybinding_spec = [
+  ["f1", proc{ |x, y| $gui.toggle_minimap()}],
+  ["m",  proc{ |x, y| $gui.toggle_minimap()}],
+  ["g",  proc{ |x, y| $gui.toggle_grid()}],
+  ["4",  proc{ |x, y| $gui.toggle_display_props()}],
+  ["3",  proc{ |x, y| $gui.show_layer(:foreground)}],
+  ["2",  proc{ |x, y| $gui.show_layer(:interactive)}],
+  ["1",  proc{ |x, y| $gui.show_layer(:background)}],
+]
+
+## EOF ##
+

Modified: trunk/windstille/windstille.rb
===================================================================
--- trunk/windstille/windstille.rb	2005-08-12 16:37:09 UTC (rev 586)
+++ trunk/windstille/windstille.rb	2005-08-12 20:18:53 UTC (rev 587)
@@ -35,6 +35,7 @@
 
 require "flexlay.rb"
 
+require "controller.rb"
 require "sexpr.rb"
 require "gui.rb"
 require "level.rb"
@@ -45,47 +46,7 @@
 flexlay.init(1024, 768)
 
 ## Initialize Tools
-class Controller
-  attr_reader :tilemap_paint_tool, :tilemap_select_tool, :zoom_tool, :objmap_select_tool, :recent_files
 
-  def initialize()
-    @tilemap_paint_tool  = TileMapPaintTool.new()
-    @tilemap_select_tool = TileMapSelectTool.new()
-    @zoom_tool           = ZoomTool.new()
-    @objmap_select_tool  = ObjMapSelectTool.new()
-    @recent_files        = []
-  end
-    
-  def set_tilemap_paint_tool()
-    $gui.workspace.set_tool(@tilemap_paint_tool.to_tool())
-    $gui.set_tilemap_paint_tool()
-  end
-
-  def set_tilemap_select_tool()
-    $gui.workspace.set_tool(@tilemap_select_tool.to_tool())
-    $gui.set_tilemap_select_tool()
-  end
-
-  def set_zoom_tool()
-    $gui.workspace.set_tool(@zoom_tool.to_tool())
-    $gui.set_zoom_tool()
-  end
-
-  def set_objmap_select_tool()
-    $gui.workspace.set_tool(@objmap_select_tool.to_tool())
-    $gui.set_objmap_select_tool()
-  end  
-
-  def load_level(filename)
-    $startlevel = Level.new(filename)
-    $startlevel.activate($workspace)
-  end
-
-  def save_level(filename)
-    $startlevel.save(filename)
-  end
-end
-
 $controller = Controller.new()
 
 $mysprite = make_sprite("../data/images/icons16/stock_paste-16.png")



From grumbel at berlios.de  Sat Aug 13 00:37:17 2005
From: grumbel at berlios.de (Ingo Ruhnke at BerliOS)
Date: Sat, 13 Aug 2005 00:37:17 +0200
Subject: [Flexlay-commit] r588 - in trunk: lib windstille
Message-ID: <200508122237.j7CMbHet022919@sheep.berlios.de>

Author: grumbel
Date: 2005-08-13 00:36:31 +0200 (Sat, 13 Aug 2005)
New Revision: 588

Added:
   trunk/windstille/gameobjects.rb
   trunk/windstille/windstille-editor-gdb
Modified:
   trunk/lib/flexlay_wrap.i
   trunk/lib/helper.cxx
   trunk/lib/helper.hxx
   trunk/windstille/gui.rb
   trunk/windstille/gui_specs.rb
   trunk/windstille/level.rb
   trunk/windstille/tileset.rb
   trunk/windstille/windstille.rb
Log:
- changed tile size handling
- added basic support for objects

Modified: trunk/lib/flexlay_wrap.i
===================================================================
--- trunk/lib/flexlay_wrap.i	2005-08-12 20:18:53 UTC (rev 587)
+++ trunk/lib/flexlay_wrap.i	2005-08-12 22:36:31 UTC (rev 588)
@@ -205,4 +205,5 @@
 %include "../ruby/ruby_sexpr_parser.hxx"
 #endif
 
+
 /* EOF */

Modified: trunk/lib/helper.cxx
===================================================================
--- trunk/lib/helper.cxx	2005-08-12 20:18:53 UTC (rev 587)
+++ trunk/lib/helper.cxx	2005-08-12 22:36:31 UTC (rev 588)
@@ -119,4 +119,36 @@
   }
 }
 
+CL_PixelBuffer
+scale_pixelbuffer(CL_PixelBuffer buffer)
+{
+  CL_PixelBuffer target(buffer.get_width()/2, buffer.get_height()/2, (buffer.get_width()/2)*4, 
+                        CL_PixelFormat::rgba8888);
+
+  target.lock();
+  buffer.lock();
+
+  unsigned char* target_buf = static_cast<unsigned char*>(target.get_data());
+  unsigned char* buffer_buf = static_cast<unsigned char*>(buffer.get_data());
+  
+  int width  = target.get_width();
+  int height = target.get_height();
+  int target_pitch = target.get_pitch();
+  int buffer_pitch = buffer.get_pitch();
+  
+  for(int y = 0; y < height; ++y)
+    for(int x = 0; x < width; ++x)
+      {
+        target_buf[target_pitch*y + 4*x + 0] = buffer_buf[buffer_pitch * y*2 + 4*x*2 + 0];
+        target_buf[target_pitch*y + 4*x + 1] = buffer_buf[buffer_pitch * y*2 + 4*x*2 + 1];
+        target_buf[target_pitch*y + 4*x + 2] = buffer_buf[buffer_pitch * y*2 + 4*x*2 + 2];
+        target_buf[target_pitch*y + 4*x + 3] = buffer_buf[buffer_pitch * y*2 + 4*x*2 + 3];
+      }
+
+  buffer.unlock();
+  target.unlock();
+  
+  return target;
+}
+
 /* EOF */

Modified: trunk/lib/helper.hxx
===================================================================
--- trunk/lib/helper.hxx	2005-08-12 20:18:53 UTC (rev 587)
+++ trunk/lib/helper.hxx	2005-08-12 22:36:31 UTC (rev 588)
@@ -29,6 +29,7 @@
 CL_PixelBuffer make_region_pixelbuffer(const std::string& filename, int x, int y, int w, int h);
 CL_PixelBuffer make_region_pixelbuffer(const CL_PixelBuffer& buffer, int x, int y, int w, int h);
 CL_PixelBuffer make_pixelbuffer(int width, int height);
+CL_PixelBuffer scale_pixelbuffer(CL_PixelBuffer buffer);
 
 CL_Sprite      make_sprite_from_resource(const std::string& filename, CL_ResourceManager& resources);
 CL_PixelBuffer make_pixelbuffer_from_resource(const std::string& filename, CL_ResourceManager& resources);

Added: trunk/windstille/gameobjects.rb
===================================================================
--- trunk/windstille/gameobjects.rb	2005-08-12 20:18:53 UTC (rev 587)
+++ trunk/windstille/gameobjects.rb	2005-08-12 22:36:31 UTC (rev 588)
@@ -0,0 +1,29 @@
+##  $Id$
+##   ______ __               ___
+##  |   ___|  |.-----.--.--.|   | .---.-.--.--.
+##  |   ___|  ||  -__|_   _||   |_|  _  |  |  |
+##  |__|   |__||_____|__.__||_____|___._|___  |
+##                                      |_____|
+##  Copyright (C) 2004 Ingo Ruhnke <grumbel at gmx.de>
+##
+##  This program is free software; you can redistribute it and/or
+##  modify it under the terms of the GNU General Public License
+##  as published by the Free Software Foundation; either version 2
+##  of the License, or (at your option) any later version.
+##
+##  This program is distributed in the hope that it will be useful,
+##  but WITHOUT ANY WARRANTY; without even the implied warranty of
+##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+##  GNU General Public License for more details.
+## 
+##  You should have received a copy of the GNU General Public License
+##  along with this program; if not, write to the Free Software
+##  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+##  02111-1307, USA.
+
+$gameobjects = [
+  ["streetlamp", "images/streetlamp.png", "sprite",
+    proc{|data, sexpr| nil}],
+]
+
+## EOF ##

Modified: trunk/windstille/gui.rb
===================================================================
--- trunk/windstille/gui.rb	2005-08-12 20:18:53 UTC (rev 587)
+++ trunk/windstille/gui.rb	2005-08-12 22:36:31 UTC (rev 588)
@@ -21,9 +21,7 @@
 ##  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 ##  02111-1307, USA.
 
-## Create some Basic GUI, this is a bit more complicated then it
-## should be due to the lack of proper button-banel class and layout manager
-
+require "gameobjects.rb"
 require "gui_specs.rb"
 
 ## GUI class which holds all the GUI components and the state of them
@@ -55,13 +53,8 @@
     @layer_menu.add_item($mysprite, "Show only current", proc{ show_only_current() })
     
     @toolbar = ButtonPanel.new_from_spec(0, 23+33, 33, 32*4+2, false, $toolbar_spec, @gui.get_component)
-    @paint  = @toolbar.items["paint"]
-    @select = @toolbar.items["select"]
-    @zoom   = @toolbar.items["zoom"]
-    @object = @toolbar.items["object"]
+    @menu    = CL_Menu.new_from_spec($menu_spec, @gui.get_component)
 
-    @menu = CL_Menu.new_from_spec($menu_spec, @gui.get_component)
-
     @load_dialog = SimpleFileDialog.new("Load SuperTux Level", "Load", "Cancel", @gui.get_component())
     @load_dialog.set_filename($datadir + "levels/")
 
@@ -75,11 +68,6 @@
       @tilegroup_menu.add_item($mysprite, tilegroup.name, proc{@tileselector.set_tiles(tilegroup.tiles)})
     }
 
-    # Init the GUI, so that button state is in sync with internal state
-    # show_interactive()
-    # show_current()
-    # set_tilemap_paint_tool()
-
     @selector_window = Panel.new(CL_Rect.new(CL_Point.new($screen_width-128-64-6, 23+33), 
                                              CL_Size.new(128 + 64 + 6, $screen_height - 600 + 558)),
                                  @gui.get_component())
@@ -92,20 +80,20 @@
                                                  CL_Size.new(128+64, $screen_height - 600 + 552 - 144 - 3)),
                                      @selector_window)
     @tileselector.set_tileset($tileset)
-    @tileselector.set_scale(0.375)
-    # @tileselector.set_tiles($tileset.tilegroups[0].tiles)
-    @tileselector.set_tiles($tileset.get_tiles())
+    @tileselector.set_scale(0.75)
+    @tileselector.set_tiles($tileset.tilegroups[0].tiles)
+    # @tileselector.set_tiles($tileset.get_tiles())
     @tileselector.show(true)
     
     @objectselector = ObjectSelector.new(CL_Rect.new(0, 0, 128, $screen_height - 600 + 552 - 144 - 3), 42, 42, @selector_window)
     @objectselector.show(false)
 
-    connect_v2_ObjectBrush_Point(@objectselector.sig_drop(), proc{|brush, point| on_object_drop() })
+    connect_v2_ObjectBrush_Point(@objectselector.sig_drop(), proc{|brush, pos| on_object_drop(brush, pos) })
 
-    #    $game_objects.each do |object|
-    #     @objectselector.add_brush(ObjectBrush.new(make_sprite($datadir + object[1]),
-    #                                                make_metadata(object)))
-    #    end
+    $gameobjects.each do |object|
+      @objectselector.add_brush(ObjectBrush.new(make_sprite($datadir + object[1]),
+                                                make_metadata(object)))
+    end
 
     @load_dialog = SimpleFileDialog.new("Load SuperTux Level", "Load", "Cancel", @gui.get_component())
     @load_dialog.set_filename($datadir + "levels/")
@@ -184,10 +172,18 @@
   end
 
   def set_tool_icon(tool)
-    if tool == :tilemap_paint  then  @paint.set_down()  else @paint.set_up()  end
-    if tool == :tilemap_select then  @select.set_down() else @select.set_up() end
-    if tool == :zoom           then  @zoom.set_down()   else @zoom.set_up()   end
-    if tool == :object_select  then  @object.set_down() else @object.set_up() end
+    if tool == :tilemap_paint  then  @toolbar.items["paint"].set_down()  else @toolbar.items["paint"].set_up()  end
+    if tool == :tilemap_select then  @toolbar.items["select"].set_down() else @toolbar.items["select"].set_up() end
+    if tool == :zoom           then  @toolbar.items["zoom"].set_down()   else @toolbar.items["zoom"].set_up()   end
+    if tool == :object_select  then  @toolbar.items["object"].set_down() else @toolbar.items["object"].set_up() end
+
+    if tool == :tilemap_paint then
+      @objectselector.show(false)
+      @tileselector.show(true)
+    elsif tool == :object_select then
+      @objectselector.show(true)
+      @tileselector.show(false)
+    end
   end
   
   def set_zoom(zoom)
@@ -207,6 +203,26 @@
     dialog.set_callback(proc{|w, h, x, y| 
                           level.resize(CL_Size.new(w, h), CL_Point.new(x, y))})
   end
+
+  def on_object_drop(brush, pos)
+    pos  = @editor_map.screen2world(pos)
+    data = get_ruby_object(brush.get_data())
+    create_gameobject($gui.workspace.get_map().get_metadata().objects, data, pos)
+  end
+
+  def create_gameobject(objmap, data, pos, sexpr = [])
+    case data[2] 
+    when "sprite" 
+      obj = ObjMapSpriteObject.new(make_sprite($datadir + data[1]), pos, make_metadata(nil))
+      gobj = data[3].call(obj, sexpr) 
+      obj.to_object.set_metadata(make_metadata(gobj))
+    end
+    
+    cmd = ObjectAddCommand.new(objmap)
+    cmd.add_object(obj.to_object);
+    $gui.workspace.get_map().execute(cmd.to_command());
+    return obj
+  end
 end
 
 # EOF #

Modified: trunk/windstille/gui_specs.rb
===================================================================
--- trunk/windstille/gui_specs.rb	2005-08-12 20:18:53 UTC (rev 587)
+++ trunk/windstille/gui_specs.rb	2005-08-12 22:36:31 UTC (rev 588)
@@ -64,6 +64,7 @@
   [:icon,       "interactive", "../data/images/icons24/interactive.png",   proc{ $gui.show_layer(:interactive) }],
   [:icon,       "foreground",  "../data/images/icons24/foreground.png",    proc{ $gui.show_layer(:foreground) }],
   [:icon,       "viewprops",   "../data/images/icons24/eye.png",           proc{ $gui.layer_menu.run() }],
+  [:seperator],
   [:icon,       "tilegroups",  "../data/images/icons24/eye.png",           proc{ $gui.tilegroup_menu.run() }],
 ]
 

Modified: trunk/windstille/level.rb
===================================================================
--- trunk/windstille/level.rb	2005-08-12 20:18:53 UTC (rev 587)
+++ trunk/windstille/level.rb	2005-08-12 22:36:31 UTC (rev 588)
@@ -31,7 +31,7 @@
 class Level
   ## Level Properties
   attr_reader :layers, :editormap
-  attr_reader :background, :interactive, :foreground
+  attr_reader :background, :interactive, :foreground, :objects
 
   attr_accessor :name
 

Modified: trunk/windstille/tileset.rb
===================================================================
--- trunk/windstille/tileset.rb	2005-08-12 20:18:53 UTC (rev 587)
+++ trunk/windstille/tileset.rb	2005-08-12 22:36:31 UTC (rev 588)
@@ -58,8 +58,8 @@
           pixelbuffer = make_pixelbuffer($datadir + 'images/' + image)
         elsif image.is_a?(Array) then
           if image[0] == "region" then
-            pixelbuffer = make_region_pixelbuffer($datadir + 'images/' + image[1],
-                                                  image[2], image[3], image[4], image[5])
+            pixelbuffer = scale_pixelbuffer(make_region_pixelbuffer($datadir + 'images/' + image[1],
+                                                                    image[2], image[3], image[4], image[5]))
           end
         end
         
@@ -98,8 +98,8 @@
           (0..width-1).each {|x|
             if (y*width + x < ids.length) then
               $tileset.add_tile(ids[y*width + x],
-                                Tile.new(make_region_pixelbuffer(pixelbuffer,
-                                                                 64*x, 64*y, 64, 64)))
+                                Tile.new(scale_pixelbuffer(make_region_pixelbuffer(pixelbuffer,
+                                                                                   64*x, 64*y, 64, 64))))
             else
               puts "Id out of range: #{y*width + x} >= #{ids.length} for image #{$datadir + image}"
             end

Added: trunk/windstille/windstille-editor-gdb
===================================================================
--- trunk/windstille/windstille-editor-gdb	2005-08-12 20:18:53 UTC (rev 587)
+++ trunk/windstille/windstille-editor-gdb	2005-08-12 22:36:31 UTC (rev 588)
@@ -0,0 +1,11 @@
+#!/bin/sh
+
+LD_LIBRARY_PATH=$LD_LIBRARY_PATH:../lib:../ruby
+export LD_LIBRARY_PATH
+
+RUBYLIB=.:$RUBYLIB:../ruby
+export RUBYLIB
+
+exec gdb --args ruby ./windstille.rb "$@"
+
+# EOF #


Property changes on: trunk/windstille/windstille-editor-gdb
___________________________________________________________________
Name: svn:executable
   + *

Modified: trunk/windstille/windstille.rb
===================================================================
--- trunk/windstille/windstille.rb	2005-08-12 20:18:53 UTC (rev 587)
+++ trunk/windstille/windstille.rb	2005-08-12 22:36:31 UTC (rev 588)
@@ -54,7 +54,7 @@
              
 $resources = CL_ResourceManager.new("../data/flexlay.xml")
 
-$tileset = Tileset.new(64)
+$tileset = Tileset.new(32)
 $tileset.load($datadir + "tiles.scm")
 
 ## Create some basic GUI



From grumbel at berlios.de  Sat Aug 13 00:54:54 2005
From: grumbel at berlios.de (Ingo Ruhnke at BerliOS)
Date: Sat, 13 Aug 2005 00:54:54 +0200
Subject: [Flexlay-commit] r589 - trunk/windstille
Message-ID: <200508122254.j7CMssx9003293@sheep.berlios.de>

Author: grumbel
Date: 2005-08-13 00:54:46 +0200 (Sat, 13 Aug 2005)
New Revision: 589

Modified:
   trunk/windstille/level.rb
Log:
- some better object support

Modified: trunk/windstille/level.rb
===================================================================
--- trunk/windstille/level.rb	2005-08-12 22:36:31 UTC (rev 588)
+++ trunk/windstille/level.rb	2005-08-12 22:54:46 UTC (rev 589)
@@ -77,6 +77,9 @@
     @music   = get_value_from_tree(["music", "_"],   data, 0)
 
     objects = get_value_from_tree(["objects"],  data, [])
+    
+    @layers = []
+    @objects = ObjectLayer.new()
 
     objects.each{ |object|
       objtype = object[0]
@@ -102,12 +105,21 @@
         else
           puts "Unknown Tilemap: #{name}"
         end
+      when "scriptable-object"
+        
       else
         puts "Unknown object: '#{objtype}'"
+        pos = get_value_from_tree(["pos"], objdata, [0,0])
+        obj = ObjMapSpriteObject.new(make_sprite($datadir + "images/streetlamp.png"), 
+                                     CL_Pointf.new(pos[0], pos[1]), make_metadata(nil))
+        # gobj = data[3].call(obj, sexpr) 
+        obj.to_object.set_metadata(make_metadata(nil))
+      
+        @objects.add_object(obj.to_object)
       end
     }
     
-    @layers = [@background, @interactive, @foreground]
+    @layers += [@background, @interactive, @foreground, @objects]
 
     @editormap = EditorMap.new()
     @layers.each {|layer| 



From grumbel at berlios.de  Sat Aug 13 05:27:52 2005
From: grumbel at berlios.de (Ingo Ruhnke at BerliOS)
Date: Sat, 13 Aug 2005 05:27:52 +0200
Subject: [Flexlay-commit] r590 - in trunk: lib ruby supertux windstille
Message-ID: <200508130327.j7D3Rq1f002860@sheep.berlios.de>

Author: grumbel
Date: 2005-08-13 05:27:42 +0200 (Sat, 13 Aug 2005)
New Revision: 590

Added:
   trunk/windstille/sector.rb
Removed:
   trunk/windstille/level.rb
Modified:
   trunk/lib/
   trunk/ruby/ruby_sexpr_parser.cxx
   trunk/ruby/sexpr.rb
   trunk/supertux/data.rb
   trunk/supertux/sector.rb
   trunk/supertux/tileset.rb
   trunk/windstille/controller.rb
   trunk/windstille/gameobjects.rb
   trunk/windstille/gui.rb
   trunk/windstille/tileset.rb
   trunk/windstille/windstille.rb
Log:
- some more support for the windstille fileformat, now handles unimplemented objects sanly
- changed lisp handling a bit, might break supertux in some areas


Property changes on: trunk/lib
___________________________________________________________________
Name: svn:ignore
   - 
*.os
.sconsign
custom.py
libflexlay.so
old
semantic.cache

   + 
custom.py
libflexlay.a
libflexlay.so
old
*.os
.sconsign
semantic.cache


Modified: trunk/ruby/ruby_sexpr_parser.cxx
===================================================================
--- trunk/ruby/ruby_sexpr_parser.cxx	2005-08-12 22:54:46 UTC (rev 589)
+++ trunk/ruby/ruby_sexpr_parser.cxx	2005-08-13 03:27:42 UTC (rev 590)
@@ -41,7 +41,7 @@
     }
   else if (lisp_symbol_p(cur))
     {
-      return rb_str_new2(lisp_symbol(cur));
+      return ID2SYM(rb_intern(lisp_symbol(cur)));
     }
   else if (lisp_integer_p(cur))
     {

Modified: trunk/ruby/sexpr.rb
===================================================================
--- trunk/ruby/sexpr.rb	2005-08-12 22:54:46 UTC (rev 589)
+++ trunk/ruby/sexpr.rb	2005-08-13 03:27:42 UTC (rev 590)
@@ -51,7 +51,7 @@
     elsif tree == []
       return default
     else
-      el = assoc_ref(tree, spec[0])
+      el = assoc_ref(tree, spec[0].to_sym)
       if el
         return get_value_from_tree(spec[1..-1], el, default)
       else

Modified: trunk/supertux/data.rb
===================================================================
--- trunk/supertux/data.rb	2005-08-12 22:54:46 UTC (rev 589)
+++ trunk/supertux/data.rb	2005-08-13 03:27:42 UTC (rev 590)
@@ -1,82 +1,82 @@
 $game_objects = [
-  ["jumpy", "images/creatures/jumpy/left-middle.png", "sprite",
+  ["jumpy", "images/creatures/jumpy/left-middle.png", :sprite,
     proc{|data, sexpr| BadGuy.new("jumpy")}],
-  ["snowball", "images/creatures/snowball/left-0.png", "sprite",
+  ["snowball", "images/creatures/snowball/left-0.png", :sprite,
     proc{|data, sexpr| BadGuy.new("snowball")}],
-  ["mriceblock", "images/creatures/mr_iceblock/left-0.png", "sprite",
+  ["mriceblock", "images/creatures/mr_iceblock/left-0.png", :sprite,
     proc{|data, sexpr| BadGuy.new("mriceblock")}],
-  ["mrbomb", "images/creatures/mr_bomb/left-0.png", "sprite",
+  ["mrbomb", "images/creatures/mr_bomb/left-0.png", :sprite,
     proc{|data, sexpr| BadGuy.new("mrbomb")}],
-  ["flame", "images/creatures/flame/flame-0.png", "sprite",
+  ["flame", "images/creatures/flame/flame-0.png", :sprite,
     proc{|data, sexpr| BadGuy.new("flame")}], 
-  ["stalactite", "images/creatures/stalactite/falling.png", "sprite",
+  ["stalactite", "images/creatures/stalactite/falling.png", :sprite,
     proc{|data, sexpr| BadGuy.new("stalactite")}],
-  ["fish", "images/creatures/fish/left-0.png", "sprite",
+  ["fish", "images/creatures/fish/left-0.png", :sprite,
     proc{|data, sexpr| BadGuy.new("fish")}],
-  ["flyingsnowball", "images/creatures/flying_snowball/left-0.png", "sprite",
+  ["flyingsnowball", "images/creatures/flying_snowball/left-0.png", :sprite,
     proc{|data, sexpr| BadGuy.new("flyingsnowball")}],
-  ["bouncingsnowball", "images/creatures/bouncing_snowball/left-0.png", "sprite",
+  ["bouncingsnowball", "images/creatures/bouncing_snowball/left-0.png", :sprite,
     proc{|data, sexpr| BadGuy.new("bouncingsnowball")}],
-  ["spiky", "images/creatures/spiky/left-0.png", "sprite",
+  ["spiky", "images/creatures/spiky/left-0.png", :sprite,
     proc{|data, sexpr| BadGuy.new("spiky")}],
-  ["mrtree", "images/creatures/mr_tree/walk-left-0.png", "sprite",
+  ["mrtree", "images/creatures/mr_tree/walk-left-0.png", :sprite,
     proc{|data, sexpr| BadGuy.new("mrtree")}],
-  ["poisonivy", "images/creatures/poison_ivy/left-0.png", "sprite",
+  ["poisonivy", "images/creatures/poison_ivy/left-0.png", :sprite,
     proc{|data, sexpr| BadGuy.new("poisonivy")}],
-  ["zeekling", "images/creatures/zeekling/left-0.png", "sprite",
+  ["zeekling", "images/creatures/zeekling/left-0.png", :sprite,
     proc{|data, sexpr| BadGuy.new("zeekling")}],
-  ["kugelblitz", "images/creatures/kugelblitz/flying-0.png", "sprite",
+  ["kugelblitz", "images/creatures/kugelblitz/flying-0.png", :sprite,
     proc{|data, sexpr| BadGuy.new("kugelblitz")}],
-  ["dispenser", "images/creatures/dispenser/working.png", "sprite",
+  ["dispenser", "images/creatures/dispenser/working.png", :sprite,
     proc{|data, sexpr| Dispenser.new(data, sexpr)}],
-  ["yeti", "images/creatures/yeti/yeti.png", "sprite",
+  ["yeti", "images/creatures/yeti/yeti.png", :sprite,
     proc{|data, sexpr| BadGuy.new("yeti")}],
-  ["stalactite_yeti", "images/engine/editor/stalactite_yeti.png", "sprite",
+  ["stalactite_yeti", "images/engine/editor/stalactite_yeti.png", :sprite,
     proc{|data, sexpr| BadGuy.new("yeti_stalactite")}],
-  ["spawnpoint", "images/engine/editor/spawnpoint.png", "sprite",
+  ["spawnpoint", "images/engine/editor/spawnpoint.png", :sprite,
     proc{|data, sexpr| SpawnPoint.new(data, sexpr)}],
-  ["ambient_sound", "images/engine/editor/ambientsound.png", "rect",
+  ["ambient_sound", "images/engine/editor/ambientsound.png", :rect,
     proc{|data, sexpr| AmbientSound.new(data, sexpr)}],
-  ["door", "images/objects/door/door-0.png", "sprite",
+  ["door", "images/objects/door/door-0.png", :sprite,
     proc{|data, sexpr| Door.new("door", data, sexpr)}],
-  ["hatch", "images/objects/hatch/hatch-0.png", "sprite",
+  ["hatch", "images/objects/hatch/hatch-0.png", :sprite,
     proc{|data, sexpr| Door.new("hatch", data, sexpr)}],
-  ["trampoline", "images/objects/trampoline/trampoline1-0.png", "sprite",
+  ["trampoline", "images/objects/trampoline/trampoline1-0.png", :sprite,
     proc{|data, sexpr| BadGuy.new("trampoline")}],
-  ["bell", "images/objects/bell/bell-m.png", "sprite",
+  ["bell", "images/objects/bell/bell-m.png", :sprite,
     proc{|data, sexpr| SimpleObject.new("bell")}],
-  ["rock", "images/tiles/blocks/block11.png", "sprite",
+  ["rock", "images/tiles/blocks/block11.png", :sprite,
     proc{|data, sexpr| SimpleObject.new("rock")}],
-  ["unstable_tile", "images/objects/unstable_tile/unstable_tile.png", "sprite",
+  ["unstable_tile", "images/objects/unstable_tile/unstable_tile.png", :sprite,
     proc{|data, sexpr| SimpleTileObject.new(data, "unstable_tile")}],
-  ["infoblock", "images/engine/editor/infoblock.png", "sprite",
+  ["infoblock", "images/engine/editor/infoblock.png", :sprite,
     proc{|data, sexpr| InfoBlock.new(data, sexpr)}],
-  ["powerup", "images/engine/editor/powerup.png", "sprite",
+  ["powerup", "images/engine/editor/powerup.png", :sprite,
     proc{|data, sexpr| Powerup.new(data, sexpr)}],
-  ["secretarea", "images/engine/editor/secretarea.png", "rect",
+  ["secretarea", "images/engine/editor/secretarea.png", :rect,
     proc{|data, sexpr| SecretArea.new(data, sexpr)}],
-  ["sequencetrigger", "images/engine/editor/sequencetrigger.png", "rect",
+  ["sequencetrigger", "images/engine/editor/sequencetrigger.png", :rect,
     proc{|data, sexpr| SequenceTrigger.new(data, sexpr)}],
-  ["background", "images/engine/editor/background.png", "sprite",
+  ["background", "images/engine/editor/background.png", :sprite,
     proc{|data, sexpr| Background.new(data, sexpr)}],
-  ["particles-snow", "images/engine/editor/snow.png", "sprite",
+  ["particles-snow", "images/engine/editor/snow.png", :sprite,
     proc{|data, sexpr| ParticleSystem.new("snow", sexpr)}],
-  ["particles-clouds", "images/engine/editor/clouds.png", "sprite",
+  ["particles-clouds", "images/engine/editor/clouds.png", :sprite,
     proc{|data, sexpr| ParticleSystem.new("clouds", sexpr)}],
-  ["particles-rain", "images/engine/editor/rain.png", "sprite",
+  ["particles-rain", "images/engine/editor/rain.png", :sprite,
     proc{|data, sexpr| ParticleSystem.new("rain", sexpr)}],
-  ["leveltime", "images/engine/editor/clock.png", "sprite",
+  ["leveltime", "images/engine/editor/clock.png", :sprite,
     proc{|data, sexpr| LevelTime.new(sexpr)}],
-  ["point", "images/engine/editor/point.png", "sprite",
+  ["point", "images/engine/editor/point.png", :sprite,
     proc{|data, sexpr| SimpleObject.new("point")}],
-  ["platform", "images/objects/flying_platform/flying_platform-0.png", "sprite",
+  ["platform", "images/objects/flying_platform/flying_platform-0.png", :sprite,
     proc{|data, sexpr| Platform.new(data, sexpr)}],
 ]
 
 def create_gameobject_from_data(objmap, name, sexpr)
   # Creates a gameobject from the given sexpr: "snowball", ((x 5) (y 5))
   
-  object = $game_objects.find {|x| x[0] == name}
+  object = $game_objects.find {|x| x[0].to_sym == name}
   if object != nil then
     (name, image, type, func) = object
     
@@ -94,12 +94,12 @@
   # Creates a gameobject the given position, data is the entry in the $game_objects table
   case data[2] 
     
-  when "sprite" 
+  when :sprite
     obj = ObjMapSpriteObject.new(make_sprite($datadir + data[1]), pos, make_metadata(nil))
     gobj = data[3].call(obj, sexpr)
     obj.to_object.set_metadata(make_metadata(gobj))
     
-  when "rect"
+  when :rect
 	print "NewRect", pos.x, " -", pos.y, "\n"
     obj = ObjMapRectObject.new(CL_Rect.new(CL_Point.new(pos.x.to_i, pos.y.to_i), CL_Size.new(64, 64)),
                                CL_Color.new(0, 0, 255, 128), make_metadata(nil))
@@ -107,7 +107,7 @@
     obj.to_object.set_metadata(make_metadata(gobj))
 
   else
-    raise "Error: Unknown object type dropped: '#{data}'"
+    raise "Error: Unknown object type dropped: '#{data.inspect}'"
   end
   
   cmd = ObjectAddCommand.new(objmap)

Modified: trunk/supertux/sector.rb
===================================================================
--- trunk/supertux/sector.rb	2005-08-12 22:54:46 UTC (rev 589)
+++ trunk/supertux/sector.rb	2005-08-13 03:27:42 UTC (rev 590)
@@ -103,7 +103,7 @@
     background = get_value_from_tree(["background", "_"], data, "")
     if(background != "")
       sexpr = [["image", background], ["speed", 0.5]]
-      create_gameobject_from_data(@objects, "background", sexpr)
+      create_gameobject_from_data(@objects, :background, sexpr)
     else
       sexpr = [["top_color",
         get_value_from_tree(["bkgd_red_top", "_"], data, 0),
@@ -114,19 +114,19 @@
         get_value_from_tree(["bkgd_green_bottom", "_"], data, 0),
         get_value_from_tree(["bkgd_blue_bottom", "_"], data, 0)],
               ["speed", 0.5]]
-      create_gameobject_from_data(@objects, "background", sexpr)
+      create_gameobject_from_data(@objects, :background, sexpr)
     end
 
     partsys = get_value_from_tree(["particle_system", "_"], data, "")
     if(partsys == "snow")
       sexpr = []
-      create_gameobject_from_data(@objects, "particles-snow", sexpr)
+      create_gameobject_from_data(@objects, :'particles-snow', sexpr)
     elsif(partsys == "rain")
       sexpr = []
-      create_gameobject_from_data(@objects, "particles-rain", sexpr)
+      create_gameobject_from_data(@objects, :'particles-rain', sexpr)
     elsif(partsys == "clouds")
       sexpr = []
-      create_gameobject_from_data(@objects, "particles-clouds", sexpr)
+      create_gameobject_from_data(@objects, :'particles-clouds', sexpr)
     elsif(partsys == "")
     else
       print "Unknown particle system type '", partsys, "'\n"

Modified: trunk/supertux/tileset.rb
===================================================================
--- trunk/supertux/tileset.rb	2005-08-12 22:54:46 UTC (rev 589)
+++ trunk/supertux/tileset.rb	2005-08-13 03:27:42 UTC (rev 590)
@@ -32,7 +32,7 @@
     
     tree.each do |i|
       case i[0]
-      when "tile"
+      when :tile
         data   = i[1..-1]
         id     = get_value_from_tree(['id', '_'], data, -1)
         image  = get_value_from_tree(['editor-images', '_'], data, false)
@@ -47,7 +47,7 @@
         if image.is_a?(String) then
           pixelbuffer = make_pixelbuffer($datadir + 'images/' + image)
         elsif image.is_a?(Array) then
-          if image[0] == "region" then
+          if image[0] == :region then
             pixelbuffer = make_region_pixelbuffer($datadir + 'images/' + image[1],
                                                   image[2], image[3], image[4], image[5])
           end
@@ -61,7 +61,7 @@
           end
         end
 
-      when "tilegroup"
+      when :tilegroup
         data  = i[1..-1]
         name  = get_value_from_tree(['name', '_'], data, "Unnamed")
         tiles = get_value_from_tree(['tiles'], data, [])

Modified: trunk/windstille/controller.rb
===================================================================
--- trunk/windstille/controller.rb	2005-08-12 22:54:46 UTC (rev 589)
+++ trunk/windstille/controller.rb	2005-08-13 03:27:42 UTC (rev 590)
@@ -30,7 +30,7 @@
   end  
 
   def load_level(filename)
-    $startlevel = Level.new(filename)
+    $startlevel = Sector.new(filename)
     $startlevel.activate($workspace)
   end
 

Modified: trunk/windstille/gameobjects.rb
===================================================================
--- trunk/windstille/gameobjects.rb	2005-08-12 22:54:46 UTC (rev 589)
+++ trunk/windstille/gameobjects.rb	2005-08-13 03:27:42 UTC (rev 590)
@@ -26,4 +26,36 @@
     proc{|data, sexpr| nil}],
 ]
 
+def write_sexpr(f, sexpr)
+  if sexpr.is_a?(Array) then
+    f.print "("
+    sexpr.each_with_index{|e, i|
+      write_sexpr(f, e)
+      if i != sexpr.length() - 1 then
+        f.print " "
+      end
+    }
+    f.print ")"
+  else
+    if sexpr.is_a?(Symbol)
+      f.print sexpr.to_s
+    else
+      f.print sexpr.inspect
+    end
+  end
+end
+
+class UnknownGameObject
+  def initialize(name, sexpr, obj)
+    @name  = name
+    @sexpr = sexpr
+    @obj   = obj
+  end
+
+  def save(f)
+    write_sexpr(f, [@name, *@sexpr])
+    f.puts
+  end
+end
+
 ## EOF ##

Modified: trunk/windstille/gui.rb
===================================================================
--- trunk/windstille/gui.rb	2005-08-12 22:54:46 UTC (rev 589)
+++ trunk/windstille/gui.rb	2005-08-13 03:27:42 UTC (rev 590)
@@ -55,12 +55,6 @@
     @toolbar = ButtonPanel.new_from_spec(0, 23+33, 33, 32*4+2, false, $toolbar_spec, @gui.get_component)
     @menu    = CL_Menu.new_from_spec($menu_spec, @gui.get_component)
 
-    @load_dialog = SimpleFileDialog.new("Load SuperTux Level", "Load", "Cancel", @gui.get_component())
-    @load_dialog.set_filename($datadir + "levels/")
-
-    @save_dialog = SimpleFileDialog.new("Save SuperTux Level as...", "Save", "Cancel", @gui.get_component())
-    @save_dialog.set_filename($datadir + "levels/")
-
     # FIXME: Having position in the Menus here is EXTREMLY ugly
     @tilegroup_menu = Menu.new(CL_Point.new(35*15+2, 54), @gui.get_component())
     @tilegroup_menu.add_item($mysprite, "All Tiles", proc{@tileselector.set_tiles($tileset.get_tiles())})
@@ -95,9 +89,9 @@
                                                 make_metadata(object)))
     end
 
-    @load_dialog = SimpleFileDialog.new("Load SuperTux Level", "Load", "Cancel", @gui.get_component())
+    @load_dialog = SimpleFileDialog.new("Load Sector", "Load", "Cancel", @gui.get_component())
     @load_dialog.set_filename($datadir + "levels/")
-    @save_dialog = SimpleFileDialog.new("Save SuperTux Level as...", "Save", "Cancel", @gui.get_component())
+    @save_dialog = SimpleFileDialog.new("Save Sector as...", "Save", "Cancel", @gui.get_component())
     @save_dialog.set_filename($datadir + "levels/")
     
     register_keybindings($keybinding_spec)
@@ -195,7 +189,7 @@
 
   def new_level()
     level = @workspace.get_map().get_metadata()
-    dialog = GenericDialog.new("Create New Level", @gui.get_component())
+    dialog = GenericDialog.new("Create New Sector", @gui.get_component())
     dialog.add_int("Width: ", level.width)
     dialog.add_int("Height: ", level.height)
     dialog.add_int("X: ", 0)

Deleted: trunk/windstille/level.rb
===================================================================
--- trunk/windstille/level.rb	2005-08-12 22:54:46 UTC (rev 589)
+++ trunk/windstille/level.rb	2005-08-13 03:27:42 UTC (rev 590)
@@ -1,190 +0,0 @@
-##  $Id$
-## 
-##  Flexlay - A Generic 2D Game Editor
-##  Copyright (C) 2004 Ingo Ruhnke <grumbel at gmx.de>
-##
-##  This program is free software; you can redistribute it and/or
-##  modify it under the terms of the GNU General Public License
-##  as published by the Free Software Foundation; either version 2
-##  of the License, or (at your option) any later version.
-##
-##  This program is distributed in the hope that it will be useful,
-##  but WITHOUT ANY WARRANTY; without even the implied warranty of
-##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-##  GNU General Public License for more details.
-## 
-##  You should have received a copy of the GNU General Public License
-##  along with this program; if not, write to the Free Software
-##  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
-
-class Tilemap
-  attr_accessor :name, :x_offset, :y_offset, :z_pos
-  
-  def initialize()
-    name     = "empty"
-    x_offset = 0
-    y_offset = 0
-    z_pos = 0;
-  end
-end
-
-class Level
-  ## Level Properties
-  attr_reader :layers, :editormap
-  attr_reader :background, :interactive, :foreground, :objects
-
-  attr_accessor :name
-
-  def initialize(*params)
-    if params.length() == 2 then
-      initialize_new(*params)
-    else 
-      initialize_from_file(*params)
-    end
-  end
-
-  def initialize_new(width, height)
-    # New Level
-    @current_layer = 1
-    
-    @background  = TilemapLayer.new($tileset, width, height)
-    @interactive = TilemapLayer.new($tileset, width, height)
-    @foreground  = TilemapLayer.new($tileset, width, height)
-    
-    @layers = []
-    @layers += [@background]
-    @layers += [@interactive]
-    @layers += [@foreground]
-    @layers += [@objects = ObjectLayer.new()]
-
-    @editormap = EditorMap.new()
-    @layers.each {|layer| @editormap.add_layer(layer.to_layer()) }
-    
-    # FIXME: Data might not get freed since its 'recursively' refcounted
-    @editormap.set_data(self)
-  end
-
-  def initialize_from_file(filename)
-    tree = sexpr_read_from_file(filename)
-    if tree == nil
-      raise("Couldn't load level: %s" % filename)
-    end
-    
-    data = tree[1..-1]
-    
-    @version = get_value_from_tree(["version", "_"], data, 0)
-    @name    = get_value_from_tree(["name", "_"],    data, 0)
-    @music   = get_value_from_tree(["music", "_"],   data, 0)
-
-    objects = get_value_from_tree(["objects"],  data, [])
-    
-    @layers = []
-    @objects = ObjectLayer.new()
-
-    objects.each{ |object|
-      objtype = object[0]
-      objdata = object[1..-1]
-
-      case objtype
-      when "tilemap"
-        name   = get_value_from_tree(["name",  "_"],   objdata, "")
-        width  = get_value_from_tree(["width",  "_"],  objdata, 0)
-        height = get_value_from_tree(["height", "_"],  objdata, 0)
-        
-        tilemap = TilemapLayer.new($tileset, width, height)
-        tilemap.set_data(get_value_from_tree(["data"], objdata, []))
-        # tilemap.z_pos = get_value_from_tree(["z-pos", "_"],  mydata, 0)
-        
-        case name 
-        when "background"
-          @background = tilemap
-        when "interactive"
-          @interactive = tilemap
-        when "background"
-          @background = tilemap
-        else
-          puts "Unknown Tilemap: #{name}"
-        end
-      when "scriptable-object"
-        
-      else
-        puts "Unknown object: '#{objtype}'"
-        pos = get_value_from_tree(["pos"], objdata, [0,0])
-        obj = ObjMapSpriteObject.new(make_sprite($datadir + "images/streetlamp.png"), 
-                                     CL_Pointf.new(pos[0], pos[1]), make_metadata(nil))
-        # gobj = data[3].call(obj, sexpr) 
-        obj.to_object.set_metadata(make_metadata(nil))
-      
-        @objects.add_object(obj.to_object)
-      end
-    }
-    
-    @layers += [@background, @interactive, @foreground, @objects]
-
-    @editormap = EditorMap.new()
-    @layers.each {|layer| 
-      if layer then 
-        @editormap.add_layer(layer.to_layer()) 
-      end 
-    }
-    
-    # FIXME: Data might not get freed since its 'recursively' refcounted
-    @editormap.set_data(self)
-
-    @current_layer = 1
-
-    puts @editormap
-    puts @layers
-  end
-
-  def activate(workspace)
-    $gui.workspace.set_map(@editormap)
-
-    TilemapLayer.set_current(@layers[@current_layer])
-    ObjectLayer.set_current(@objects)
-
-    connect(@editormap.sig_change(), proc{$gui.on_map_change()})
-  end
-
-  def save(filename)
-    print "Save Level to '", filename, "'\n"
-
-    ## Insert your load code here
-    f = File.new(filename, "w")
-    f.write(";; Generated by Flexlay Editor\n")
-    f.write("(windstille-sector\n")
-    f.write("  (version 2)\n")
-    f.write("  (name   \"%s\")\n" % @name)
-    f.write("  (music  \"%s\")\n" % @music)
-
-    f.write("  (objects\n")
-    save_tilemap = proc {|name, tilemap|
-      if tilemap then
-        width  = tilemap.get_width()
-        height = tilemap.get_height()
-        f.write("  (tilemap (name \"%s\") (width %d) (height %d) (z-pos 0)\n" % \
-                [name, width, height]) # FIXME: add escaping to strings
-        f.write("    (data")
-        tilemap.get_data().each_with_index {|item, i|
-          if (i % width == 0) then
-            f.write("\n      ")
-          end
-          f.write("%d " % item)
-        }
-        f.write("\n     ))\n")
-      end
-    }
-
-    save_tilemap.call("background",  @background)
-    save_tilemap.call("interactive", @interactive)
-    save_tilemap.call("foreground",  @foreground)
-
-    f.write("   )\n")
-
-    f.write(" )\n\n")
-    f.write(";; EOF ;;\n")
-    f.close()
-  end
-end
-
-# EOF #

Copied: trunk/windstille/sector.rb (from rev 589, trunk/windstille/level.rb)
===================================================================
--- trunk/windstille/level.rb	2005-08-12 22:54:46 UTC (rev 589)
+++ trunk/windstille/sector.rb	2005-08-13 03:27:42 UTC (rev 590)
@@ -0,0 +1,192 @@
+##  $Id$
+## 
+##  Flexlay - A Generic 2D Game Editor
+##  Copyright (C) 2004 Ingo Ruhnke <grumbel at gmx.de>
+##
+##  This program is free software; you can redistribute it and/or
+##  modify it under the terms of the GNU General Public License
+##  as published by the Free Software Foundation; either version 2
+##  of the License, or (at your option) any later version.
+##
+##  This program is distributed in the hope that it will be useful,
+##  but WITHOUT ANY WARRANTY; without even the implied warranty of
+##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+##  GNU General Public License for more details.
+## 
+##  You should have received a copy of the GNU General Public License
+##  along with this program; if not, write to the Free Software
+##  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+
+class Tilemap
+  attr_accessor :name, :x_offset, :y_offset, :z_pos
+  
+  def initialize()
+    name     = "empty"
+    x_offset = 0
+    y_offset = 0
+    z_pos = 0;
+  end
+end
+
+class Sector
+  ## Sector Properties
+  attr_reader :layers, :editormap
+  attr_reader :background, :interactive, :foreground, :objects
+
+  attr_accessor :name
+
+  def initialize(*params)
+    if params.length() == 2 then
+      initialize_new(*params)
+    else 
+      initialize_from_file(*params)
+    end
+  end
+
+  def initialize_new(width, height)
+    # New Sector
+    @current_layer = 1
+    
+    @background  = TilemapLayer.new($tileset, width, height)
+    @interactive = TilemapLayer.new($tileset, width, height)
+    @foreground  = TilemapLayer.new($tileset, width, height)
+    
+    @layers = []
+    @layers += [@background]
+    @layers += [@interactive]
+    @layers += [@foreground]
+    @layers += [@objects = ObjectLayer.new()]
+
+    @editormap = EditorMap.new()
+    @layers.each {|layer| @editormap.add_layer(layer.to_layer()) }
+    
+    # FIXME: Data might not get freed since its 'recursively' refcounted
+    @editormap.set_data(self)
+  end
+
+  def initialize_from_file(filename)
+    tree = sexpr_read_from_file(filename)
+    if tree == nil
+      raise("Couldn't load level: %s" % filename)
+    end
+    
+    data = tree[1..-1]
+    
+    @version = get_value_from_tree(["version", "_"], data, 0)
+    @name    = get_value_from_tree(["name", "_"],    data, 0)
+    @music   = get_value_from_tree(["music", "_"],   data, 0)
+
+    objects = get_value_from_tree(["objects"],  data, [])
+    
+    @layers = []
+    @objects = ObjectLayer.new()
+
+    objects.each{ |object|
+      objtype = object[0]
+      objdata = object[1..-1]
+
+      case objtype
+      when :tilemap
+        name   = get_value_from_tree(["name",  "_"],   objdata, "")
+        width  = get_value_from_tree(["width",  "_"],  objdata, 0)
+        height = get_value_from_tree(["height", "_"],  objdata, 0)
+        
+        tilemap = TilemapLayer.new($tileset, width, height)
+        tilemap.set_data(get_value_from_tree(["data"], objdata, []))
+        # tilemap.z_pos = get_value_from_tree(["z-pos", "_"],  mydata, 0)
+        
+        case name 
+        when "background"
+          @background = tilemap
+        when "interactive"
+          @interactive = tilemap
+        when "background"
+          @background = tilemap
+        else
+          puts "Unknown Tilemap: #{name}"
+        end
+      else
+        puts "Unknown object: '#{objtype}'"
+        pos = get_value_from_tree(["pos"], objdata, [0,0])
+        obj = ObjMapSpriteObject.new(make_sprite($datadir + "images/unknown.png"), 
+                                     CL_Pointf.new(pos[0], pos[1]), make_metadata(nil))
+        obj.to_object.set_metadata(make_metadata(UnknownGameObject.new(objtype, objdata, obj)))
+      
+        @objects.add_object(obj.to_object)
+      end
+    }
+    
+    @layers += [@background, @interactive, @foreground, @objects]
+
+    @editormap = EditorMap.new()
+    @layers.each {|layer| 
+      if layer then 
+        @editormap.add_layer(layer.to_layer()) 
+      end 
+    }
+    
+    # FIXME: Data might not get freed since its 'recursively' refcounted
+    @editormap.set_data(self)
+
+    @current_layer = 1
+
+    puts @editormap
+    puts @layers
+  end
+
+  def activate(workspace)
+    $gui.workspace.set_map(@editormap)
+
+    TilemapLayer.set_current(@layers[@current_layer])
+    ObjectLayer.set_current(@objects)
+
+    connect(@editormap.sig_change(), proc{$gui.on_map_change()})
+  end
+
+  def save(filename)
+    print "Save Sector to '", filename, "'\n"
+
+    ## Insert your load code here
+    f = File.new(filename, "w")
+    f.write(";; Generated by Flexlay Editor\n")
+    f.write("(windstille-sector\n")
+    f.write("  (version 2)\n")
+    f.write("  (ambient-color .666 .666 .666)")
+    f.write("  (name   \"%s\")\n" % @name)
+    f.write("  (music  \"%s\")\n" % @music)
+
+    f.write("  (objects\n")
+    save_tilemap = proc {|name, tilemap|
+      if tilemap then
+        width  = tilemap.get_width()
+        height = tilemap.get_height()
+        f.write("  (tilemap (name \"%s\") (width %d) (height %d) (z-pos 0)\n" % \
+                [name, width, height]) # FIXME: add escaping to strings
+        f.write("    (data")
+        tilemap.get_data().each_with_index {|item, i|
+          if (i % width == 0) then
+            f.write("\n      ")
+          end
+          f.write("%d " % item)
+        }
+        f.write("\n     ))\n")
+      end
+    }
+
+    save_tilemap.call("background",  @background)
+    save_tilemap.call("interactive", @interactive)
+    save_tilemap.call("foreground",  @foreground)
+
+    for obj in @objects.get_objects()
+      obj.get_data().save(f)
+    end
+
+    f.write("   )\n")
+
+    f.write(" )\n\n")
+    f.write(";; EOF ;;\n")
+    f.close()
+  end
+end
+
+# EOF #

Modified: trunk/windstille/tileset.rb
===================================================================
--- trunk/windstille/tileset.rb	2005-08-12 22:54:46 UTC (rev 589)
+++ trunk/windstille/tileset.rb	2005-08-13 03:27:42 UTC (rev 590)
@@ -32,6 +32,7 @@
   def load(filename)
     puts "Loading Tileset: #{filename}"
     tree = sexpr_read_from_file(filename)
+
     if tree == nil then
       puts "Error; Couldn't load: ", filename
       return 
@@ -42,7 +43,7 @@
     
     tree.each do |i|
       case i[0]
-      when "tile"
+      when :tile
         data   = i[1..-1]
         id     = get_value_from_tree(['id', '_'], data, -1)
         image  = get_value_from_tree(['editor-images', '_'], data, false)
@@ -71,7 +72,7 @@
           end
         end
 
-      when "tilegroup"
+      when :tilegroup
         data  = i[1..-1]
         name  = get_value_from_tree(['name', '_'], data, "Unnamed")
         tiles = get_value_from_tree(['tiles'], data, [])
@@ -81,7 +82,7 @@
         end
         @tilegroups.push(TileGroup.new(name, tiles))
         
-      when "tiles"
+      when :tiles
         data   = i[1..-1]
         colmap  = get_value_from_tree(['colmap'], data, [])
         ids     = get_value_from_tree(['ids'], data, [])

Modified: trunk/windstille/windstille.rb
===================================================================
--- trunk/windstille/windstille.rb	2005-08-12 22:54:46 UTC (rev 589)
+++ trunk/windstille/windstille.rb	2005-08-13 03:27:42 UTC (rev 590)
@@ -38,7 +38,7 @@
 require "controller.rb"
 require "sexpr.rb"
 require "gui.rb"
-require "level.rb"
+require "sector.rb"
 require "tileset.rb"
 
 ## Init Flexlay itself
@@ -62,7 +62,7 @@
 
 $gui.workspace.set_tool($controller.tilemap_paint_tool.to_tool());
 
-$startlevel = Level.new(100, 30)
+$startlevel = Sector.new(100, 30)
 $startlevel.activate($workspace)
 
 $gui.run()



From grumbel at berlios.de  Sat Aug 13 19:04:33 2005
From: grumbel at berlios.de (Ingo Ruhnke at BerliOS)
Date: Sat, 13 Aug 2005 19:04:33 +0200
Subject: [Flexlay-commit] r591 - in trunk: lib netpanzer ruby supertux windstille
Message-ID: <200508131704.j7DH4X8N031679@sheep.berlios.de>

Author: grumbel
Date: 2005-08-13 19:04:23 +0200 (Sat, 13 Aug 2005)
New Revision: 591

Added:
   trunk/windstille/layout_manager.rb
Modified:
   trunk/lib/clanlib.i
   trunk/lib/editor_map_component.cxx
   trunk/lib/editor_map_component.hxx
   trunk/lib/flexlay.cxx
   trunk/lib/flexlay.hxx
   trunk/lib/flexlay_wrap.i
   trunk/lib/sketch_layer.cxx
   trunk/lib/workspace.cxx
   trunk/lib/workspace.hxx
   trunk/lib/workspace_move_tool.cxx
   trunk/lib/workspace_move_tool.hxx
   trunk/netpanzer/gui.rb
   trunk/ruby/sexpr.rb
   trunk/supertux/gui.rb
   trunk/windstille/gameobjects.rb
   trunk/windstille/gui.rb
   trunk/windstille/gui_specs.rb
   trunk/windstille/sector.rb
   trunk/windstille/windstille.rb
Log:
- moved GraphicContextState out of Workspace

Modified: trunk/lib/clanlib.i
===================================================================
--- trunk/lib/clanlib.i	2005-08-13 03:27:42 UTC (rev 590)
+++ trunk/lib/clanlib.i	2005-08-13 17:04:23 UTC (rev 591)
@@ -283,5 +283,6 @@
 		CL_OutputSourceProvider *output_provider = 0);
 };
 
+
 /* EOF */
 

Modified: trunk/lib/editor_map_component.cxx
===================================================================
--- trunk/lib/editor_map_component.cxx	2005-08-13 03:27:42 UTC (rev 590)
+++ trunk/lib/editor_map_component.cxx	2005-08-13 17:04:23 UTC (rev 591)
@@ -37,6 +37,7 @@
 {
 public:
   EditorMapComponent* parent;
+  GraphicContextState gc_state;
   Scrollbar* scrollbar_h;
   Scrollbar* scrollbar_v;
   CL_SlotContainer slots;
@@ -55,7 +56,8 @@
     impl(new EditorMapComponentImpl())
 {
   impl->parent = this;
-  impl->workspace = Workspace(rect.get_width(), rect.get_height());
+  impl->gc_state  = GraphicContextState(rect.get_width(), rect.get_height());
+  impl->workspace = Workspace();
 
   current_ = this;
 
@@ -128,76 +130,81 @@
 void
 EditorMapComponentImpl::draw ()
 {
+  CL_Display::push_cliprect(parent->get_screen_rect());
+
   CL_Display::push_translate(parent->get_screen_x(), parent->get_screen_y());
 
   // Update scrollbars (FIXME: move me to function)
   scrollbar_v->set_range(0, workspace.get_map().get_bounding_rect().get_height());
-  scrollbar_v->set_pagesize(parent->get_height()/workspace.get_gc_state().get_zoom());
-  scrollbar_v->set_pos(workspace.get_gc_state().get_pos().y);
+  scrollbar_v->set_pagesize(parent->get_height()/gc_state.get_zoom());
+  scrollbar_v->set_pos(gc_state.get_pos().y);
 
   scrollbar_h->set_range(0, workspace.get_map().get_bounding_rect().get_width());
-  scrollbar_h->set_pagesize(parent->get_width()/workspace.get_gc_state().get_zoom());
-  scrollbar_h->set_pos(workspace.get_gc_state().get_pos().x);
+  scrollbar_h->set_pagesize(parent->get_width()/gc_state.get_zoom());
+  scrollbar_h->set_pos(gc_state.get_pos().x);
 
+  gc_state.push();
   workspace.draw();
+  gc_state.pop();
 
   CL_Display::pop_modelview();
+  CL_Display::pop_cliprect();
 }
 
 CL_Pointf
 EditorMapComponent::screen2world(const CL_Point& pos)
 {
-  return impl->workspace.get_gc_state().screen2world(pos);
+  return impl->gc_state.screen2world(pos);
 }
 
 void
 EditorMapComponent::set_zoom(float z)
 {
-  impl->workspace.get_gc_state().set_zoom(z);
+  impl->gc_state.set_zoom(z);
 }
 
 void
 EditorMapComponent::zoom_out(CL_Point pos)
 {
-  impl->workspace.get_gc_state().set_zoom(CL_Pointf(pos.x, pos.y),
-                                          impl->workspace.get_gc_state().get_zoom()/1.25f);
+  impl->gc_state.set_zoom(CL_Pointf(pos.x, pos.y),
+                          impl->gc_state.get_zoom()/1.25f);
 }
 
 void
 EditorMapComponent::zoom_in(CL_Point pos)
 {
-  impl->workspace.get_gc_state().set_zoom(CL_Pointf(pos.x, pos.y), 
-                                          impl->workspace.get_gc_state().get_zoom()*1.25f);
+  impl->gc_state.set_zoom(CL_Pointf(pos.x, pos.y), 
+                                          impl->gc_state.get_zoom()*1.25f);
 }
 
 void
 EditorMapComponent::zoom_to(CL_Rectf rect)
 {
-  impl->workspace.get_gc_state().zoom_to(rect);
+  impl->gc_state.zoom_to(rect);
 }
 
 CL_Rectf
 EditorMapComponent::get_clip_rect()
 {
-  return impl->workspace.get_gc_state().get_clip_rect();
+  return impl->gc_state.get_clip_rect();
 }
 
 void
 EditorMapComponent::move_to(int x, int y)
 {
-  impl->workspace.get_gc_state().set_pos(CL_Pointf(x, y));
+  impl->gc_state.set_pos(CL_Pointf(x, y));
 }
 
 void
 EditorMapComponent::move_to_x(float x)
 {
-  impl->workspace.get_gc_state().set_pos(CL_Pointf(x, impl->workspace.get_gc_state().get_pos().y));
+  impl->gc_state.set_pos(CL_Pointf(x, impl->gc_state.get_pos().y));
 }
 
 void
 EditorMapComponent::move_to_y(float y)
 {
-  impl->workspace.get_gc_state().set_pos(CL_Pointf(impl->workspace.get_gc_state().get_pos().x, y));
+  impl->gc_state.set_pos(CL_Pointf(impl->gc_state.get_pos().x, y));
 }
 
 CL_Signal_v2<int, int>&
@@ -218,4 +225,10 @@
     }
 }
 
+GraphicContextState&
+EditorMapComponent::get_gc_state()
+{
+  return impl->gc_state;
+}
+
 /* EOF */

Modified: trunk/lib/editor_map_component.hxx
===================================================================
--- trunk/lib/editor_map_component.hxx	2005-08-13 03:27:42 UTC (rev 590)
+++ trunk/lib/editor_map_component.hxx	2005-08-13 17:04:23 UTC (rev 591)
@@ -63,6 +63,8 @@
 
   CL_Rectf get_clip_rect();
 
+  GraphicContextState& get_gc_state();
+
 private:
   SharedPtr<EditorMapComponentImpl> impl;
 };

Modified: trunk/lib/flexlay.cxx
===================================================================
--- trunk/lib/flexlay.cxx	2005-08-13 03:27:42 UTC (rev 590)
+++ trunk/lib/flexlay.cxx	2005-08-13 17:04:23 UTC (rev 591)
@@ -41,11 +41,12 @@
 }
 
 void
-Flexlay::init(int width, int height, bool fullscreen_)
+Flexlay::init(int width, int height, bool fullscreen_, bool allow_resize_)
 {
   screen_width  = width;
   screen_height = height;
   fullscreen    = fullscreen_; 
+  allow_resize  = allow_resize_;
 
   std::cout << "Flexlay::init()" << std::endl;
   try {

Modified: trunk/lib/flexlay.hxx
===================================================================
--- trunk/lib/flexlay.hxx	2005-08-13 03:27:42 UTC (rev 590)
+++ trunk/lib/flexlay.hxx	2005-08-13 17:04:23 UTC (rev 591)
@@ -95,7 +95,7 @@
 
   Flexlay();
 
-  void init(int width = 800, int height = 600, bool fullscreen = false);
+  void init(int width = 800, int height = 600, bool fullscreen = false, bool allow_resize = false);
   void deinit();
 };
 

Modified: trunk/lib/flexlay_wrap.i
===================================================================
--- trunk/lib/flexlay_wrap.i	2005-08-13 03:27:42 UTC (rev 590)
+++ trunk/lib/flexlay_wrap.i	2005-08-13 17:04:23 UTC (rev 591)
@@ -205,5 +205,4 @@
 %include "../ruby/ruby_sexpr_parser.hxx"
 #endif
 
-
 /* EOF */

Modified: trunk/lib/sketch_layer.cxx
===================================================================
--- trunk/lib/sketch_layer.cxx	2005-08-13 03:27:42 UTC (rev 590)
+++ trunk/lib/sketch_layer.cxx	2005-08-13 17:04:23 UTC (rev 591)
@@ -75,9 +75,9 @@
     if (canvas)
       {
         EditorMapComponent* parent = EditorMapComponent::current();
-        parent->get_workspace().get_gc_state().push(canvas->get_gc());
+        parent->get_gc_state().push(canvas->get_gc());
         stroke.draw(canvas->get_gc());
-        parent->get_workspace().get_gc_state().pop(canvas->get_gc());
+        parent->get_gc_state().pop(canvas->get_gc());
         canvas->sync_surface();
       }
   }
@@ -91,16 +91,16 @@
     if (canvas)
       {
         // Draw to canvas
-        if (last_zoom != parent->get_workspace().get_gc_state().get_zoom() ||
-            last_pos  != parent->get_workspace().get_gc_state().get_pos()  ||
-            last_rot  != parent->get_workspace().get_gc_state().get_rotation())
+        if (last_zoom != parent->get_gc_state().get_zoom() ||
+            last_pos  != parent->get_gc_state().get_pos()  ||
+            last_rot  != parent->get_gc_state().get_rotation())
           {
             // Rerender the image
-            last_zoom   = parent->get_workspace().get_gc_state().get_zoom();
-            last_pos    = parent->get_workspace().get_gc_state().get_pos();
-            last_rot    = parent->get_workspace().get_gc_state().get_rotation();
+            last_zoom   = parent->get_gc_state().get_zoom();
+            last_pos    = parent->get_gc_state().get_pos();
+            last_rot    = parent->get_gc_state().get_rotation();
 
-            parent->get_workspace().get_gc_state().push(canvas->get_gc());
+            parent->get_gc_state().push(canvas->get_gc());
             canvas->get_gc()->clear(CL_Color(0, 0, 0, 0));
             //canvas->get_gc()->clear(CL_Color::white);
 
@@ -116,7 +116,7 @@
                     i->draw(canvas->get_gc());
                   }
               }
-            parent->get_workspace().get_gc_state().pop(canvas->get_gc());
+            parent->get_gc_state().pop(canvas->get_gc());
 
             canvas->sync_surface();
           }

Modified: trunk/lib/workspace.cxx
===================================================================
--- trunk/lib/workspace.cxx	2005-08-13 03:27:42 UTC (rev 590)
+++ trunk/lib/workspace.cxx	2005-08-13 17:04:23 UTC (rev 591)
@@ -34,7 +34,6 @@
 class WorkspaceImpl
 {
 public:
-  GraphicContextState gc_state;
   EditorMap editor_map;
 
   Tool tool;
@@ -42,23 +41,16 @@
 };
 
 Workspace::Workspace()
-{
-}
-
-Workspace::Workspace(int w, int h)
   : impl(new WorkspaceImpl())
 {
   current_ = *this;
   
-  impl->move_tool = WorkspaceMoveTool(*this).to_tool();
-  impl->gc_state  = GraphicContextState(w, h);
+  impl->move_tool = WorkspaceMoveTool().to_tool();
 }
 
 void
 Workspace::draw()
 {
-  impl->gc_state.push();
-
   CL_Display::clear(CL_Color(100, 0, 100));
 
   impl->editor_map.draw_gui(CL_Display::get_current_window()->get_gc());
@@ -68,8 +60,6 @@
     impl->tool.draw();
     
   CL_Display::flush();
-
-  impl->gc_state.pop();
 }
 
 void
@@ -131,12 +121,6 @@
   impl->editor_map = m;
 }
 
-GraphicContextState&
-Workspace::get_gc_state()
-{
-  return impl->gc_state;
-}
-
 void
 Workspace::set_tool(const Tool& tool)
 {

Modified: trunk/lib/workspace.hxx
===================================================================
--- trunk/lib/workspace.hxx	2005-08-13 03:27:42 UTC (rev 590)
+++ trunk/lib/workspace.hxx	2005-08-13 17:04:23 UTC (rev 591)
@@ -38,7 +38,6 @@
   static Workspace current() { return current_; }
 
   Workspace();
-  Workspace(int w, int h);
 
   void draw();
 
@@ -49,8 +48,6 @@
   EditorMap get_map();
   void set_map(const EditorMap& m);
 
-  GraphicContextState& get_gc_state();
-
   void set_tool(const Tool& tool);
 
   bool is_null() const { return !impl.get(); }

Modified: trunk/lib/workspace_move_tool.cxx
===================================================================
--- trunk/lib/workspace_move_tool.cxx	2005-08-13 03:27:42 UTC (rev 590)
+++ trunk/lib/workspace_move_tool.cxx	2005-08-13 17:04:23 UTC (rev 591)
@@ -27,8 +27,6 @@
 class WorkspaceMoveToolImpl : public ToolImpl
 {
 public:
-  Workspace workspace;
-
   bool scrolling;
   CL_Point click_pos;
 
@@ -47,7 +45,7 @@
 WorkspaceMoveToolImpl::on_mouse_down(const CL_InputEvent& event)
 {
   scrolling = true;
-  old_trans_offset = workspace.get_gc_state().get_pos();
+  old_trans_offset = EditorMapComponent::current()->get_gc_state().get_pos();
   click_pos = event.mouse_pos;
   EditorMapComponent::current()->capture_mouse();
 }
@@ -57,7 +55,7 @@
 {
   scrolling = false;
   update(event);
-  old_trans_offset = workspace.get_gc_state().get_pos();
+  old_trans_offset = EditorMapComponent::current()->get_gc_state().get_pos();
   EditorMapComponent::current()->release_mouse();
 }
 
@@ -73,7 +71,7 @@
 void
 WorkspaceMoveToolImpl::update(const CL_InputEvent& event)
 {
-  GraphicContextState& gc_state = workspace.get_gc_state();
+  GraphicContextState& gc_state = EditorMapComponent::current()->get_gc_state();
 
   float sa = sin(-gc_state.get_rotation()/180.0f*M_PI);
   float ca = cos(-gc_state.get_rotation()/180.0f*M_PI);
@@ -82,15 +80,14 @@
   float dy = sa * (click_pos.x - event.mouse_pos.x) + ca * (click_pos.y - event.mouse_pos.y);
 
   gc_state.set_pos(CL_Pointf(old_trans_offset.x
-                             + dx / workspace.get_gc_state().get_zoom(),
+                             + dx / EditorMapComponent::current()->get_gc_state().get_zoom(),
                              old_trans_offset.y
-                             + dy / workspace.get_gc_state().get_zoom()));
+                             + dy / EditorMapComponent::current()->get_gc_state().get_zoom()));
 }
 
-WorkspaceMoveTool::WorkspaceMoveTool(const Workspace& workspace_)
+WorkspaceMoveTool::WorkspaceMoveTool()
   : impl(new WorkspaceMoveToolImpl())
 {
-  impl->workspace = workspace_;
   impl->scrolling = false;
   impl->click_pos = CL_Point(0, 0);
   impl->old_trans_offset = CL_Pointf(0,0);

Modified: trunk/lib/workspace_move_tool.hxx
===================================================================
--- trunk/lib/workspace_move_tool.hxx	2005-08-13 03:27:42 UTC (rev 590)
+++ trunk/lib/workspace_move_tool.hxx	2005-08-13 17:04:23 UTC (rev 591)
@@ -28,7 +28,7 @@
 class WorkspaceMoveTool
 {
 public:
-  WorkspaceMoveTool(const Workspace& workspace_);
+  WorkspaceMoveTool();
 
   Tool to_tool();
 private:

Modified: trunk/netpanzer/gui.rb
===================================================================
--- trunk/netpanzer/gui.rb	2005-08-13 03:27:42 UTC (rev 590)
+++ trunk/netpanzer/gui.rb	2005-08-13 17:04:23 UTC (rev 591)
@@ -25,7 +25,7 @@
 
     myrect = CL_Rect.new(CL_Point.new(0, 56), CL_Size.new($screen.width-134-1, ($screen.height-112)+56))
     @editor_map = EditorMapComponent.new(myrect, @gui.get_component())
-    @workspace  = Workspace.new(myrect.get_width(), myrect.get_height())
+    @workspace  = Workspace.new()
     @editor_map.set_workspace(@workspace)
 
     @option_panel = Panel.new(CL_Rect.new(CL_Point.new($screen.width-134, 56), CL_Size.new(134, $screen.height-112+56)), @gui.get_component())
@@ -276,7 +276,7 @@
   end
 
   def gui_set_zoom(zoom)
-    gc = @editor_map.get_workspace().get_gc_state()
+    gc = @editor_map.get_gc_state()
     pos = gc.get_pos()
     gc.set_zoom(zoom)
     gc.set_pos(pos)

Modified: trunk/ruby/sexpr.rb
===================================================================
--- trunk/ruby/sexpr.rb	2005-08-13 03:27:42 UTC (rev 590)
+++ trunk/ruby/sexpr.rb	2005-08-13 17:04:23 UTC (rev 591)
@@ -60,4 +60,23 @@
     end
 end
 
+def write_sexpr(f, sexpr)
+  if sexpr.is_a?(Array) then
+    f.print "("
+    sexpr.each_with_index{|e, i|
+      write_sexpr(f, e)
+      if i != sexpr.length() - 1 then
+        f.print " "
+      end
+    }
+    f.print ")"
+  else
+    if sexpr.is_a?(Symbol)
+      f.print sexpr.to_s
+    else
+      f.print sexpr.inspect
+    end
+  end
+end
+
 # EOF #

Modified: trunk/supertux/gui.rb
===================================================================
--- trunk/supertux/gui.rb	2005-08-13 03:27:42 UTC (rev 590)
+++ trunk/supertux/gui.rb	2005-08-13 17:04:23 UTC (rev 591)
@@ -31,7 +31,7 @@
                         minimap_rect.get_height() - 3))
 
     @editor_map = EditorMapComponent.new(map_rect, @gui.get_component())
-    @workspace  = Workspace.new(map_rect.get_width(), map_rect.get_height())
+    @workspace  = Workspace.new()
     @editor_map.set_workspace(@workspace)
     @workspace.set_tool($tilemap_paint_tool.to_tool());
     @minimap = Minimap.new(@editor_map, minimap_rect, @gui.get_component())
@@ -513,7 +513,7 @@
   end
 
   def gui_set_zoom(zoom)
-    gc = @editor_map.get_workspace().get_gc_state()
+    gc = @editor_map.get_gc_state()
     pos = gc.get_pos()
     gc.set_zoom(zoom)
     gc.set_pos(pos)

Modified: trunk/windstille/gameobjects.rb
===================================================================
--- trunk/windstille/gameobjects.rb	2005-08-13 03:27:42 UTC (rev 590)
+++ trunk/windstille/gameobjects.rb	2005-08-13 17:04:23 UTC (rev 591)
@@ -26,25 +26,6 @@
     proc{|data, sexpr| nil}],
 ]
 
-def write_sexpr(f, sexpr)
-  if sexpr.is_a?(Array) then
-    f.print "("
-    sexpr.each_with_index{|e, i|
-      write_sexpr(f, e)
-      if i != sexpr.length() - 1 then
-        f.print " "
-      end
-    }
-    f.print ")"
-  else
-    if sexpr.is_a?(Symbol)
-      f.print sexpr.to_s
-    else
-      f.print sexpr.inspect
-    end
-  end
-end
-
 class UnknownGameObject
   def initialize(name, sexpr, obj)
     @name  = name

Modified: trunk/windstille/gui.rb
===================================================================
--- trunk/windstille/gui.rb	2005-08-13 03:27:42 UTC (rev 590)
+++ trunk/windstille/gui.rb	2005-08-13 17:04:23 UTC (rev 591)
@@ -181,7 +181,7 @@
   end
   
   def set_zoom(zoom)
-    gc = @editor_map.get_workspace().get_gc_state()
+    gc = @editor_map.get_gc_state()
     pos = gc.get_pos()
     gc.set_zoom(zoom)
     gc.set_pos(pos)

Modified: trunk/windstille/gui_specs.rb
===================================================================
--- trunk/windstille/gui_specs.rb	2005-08-13 03:27:42 UTC (rev 590)
+++ trunk/windstille/gui_specs.rb	2005-08-13 17:04:23 UTC (rev 591)
@@ -21,9 +21,6 @@
 ##  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 ##  02111-1307, USA.
 
-$screen_width  = 1024
-$screen_height = 768
-
 $menu_spec = [
   ["File",
     ["Open...",    proc{ $gui.level_load() }],

Added: trunk/windstille/layout_manager.rb
===================================================================
--- trunk/windstille/layout_manager.rb	2005-08-13 03:27:42 UTC (rev 590)
+++ trunk/windstille/layout_manager.rb	2005-08-13 17:04:23 UTC (rev 591)
@@ -0,0 +1,60 @@
+##  $Id$
+##   ______ __               ___
+##  |   ___|  |.-----.--.--.|   | .---.-.--.--.
+##  |   ___|  ||  -__|_   _||   |_|  _  |  |  |
+##  |__|   |__||_____|__.__||_____|___._|___  |
+##                                      |_____|
+##  Copyright (C) 2004 Ingo Ruhnke <grumbel at gmx.de>
+##
+##  This program is free software; you can redistribute it and/or
+##  modify it under the terms of the GNU General Public License
+##  as published by the Free Software Foundation; either version 2
+##  of the License, or (at your option) any later version.
+##
+##  This program is distributed in the hope that it will be useful,
+##  but WITHOUT ANY WARRANTY; without even the implied warranty of
+##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+##  GNU General Public License for more details.
+## 
+##  You should have received a copy of the GNU General Public License
+##  along with this program; if not, write to the Free Software
+##  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+##  02111-1307, USA.
+
+$layout_spec = [
+  [:vbox,
+    [:components,
+      [:menubar,     
+        [:name,   "menubar"], 
+        [:height, 32],
+        [:spec,   $menu_spec]],
+      [:buttonpanel, 
+        [:name,   "buttonpanel"],
+        [:height, 32], 
+        [:spec,   $buttonpanel_spec]],
+      [:hbox, 
+        [:components
+          [:component, "editormap"],
+          [:component, "selectorpanel"]]
+      ],
+    ]
+  ]
+]
+
+# Class to handle automatic layouting of GUI components and resize
+# events.
+class LayoutManager
+  def initialize(spec)
+    @spec    
+  end
+
+  def set_size(width, height)
+    
+  end
+
+  def add(name, component)
+
+  end
+end
+
+## EOF ##

Modified: trunk/windstille/sector.rb
===================================================================
--- trunk/windstille/sector.rb	2005-08-13 03:27:42 UTC (rev 590)
+++ trunk/windstille/sector.rb	2005-08-13 17:04:23 UTC (rev 591)
@@ -178,7 +178,9 @@
     save_tilemap.call("foreground",  @foreground)
 
     for obj in @objects.get_objects()
-      obj.get_data().save(f)
+      if obj.get_data() then
+        obj.get_data().save(f)
+      end
     end
 
     f.write("   )\n")

Modified: trunk/windstille/windstille.rb
===================================================================
--- trunk/windstille/windstille.rb	2005-08-13 03:27:42 UTC (rev 590)
+++ trunk/windstille/windstille.rb	2005-08-13 17:04:23 UTC (rev 591)
@@ -41,9 +41,12 @@
 require "sector.rb"
 require "tileset.rb"
 
+$screen_width  = 640
+$screen_height = 480
+
 ## Init Flexlay itself
 flexlay = Flexlay.new()
-flexlay.init(1024, 768)
+flexlay.init($screen_width, $screen_height, false, true)
 
 ## Initialize Tools
 



From grumbel at berlios.de  Sat Aug 13 19:09:10 2005
From: grumbel at berlios.de (Ingo Ruhnke at BerliOS)
Date: Sat, 13 Aug 2005 19:09:10 +0200
Subject: [Flexlay-commit] r592 - trunk/windstille
Message-ID: <200508131709.j7DH9A2r001823@sheep.berlios.de>

Author: grumbel
Date: 2005-08-13 19:08:45 +0200 (Sat, 13 Aug 2005)
New Revision: 592

Modified:
   trunk/windstille/gui.rb
Log:
- moved GraphicContextState out of Workspace

Modified: trunk/windstille/gui.rb
===================================================================
--- trunk/windstille/gui.rb	2005-08-13 17:04:23 UTC (rev 591)
+++ trunk/windstille/gui.rb	2005-08-13 17:08:45 UTC (rev 592)
@@ -39,7 +39,7 @@
     myrect      = CL_Rect.new(CL_Point.new(0, 56), CL_Size.new($screen_width - 800 +  665,
                                                                $screen_height - 600 + 488+56))
     @editor_map = EditorMapComponent.new(myrect, @gui.get_component())
-    @workspace  = Workspace.new(myrect.get_width(), myrect.get_height())
+    @workspace  = Workspace.new()
     @editor_map.set_workspace(@workspace)
 
     @button_panel = ButtonPanel.new_from_spec(0, 23, $screen_width, 33, true, $buttonpanel_spec, @gui.get_component)



From grumbel at berlios.de  Sun Aug 14 23:31:42 2005
From: grumbel at berlios.de (Ingo Ruhnke at BerliOS)
Date: Sun, 14 Aug 2005 23:31:42 +0200
Subject: [Flexlay-commit] r593 - in trunk: lib ruby windstille
Message-ID: <200508142131.j7ELVgq6017601@sheep.berlios.de>

Author: grumbel
Date: 2005-08-14 23:31:40 +0200 (Sun, 14 Aug 2005)
New Revision: 593

Modified:
   trunk/lib/config.h
   trunk/lib/minimap.cxx
   trunk/ruby/flexlay.rb
   trunk/ruby/sexpr.rb
   trunk/windstille/gui.rb
   trunk/windstille/gui_specs.rb
   trunk/windstille/layout_manager.rb
Log:
- added some gui creation from sexpr code
- added some automatic layouting code
- all this is still rather experimental and not yet full working

Modified: trunk/lib/config.h
===================================================================
--- trunk/lib/config.h	2005-08-13 17:08:45 UTC (rev 592)
+++ trunk/lib/config.h	2005-08-14 21:31:40 UTC (rev 593)
@@ -50,10 +50,10 @@
 #define PACKAGE_TARNAME "flexlay"
 
 /* Define to the version of this package. */
-#define PACKAGE_VERSION "0.0.3"
+#define PACKAGE_VERSION "0.2.0"
 
 /* Define to 1 if you have the ANSI C header files. */
 #define STDC_HEADERS 1
 
 /* Version number of package */
-#define VERSION "0.0.3"
+#define VERSION "0.2.0"

Modified: trunk/lib/minimap.cxx
===================================================================
--- trunk/lib/minimap.cxx	2005-08-13 17:08:45 UTC (rev 592)
+++ trunk/lib/minimap.cxx	2005-08-14 21:31:40 UTC (rev 593)
@@ -54,7 +54,7 @@
   impl->slots.push_back(sig_mouse_down().connect(this, &Minimap::mouse_down));
   impl->slots.push_back(sig_mouse_up().connect(this, &Minimap::mouse_up));
 
-  impl->parent = p;
+  impl->parent = p ? p : EditorMapComponent::current();
   impl->drag_active = false;
   impl->last_serial = -1;
 }

Modified: trunk/ruby/flexlay.rb
===================================================================
--- trunk/ruby/flexlay.rb	2005-08-13 17:08:45 UTC (rev 592)
+++ trunk/ruby/flexlay.rb	2005-08-14 21:31:40 UTC (rev 593)
@@ -98,6 +98,14 @@
     end
   end
 
+  def set_position(x, y)
+    @panel.set_position(x, y)
+  end
+
+  def set_size(w, h)
+    @panel.set_size(w, h)
+  end
+
   def ButtonPanel.new_from_spec(x, y, width, height, horizontal, spec, parent)
     buttonpanel = ButtonPanel.new(x, y, width, height, horizontal, parent)
 

Modified: trunk/ruby/sexpr.rb
===================================================================
--- trunk/ruby/sexpr.rb	2005-08-13 17:08:45 UTC (rev 592)
+++ trunk/ruby/sexpr.rb	2005-08-14 21:31:40 UTC (rev 593)
@@ -17,6 +17,8 @@
 ##  along with this program; if not, write to the Free Software
 ##  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
+require "stringio"
+
 def assoc_ref(lst, str)
   if lst == []
     return false
@@ -60,7 +62,7 @@
     end
 end
 
-def write_sexpr(f, sexpr)
+def write_sexpr(f, sexpr, indent = 0)
   if sexpr.is_a?(Array) then
     f.print "("
     sexpr.each_with_index{|e, i|
@@ -79,4 +81,72 @@
   end
 end
 
+class SExpression
+  def initialize(sexpr = [])
+    @sexpr = sexpr
+  end
+
+  def SExpression.new_from_file(filename)
+    return SExpression.new(sexpr_read_from_file(filename))
+  end
+
+  def car()
+    return SExpression.new(@sexpr[0])
+  end
+
+  def cdr()
+    return SExpression.new((@sexpr[1..-1] or []))
+  end
+
+  def [](i)
+    return SExpression.new(@sexpr[i])
+  end
+
+  # Interprets the SExpression as a AList in the form of ((name value) ...)
+  def get(name, default)
+    v = @sexpr.find() { |el| el[0] == name }
+    if v then
+      return SExpression.new(v[1..-1])
+    else
+      return SExpression.new(default)
+    end
+  end
+
+  def value()
+    return @sexpr
+  end
+
+  def get_value(spec, default = nil)
+    return get_value_from_tree(spec, @sexpr, default)
+  end
+
+  def each_pair()
+    @sexpr.each() { |el|
+      yield(el[0], SExpression.new(el[1..-1]))
+    }
+  end
+
+  def is_atom?()
+    return @sexpr.is_a?(Array)
+  end
+
+  def is_nil?()
+    return @sexpr == []
+  end
+
+  def to_s()
+    str = StringIO.new()
+    write(str)
+    return str.string()
+  end
+
+  def to_a()
+    return @sexpr
+  end
+
+  def write(f = $stdout, indent = 0)
+    write_sexpr(f, @sexpr)
+  end
+end
+
 # EOF #

Modified: trunk/windstille/gui.rb
===================================================================
--- trunk/windstille/gui.rb	2005-08-13 17:08:45 UTC (rev 592)
+++ trunk/windstille/gui.rb	2005-08-14 21:31:40 UTC (rev 593)
@@ -22,6 +22,7 @@
 ##  02111-1307, USA.
 
 require "gameobjects.rb"
+require "layout_manager.rb"
 require "gui_specs.rb"
 
 ## GUI class which holds all the GUI components and the state of them
@@ -36,13 +37,16 @@
   def initialize()
     @gui = GUIManager.new()
 
-    myrect      = CL_Rect.new(CL_Point.new(0, 56), CL_Size.new($screen_width - 800 +  665,
-                                                               $screen_height - 600 + 488+56))
-    @editor_map = EditorMapComponent.new(myrect, @gui.get_component())
+    components = LayoutComponent.create_from_sexpr(CL_Rect.new(0,0, $screen_width, $screen_height),
+                                                   SExpression.new($guilayout_spec),
+                                                   @gui.get_component())
+
+
+    @editor_map = components.get('editormap').component
     @workspace  = Workspace.new()
     @editor_map.set_workspace(@workspace)
 
-    @button_panel = ButtonPanel.new_from_spec(0, 23, $screen_width, 33, true, $buttonpanel_spec, @gui.get_component)
+    @button_panel = components.get('buttonpanel').component
 
     @button_panel.items["undo"].disable()
     @button_panel.items["redo"].disable()
@@ -53,7 +57,7 @@
     @layer_menu.add_item($mysprite, "Show only current", proc{ show_only_current() })
     
     @toolbar = ButtonPanel.new_from_spec(0, 23+33, 33, 32*4+2, false, $toolbar_spec, @gui.get_component)
-    @menu    = CL_Menu.new_from_spec($menu_spec, @gui.get_component)
+    @menu    = components.get('menubar').component
 
     # FIXME: Having position in the Menus here is EXTREMLY ugly
     @tilegroup_menu = Menu.new(CL_Point.new(35*15+2, 54), @gui.get_component())
@@ -62,24 +66,23 @@
       @tilegroup_menu.add_item($mysprite, tilegroup.name, proc{@tileselector.set_tiles(tilegroup.tiles)})
     }
 
-    @selector_window = Panel.new(CL_Rect.new(CL_Point.new($screen_width-128-64-6, 23+33), 
-                                             CL_Size.new(128 + 64 + 6, $screen_height - 600 + 558)),
-                                 @gui.get_component())
+    # @selector_window = Panel.new(CL_Rect.new(CL_Point.new($screen_width-128-64-6, 23+33), 
+    #                                         CL_Size.new(128 + 64 + 6, $screen_height - 600 + 558)),
+    #                             @gui.get_component())
 
-    @minimap = Minimap.new(@editor_map, CL_Rect.new(CL_Point.new(3,  $screen_height - 600 + 552 - 144 - 12), 
-                                                    CL_Size.new(192, 144)),
-                           @selector_window)
+    # @tileselector = TileSelector.new(CL_Rect.new(CL_Point.new(3, 3), 
+    #                                             CL_Size.new(128+64, $screen_height - 600 + 552 - 144 - 3)),
+    #                                 @selector_window)
 
-    @tileselector = TileSelector.new(CL_Rect.new(CL_Point.new(3, 3), 
-                                                 CL_Size.new(128+64, $screen_height - 600 + 552 - 144 - 3)),
-                                     @selector_window)
+    @tileselector = components.get('tileselector').component
     @tileselector.set_tileset($tileset)
     @tileselector.set_scale(0.75)
     @tileselector.set_tiles($tileset.tilegroups[0].tiles)
     # @tileselector.set_tiles($tileset.get_tiles())
     @tileselector.show(true)
     
-    @objectselector = ObjectSelector.new(CL_Rect.new(0, 0, 128, $screen_height - 600 + 552 - 144 - 3), 42, 42, @selector_window)
+    @objectselector = components.get('objectselector').component
+    # @objectselector = ObjectSelector.new(CL_Rect.new(0, 0, 128, $screen_height - 600 + 552 - 144 - 3), 42, 42, @selector_window)
     @objectselector.show(false)
 
     connect_v2_ObjectBrush_Point(@objectselector.sig_drop(), proc{|brush, pos| on_object_drop(brush, pos) })

Modified: trunk/windstille/gui_specs.rb
===================================================================
--- trunk/windstille/gui_specs.rb	2005-08-13 17:08:45 UTC (rev 592)
+++ trunk/windstille/gui_specs.rb	2005-08-14 21:31:40 UTC (rev 593)
@@ -82,5 +82,36 @@
   ["1",  proc{ |x, y| $gui.show_layer(:background)}],
 ]
 
+$guilayout_spec = [
+  :vbox, 
+  [:homogenus, false],
+  [:components,
+    
+    [:menubar,     
+      [:name,   'menubar'], 
+      [:size, 32],
+      [:spec,   $menu_spec]],
+
+    [:buttonpanel, 
+      [:name,   'buttonpanel'],
+      [:size, 32], 
+      [:spec,   $buttonpanel_spec]],
+
+    [:hbox, 
+      [:components,
+
+        [:editormap, 
+          [:name, 'editormap']],
+
+        [:vbox,
+          [:size, 192],
+          [:components,
+            [:tileselector,
+              [:name, 'tileselector']],
+            [:objectselector,
+              [:name, 'objectselector']],
+            [:minimap, 
+              [:name, 'minimap']]]]
+      ]]]]
+
 ## EOF ##
-

Modified: trunk/windstille/layout_manager.rb
===================================================================
--- trunk/windstille/layout_manager.rb	2005-08-13 17:08:45 UTC (rev 592)
+++ trunk/windstille/layout_manager.rb	2005-08-14 21:31:40 UTC (rev 593)
@@ -21,40 +21,203 @@
 ##  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 ##  02111-1307, USA.
 
-$layout_spec = [
-  [:vbox,
-    [:components,
-      [:menubar,     
-        [:name,   "menubar"], 
-        [:height, 32],
-        [:spec,   $menu_spec]],
-      [:buttonpanel, 
-        [:name,   "buttonpanel"],
-        [:height, 32], 
-        [:spec,   $buttonpanel_spec]],
-      [:hbox, 
-        [:components
-          [:component, "editormap"],
-          [:component, "selectorpanel"]]
-      ],
-    ]
-  ]
-]
 
-# Class to handle automatic layouting of GUI components and resize
-# events.
-class LayoutManager
-  def initialize(spec)
-    @spec    
+# Helper class that holds all necesarry paramter to handle layouting,
+# could also extend Component instead
+class LayoutComponent
+  attr_reader :component, :name, :size,:expand, :fill, :padding
+
+  # use nil for width and height if it should be determined
+  # automatically
+  def initialize(component, params)
+    @component = component
+
+    @name      = params[:name]
+    @size      = params[:size]
+    @expand    = params[:expand]
+    @fill      = params[:fill]
+    @padding   = params[:padding]
+
+    puts "LayoutComponent.new: name=#{@name} type=#{@component}"
   end
 
+  def get(name)
+    return nil
+  end
+  
+  def set_pos(x, y)
+    @component.set_position(x, y)
+  end
+  
   def set_size(width, height)
-    
+    @component.set_size(width, height)
   end
 
-  def add(name, component)
+  # Rearanges the layout to fit the current size
+  def layout()
+  end
 
+  def LayoutComponent.create_from_sexpr(rect, sexpr, parent)
+    case sexpr.car()
+    when :vbox
+    when :hbox
+    when :panel
+      
+    else
+      create(sexpr.car().value(), rect, sexpr.cdr(), parent)
+    end
   end
+  
+  def LayoutComponent.create(type, rect, sexpr, parent)
+    puts "Creating: '#{type}'"
+
+    case type
+    when :vbox
+      box = LayoutBox.new(type, rect, sexpr, parent)
+      return box
+
+    when :hbox
+      box = LayoutBox.new(type, rect, sexpr, parent)
+      return box
+      
+    else
+      return LayoutComponent.new(create_raw(type, rect, sexpr, parent), 
+                                 :name    => sexpr.get_value([:name,    '_'], nil),
+                                 :size    => sexpr.get_value([:size,    '_'], nil),
+                                 :expand  => sexpr.get_value([:expand,  '_'], true),
+                                 :fill    => sexpr.get_value([:fill,    '_'],    true),
+                                 :padding => sexpr.get_value([:padding, '_'], 0))
+    end
+  end
+
+  def LayoutComponent.create_raw(type, rect, sexpr, parent)
+    case type
+    when :panel     
+
+    when :editormap
+      puts sexpr.get(:name, nil)
+      return EditorMapComponent.new(rect, parent)      
+      
+    when :menubar
+      return CL_Menu.new_from_spec(sexpr.get_value(['spec', '_'], []),
+                                   parent)
+
+    when :button
+      return CL_Button.new(rect,
+                           sexpr.get_value(['label', '_'], []),
+                           parent)
+
+    when :label
+      return CL_Label.new(CL_Point.new(rect.top, rect.left),
+                          sexpr.get_value(['label', '_'], []),
+                          parent)
+
+    when :listbox
+      return CL_ListBox.new(rect, parent)
+      
+    when :inputbox
+      return CL_InputBox.new(rect, parent)
+
+    when :radiobutton
+      return CL_RadioButton.new(CL_Point.new(rect.left, rect.top),
+                                sexpr.get_value(['label', '_'], []),
+                                parent)
+
+    when :radiogroup
+      return CL_RadioGroup.new()
+
+    when :checkbox
+      return CL_CheckBox.new(CL_Point.new(rect.left, rect.top),
+                             sexpr.get_value(['label', '_'], []),
+                             parent)
+
+    when :buttonpanel
+      return ButtonPanel.new_from_spec(rect.left, rect.top, rect.get_width(), rect.get_height(), true,
+                                       sexpr.get_value([:spec, '_'], []), parent)
+
+    when :tileselector
+      return TileSelector.new(rect, parent)
+      
+    when :objectselector
+      return ObjectSelector.new(rect, 
+                                sexpr.get_value([:objectwidth, '_'], 42), 
+                                sexpr.get_value([:objectheight, '_'], 42),
+                                parent)
+
+    when :minimap
+      @minimap = Minimap.new(nil, rect, parent)
+      
+    else
+      raise "Unknonwn Component type '#{type.inspect}'"
+
+    end
+  end
 end
 
+class LayoutBox < LayoutComponent
+  def initialize(type, rect, sexpr, parent)
+    @type       = type # :vbox or :hbox
+    @x          = rect.left
+    @y          = rect.top
+    @width      = rect.get_width()
+    @height     = rect.get_height()
+    @parent     = parent
+    @components = []
+    @homogenus  = false
+
+    puts "Box: #{sexpr}"
+    sexpr.get(:components, SExpression.new()).each_pair() { |name, value|
+      @components.push(LayoutComponent.create(name, CL_Rect.new(0, 0, 256, 256), value, @parent))
+    }
+
+    layout()
+  end
+
+  def get(name)
+    @components.each() { |i|
+      if i.name == name then
+        return i
+      elsif i.is_a?(LayoutBox) then
+        a = i.get(name)
+        if a then return a end
+      end
+    }
+    return nil
+  end
+
+  def add(type, spec)
+    @components.push([type, spec, nil])
+  end
+  
+  def set_pos(x, y)
+    @x = x
+    @y = y
+    layout()
+  end
+
+  def set_size(width, height)
+    @width  = width
+    @height = height
+    layout()
+  end
+
+  def layout()
+    if @type == :vbox
+      len = @height / @components.length()
+      @components.each_with_index() { |component, i|
+        component.set_pos(@x, @y + len * i)
+        component.set_size(@width, len)
+      }
+    elsif @type == :hbox
+      len = @width / @components.length()
+      @components.each_with_index() { |component, i|
+        component.set_pos(@x + len * i, @y)
+        component.set_size(len, @height)
+      }
+    else
+      raise "LayoutBox: Unknown type #{type}"
+    end
+  end
+end
+
 ## EOF ##



From grumbel at berlios.de  Sun Aug 14 23:59:54 2005
From: grumbel at berlios.de (Ingo Ruhnke at BerliOS)
Date: Sun, 14 Aug 2005 23:59:54 +0200
Subject: [Flexlay-commit] r594 - trunk/windstille
Message-ID: <200508142159.j7ELxsGA019088@sheep.berlios.de>

Author: grumbel
Date: 2005-08-14 23:59:51 +0200 (Sun, 14 Aug 2005)
New Revision: 594

Modified:
   trunk/windstille/gui_specs.rb
   trunk/windstille/layout_manager.rb
   trunk/windstille/windstille.rb
Log:
- automatic layouting now working, resize, panel-support and some bugs in the editormapcomponent still missing

Modified: trunk/windstille/gui_specs.rb
===================================================================
--- trunk/windstille/gui_specs.rb	2005-08-14 21:31:40 UTC (rev 593)
+++ trunk/windstille/gui_specs.rb	2005-08-14 21:59:51 UTC (rev 594)
@@ -89,12 +89,12 @@
     
     [:menubar,     
       [:name,   'menubar'], 
-      [:size, 32],
+      [:size, 23],
       [:spec,   $menu_spec]],
 
     [:buttonpanel, 
       [:name,   'buttonpanel'],
-      [:size, 32], 
+      [:size, 33], 
       [:spec,   $buttonpanel_spec]],
 
     [:hbox, 
@@ -111,7 +111,10 @@
             [:objectselector,
               [:name, 'objectselector']],
             [:minimap, 
-              [:name, 'minimap']]]]
+              [:name,    'minimap'],
+              [:size,    144],
+              [:padding, 5],
+            ]]]
       ]]]]
 
 ## EOF ##

Modified: trunk/windstille/layout_manager.rb
===================================================================
--- trunk/windstille/layout_manager.rb	2005-08-14 21:31:40 UTC (rev 593)
+++ trunk/windstille/layout_manager.rb	2005-08-14 21:59:51 UTC (rev 594)
@@ -156,6 +156,13 @@
 
 class LayoutBox < LayoutComponent
   def initialize(type, rect, sexpr, parent)
+    super(nil,
+          :name    => sexpr.get_value([:name,    '_'], nil),
+          :size    => sexpr.get_value([:size,    '_'], nil),
+          :expand  => sexpr.get_value([:expand,  '_'], true),
+          :fill    => sexpr.get_value([:fill,    '_'],    true),
+          :padding => sexpr.get_value([:padding, '_'], 0))
+
     @type       = type # :vbox or :hbox
     @x          = rect.left
     @y          = rect.top
@@ -202,17 +209,46 @@
   end
 
   def layout()
-    if @type == :vbox
-      len = @height / @components.length()
-      @components.each_with_index() { |component, i|
-        component.set_pos(@x, @y + len * i)
-        component.set_size(@width, len)
+    x = @x
+    y = @y
+
+    len = 0
+    num = 0
+    @components.each() { |component|
+      if component.size then
+        len += component.size
+      else
+        num += 1
+      end
+    }
+
+    if @type == :vbox     
+      avlen = (@height - len) / num
+      
+      @components.each() { |component|
+        component.set_pos(x + component.padding, y + component.padding)
+
+        if component.size then
+          component.set_size(@width - component.padding*2, component.size - component.padding*2)
+          y += component.size
+        else
+          component.set_size(@width - component.padding*2, avlen - component.padding*2)
+          y += avlen
+        end
       }
     elsif @type == :hbox
-      len = @width / @components.length()
-      @components.each_with_index() { |component, i|
-        component.set_pos(@x + len * i, @y)
-        component.set_size(len, @height)
+      avlen = (@width - len) / num
+      
+      @components.each() { |component|
+        component.set_pos(x + component.padding, y + component.padding)
+
+        if component.size then
+          component.set_size(component.size - component.padding*2, @height - component.padding*2)
+          x += component.size
+        else
+          component.set_size(avlen - component.padding*2, @height - component.padding*2)
+          x += avlen
+        end
       }
     else
       raise "LayoutBox: Unknown type #{type}"

Modified: trunk/windstille/windstille.rb
===================================================================
--- trunk/windstille/windstille.rb	2005-08-14 21:31:40 UTC (rev 593)
+++ trunk/windstille/windstille.rb	2005-08-14 21:59:51 UTC (rev 594)
@@ -41,8 +41,8 @@
 require "sector.rb"
 require "tileset.rb"
 
-$screen_width  = 640
-$screen_height = 480
+$screen_width  = 1024
+$screen_height = 768
 
 ## Init Flexlay itself
 flexlay = Flexlay.new()



From grumbel at berlios.de  Mon Aug 15 00:30:32 2005
From: grumbel at berlios.de (Ingo Ruhnke at BerliOS)
Date: Mon, 15 Aug 2005 00:30:32 +0200
Subject: [Flexlay-commit] r595 - in trunk: lib windstille
Message-ID: <200508142230.j7EMUWXn024602@sheep.berlios.de>

Author: grumbel
Date: 2005-08-15 00:30:18 +0200 (Mon, 15 Aug 2005)
New Revision: 595

Modified:
   trunk/lib/editor_map_component.cxx
   trunk/lib/flexlay.cxx
   trunk/lib/flexlay.hxx
   trunk/lib/flexlay_wrap.i
   trunk/lib/scrollbar.cxx
   trunk/windstille/gui.rb
   trunk/windstille/layout_manager.rb
   trunk/windstille/windstille.rb
Log:
- fixed editormap scrollbars
- added resize handling (doesn't work yet due to clanlib bug)

Modified: trunk/lib/editor_map_component.cxx
===================================================================
--- trunk/lib/editor_map_component.cxx	2005-08-14 21:59:51 UTC (rev 594)
+++ trunk/lib/editor_map_component.cxx	2005-08-14 22:30:18 UTC (rev 595)
@@ -49,6 +49,7 @@
   void mouse_down(const CL_InputEvent& event);
   void mouse_move(const CL_InputEvent& event);
   void on_key_down(const CL_InputEvent& event);
+  void on_resize(int old_w, int old_h);
 };
 
 EditorMapComponent::EditorMapComponent(const CL_Rect& rect, CL_Component* parent)
@@ -79,6 +80,7 @@
   impl->slots.connect(sig_mouse_down(), impl.get(), &EditorMapComponentImpl::mouse_down);
   impl->slots.connect(sig_mouse_move(), impl.get(), &EditorMapComponentImpl::mouse_move);
   impl->slots.connect(sig_key_down(),   impl.get(), &EditorMapComponentImpl::on_key_down);
+  impl->slots.connect(sig_resize(),     impl.get(), &EditorMapComponentImpl::on_resize);
 }
 
 EditorMapComponent::~EditorMapComponent()
@@ -207,6 +209,18 @@
   impl->gc_state.set_pos(CL_Pointf(impl->gc_state.get_pos().x, y));
 }
 
+void
+EditorMapComponentImpl::on_resize(int old_w, int old_h)
+{
+  CL_Rect rect = parent->get_screen_rect();
+
+  scrollbar_v->set_position(rect.get_width() - 14 + rect.left,  2 + rect.top);
+  scrollbar_v->set_size(12, rect.get_height() - 4 - 14);
+  
+  scrollbar_h->set_position(2 + rect.left, rect.get_height() - 14 + rect.top);
+  scrollbar_h->set_size(rect.get_width() - 4 - 14, 12);
+}
+
 CL_Signal_v2<int, int>&
 EditorMapComponent::sig_on_key(const std::string& str)
 {

Modified: trunk/lib/flexlay.cxx
===================================================================
--- trunk/lib/flexlay.cxx	2005-08-14 21:59:51 UTC (rev 594)
+++ trunk/lib/flexlay.cxx	2005-08-14 22:30:18 UTC (rev 595)
@@ -40,6 +40,12 @@
   current_ = this;
 }
 
+CL_Signal_v2<int, int>&
+Flexlay::sig_resize()
+{
+  return window->sig_resize();
+}
+
 void
 Flexlay::init(int width, int height, bool fullscreen_, bool allow_resize_)
 {

Modified: trunk/lib/flexlay.hxx
===================================================================
--- trunk/lib/flexlay.hxx	2005-08-14 21:59:51 UTC (rev 594)
+++ trunk/lib/flexlay.hxx	2005-08-14 22:30:18 UTC (rev 595)
@@ -95,6 +95,8 @@
 
   Flexlay();
 
+  CL_Signal_v2<int, int>& sig_resize();
+
   void init(int width = 800, int height = 600, bool fullscreen = false, bool allow_resize = false);
   void deinit();
 };

Modified: trunk/lib/flexlay_wrap.i
===================================================================
--- trunk/lib/flexlay_wrap.i	2005-08-14 21:59:51 UTC (rev 594)
+++ trunk/lib/flexlay_wrap.i	2005-08-14 22:30:18 UTC (rev 595)
@@ -205,4 +205,5 @@
 %include "../ruby/ruby_sexpr_parser.hxx"
 #endif
 
+
 /* EOF */

Modified: trunk/lib/scrollbar.cxx
===================================================================
--- trunk/lib/scrollbar.cxx	2005-08-14 21:59:51 UTC (rev 594)
+++ trunk/lib/scrollbar.cxx	2005-08-14 22:30:18 UTC (rev 595)
@@ -88,6 +88,7 @@
 void 
 ScrollbarImpl::draw()
 {
+  CL_Display::push_cliprect(parent->get_screen_rect());
   CL_Display::push_translate(parent->get_screen_x(), parent->get_screen_y());
 
   CL_Rect rect = CL_Rect(CL_Point(0, 0), 
@@ -117,6 +118,7 @@
                         CL_Color(155, 155, 155));
 
   CL_Display::pop_modelview();
+  CL_Display::pop_cliprect();
 }
 
 void

Modified: trunk/windstille/gui.rb
===================================================================
--- trunk/windstille/gui.rb	2005-08-14 21:59:51 UTC (rev 594)
+++ trunk/windstille/gui.rb	2005-08-14 22:30:18 UTC (rev 595)
@@ -40,8 +40,11 @@
     components = LayoutComponent.create_from_sexpr(CL_Rect.new(0,0, $screen_width, $screen_height),
                                                    SExpression.new($guilayout_spec),
                                                    @gui.get_component())
+    
+    connect_v2($flexlay.sig_resize(), proc{|w, h|
+                 components.set_size(w, h)
+               })
 
-
     @editor_map = components.get('editormap').component
     @workspace  = Workspace.new()
     @editor_map.set_workspace(@workspace)

Modified: trunk/windstille/layout_manager.rb
===================================================================
--- trunk/windstille/layout_manager.rb	2005-08-14 21:59:51 UTC (rev 594)
+++ trunk/windstille/layout_manager.rb	2005-08-14 22:30:18 UTC (rev 595)
@@ -37,8 +37,6 @@
     @expand    = params[:expand]
     @fill      = params[:fill]
     @padding   = params[:padding]
-
-    puts "LayoutComponent.new: name=#{@name} type=#{@component}"
   end
 
   def get(name)
@@ -69,8 +67,6 @@
   end
   
   def LayoutComponent.create(type, rect, sexpr, parent)
-    puts "Creating: '#{type}'"
-
     case type
     when :vbox
       box = LayoutBox.new(type, rect, sexpr, parent)
@@ -95,7 +91,6 @@
     when :panel     
 
     when :editormap
-      puts sexpr.get(:name, nil)
       return EditorMapComponent.new(rect, parent)      
       
     when :menubar
@@ -172,7 +167,6 @@
     @components = []
     @homogenus  = false
 
-    puts "Box: #{sexpr}"
     sexpr.get(:components, SExpression.new()).each_pair() { |name, value|
       @components.push(LayoutComponent.create(name, CL_Rect.new(0, 0, 256, 256), value, @parent))
     }
@@ -199,7 +193,6 @@
   def set_pos(x, y)
     @x = x
     @y = y
-    layout()
   end
 
   def set_size(width, height)

Modified: trunk/windstille/windstille.rb
===================================================================
--- trunk/windstille/windstille.rb	2005-08-14 21:59:51 UTC (rev 594)
+++ trunk/windstille/windstille.rb	2005-08-14 22:30:18 UTC (rev 595)
@@ -41,12 +41,12 @@
 require "sector.rb"
 require "tileset.rb"
 
-$screen_width  = 1024
-$screen_height = 768
+$screen_width  = 400
+$screen_height = 300
 
 ## Init Flexlay itself
-flexlay = Flexlay.new()
-flexlay.init($screen_width, $screen_height, false, true)
+$flexlay = Flexlay.new()
+$flexlay.init($screen_width, $screen_height, false, true)
 
 ## Initialize Tools
 
@@ -70,6 +70,6 @@
 
 $gui.run()
 
-# flexlay.deinit()
+# $flexlay.deinit()
 
 # EOF #



From grumbel at berlios.de  Mon Aug 15 00:41:33 2005
From: grumbel at berlios.de (Ingo Ruhnke at BerliOS)
Date: Mon, 15 Aug 2005 00:41:33 +0200
Subject: [Flexlay-commit] r596 - in trunk: lib ruby windstille
Message-ID: <200508142241.j7EMfXgn006390@sheep.berlios.de>

Author: grumbel
Date: 2005-08-15 00:41:12 +0200 (Mon, 15 Aug 2005)
New Revision: 596

Modified:
   trunk/lib/flexlay_wrap.i
   trunk/ruby/ruby_meta_data.cxx
   trunk/ruby/ruby_meta_data.hxx
   trunk/windstille/gui.rb
Log:
- fixed resize handling, wasn't a clanlib bug after all

Modified: trunk/lib/flexlay_wrap.i
===================================================================
--- trunk/lib/flexlay_wrap.i	2005-08-14 22:30:18 UTC (rev 595)
+++ trunk/lib/flexlay_wrap.i	2005-08-14 22:41:12 UTC (rev 596)
@@ -205,5 +205,6 @@
 %include "../ruby/ruby_sexpr_parser.hxx"
 #endif
 
+// 1
 
 /* EOF */

Modified: trunk/ruby/ruby_meta_data.cxx
===================================================================
--- trunk/ruby/ruby_meta_data.cxx	2005-08-14 22:30:18 UTC (rev 595)
+++ trunk/ruby/ruby_meta_data.cxx	2005-08-14 22:41:12 UTC (rev 596)
@@ -69,6 +69,11 @@
   new CL_Slot(sig.connect_functor(RubyFunctor(obj)));
 }
 
+void connect_v2_graceful(CL_Signal_v2<int, int>& sig, VALUE obj)
+{
+  new CL_Slot(sig.connect_functor(RubyFunctor(obj)));
+}
+
 void connect_v1_Color(CL_Signal_v1<CL_Color>& sig, VALUE func)
 {
   sig = CL_Signal_v1<CL_Color>();

Modified: trunk/ruby/ruby_meta_data.hxx
===================================================================
--- trunk/ruby/ruby_meta_data.hxx	2005-08-14 22:30:18 UTC (rev 595)
+++ trunk/ruby/ruby_meta_data.hxx	2005-08-14 22:41:12 UTC (rev 596)
@@ -34,6 +34,7 @@
 void connect_v1(CL_Signal_v1<int>& sig, VALUE obj);
 void connect_v1_float(CL_Signal_v1<float>& sig, VALUE obj);
 void connect_v2(CL_Signal_v2<int, int>& sig, VALUE obj);
+void connect_v2_graceful(CL_Signal_v2<int, int>& sig, VALUE obj);
 
 void connect_v1_Color(CL_Signal_v1<CL_Color>& sig, VALUE func);
 void connect_v1_ObjMapObject(CL_Signal_v1<ObjMapObject>& sig, VALUE func);

Modified: trunk/windstille/gui.rb
===================================================================
--- trunk/windstille/gui.rb	2005-08-14 22:30:18 UTC (rev 595)
+++ trunk/windstille/gui.rb	2005-08-14 22:41:12 UTC (rev 596)
@@ -41,9 +41,9 @@
                                                    SExpression.new($guilayout_spec),
                                                    @gui.get_component())
     
-    connect_v2($flexlay.sig_resize(), proc{|w, h|
-                 components.set_size(w, h)
-               })
+    connect_v2_graceful($flexlay.sig_resize(), proc{|w, h|
+                          components.set_size(w, h)
+                        })
 
     @editor_map = components.get('editormap').component
     @workspace  = Workspace.new()



From grumbel at berlios.de  Mon Aug 15 01:22:36 2005
From: grumbel at berlios.de (Ingo Ruhnke at BerliOS)
Date: Mon, 15 Aug 2005 01:22:36 +0200
Subject: [Flexlay-commit] r597 - trunk/windstille
Message-ID: <200508142322.j7ENMaH2032044@sheep.berlios.de>

Author: grumbel
Date: 2005-08-15 01:21:56 +0200 (Mon, 15 Aug 2005)
New Revision: 597

Modified:
   trunk/windstille/gui_specs.rb
   trunk/windstille/layout_manager.rb
Log:
- added panel support

Modified: trunk/windstille/gui_specs.rb
===================================================================
--- trunk/windstille/gui_specs.rb	2005-08-14 22:41:12 UTC (rev 596)
+++ trunk/windstille/gui_specs.rb	2005-08-14 23:21:56 UTC (rev 597)
@@ -103,7 +103,8 @@
         [:editormap, 
           [:name, 'editormap']],
 
-        [:vbox,
+        [:panel,
+          [:layout, :vbox],
           [:size, 192],
           [:components,
             [:tileselector,

Modified: trunk/windstille/layout_manager.rb
===================================================================
--- trunk/windstille/layout_manager.rb	2005-08-14 22:41:12 UTC (rev 596)
+++ trunk/windstille/layout_manager.rb	2005-08-14 23:21:56 UTC (rev 597)
@@ -29,8 +29,9 @@
 
   # use nil for width and height if it should be determined
   # automatically
-  def initialize(component, params)
+  def initialize(component, child, params)
     @component = component
+    @child     = child
 
     @name      = params[:name]
     @size      = params[:size]
@@ -40,19 +41,34 @@
   end
 
   def get(name)
-    return nil
+    if @child then
+      return @child.get(name)
+    else
+      return nil
+    end
   end
   
   def set_pos(x, y)
-    @component.set_position(x, y)
+    if @component then
+      @component.set_position(x, y)
+    end
   end
   
   def set_size(width, height)
-    @component.set_size(width, height)
+    if @component then
+      @component.set_size(width, height)
+    end
+
+    if @child then
+      @child.set_size(width, height)
+    end
   end
 
   # Rearanges the layout to fit the current size
   def layout()
+    if @child then
+      return @child.layout()
+    end
   end
 
   def LayoutComponent.create_from_sexpr(rect, sexpr, parent)
@@ -69,15 +85,26 @@
   def LayoutComponent.create(type, rect, sexpr, parent)
     case type
     when :vbox
-      box = LayoutBox.new(type, rect, sexpr, parent)
-      return box
+      return LayoutBox.new(type, rect, sexpr, parent)
 
     when :hbox
-      box = LayoutBox.new(type, rect, sexpr, parent)
-      return box
-      
+      return  LayoutBox.new(type, rect, sexpr, parent)
+
+    when :panel
+      panel = Panel.new(rect, parent)
+      return LayoutComponent.new(panel, 
+                                 LayoutBox.new(sexpr.get_value([:layout, '_'], :vbox),
+                                               CL_Rect.new(0, 0, rect.get_width(), rect.get_height()), 
+                                               sexpr, panel),
+                                 :name    => sexpr.get_value([:name,    '_'], nil),
+                                 :size    => sexpr.get_value([:size,    '_'], nil),
+                                 :expand  => sexpr.get_value([:expand,  '_'], true),
+                                 :fill    => sexpr.get_value([:fill,    '_'],    true),
+                                 :padding => sexpr.get_value([:padding, '_'], 0))
+
     else
       return LayoutComponent.new(create_raw(type, rect, sexpr, parent), 
+                                 nil,
                                  :name    => sexpr.get_value([:name,    '_'], nil),
                                  :size    => sexpr.get_value([:size,    '_'], nil),
                                  :expand  => sexpr.get_value([:expand,  '_'], true),
@@ -88,7 +115,6 @@
 
   def LayoutComponent.create_raw(type, rect, sexpr, parent)
     case type
-    when :panel     
 
     when :editormap
       return EditorMapComponent.new(rect, parent)      
@@ -151,7 +177,7 @@
 
 class LayoutBox < LayoutComponent
   def initialize(type, rect, sexpr, parent)
-    super(nil,
+    super(nil, nil,
           :name    => sexpr.get_value([:name,    '_'], nil),
           :size    => sexpr.get_value([:size,    '_'], nil),
           :expand  => sexpr.get_value([:expand,  '_'], true),
@@ -178,7 +204,7 @@
     @components.each() { |i|
       if i.name == name then
         return i
-      elsif i.is_a?(LayoutBox) then
+      else
         a = i.get(name)
         if a then return a end
       end
@@ -193,6 +219,7 @@
   def set_pos(x, y)
     @x = x
     @y = y
+    layout()
   end
 
   def set_size(width, height)



From grumbel at berlios.de  Mon Aug 15 01:47:18 2005
From: grumbel at berlios.de (Ingo Ruhnke at BerliOS)
Date: Mon, 15 Aug 2005 01:47:18 +0200
Subject: [Flexlay-commit] r598 - in trunk: lib windstille
Message-ID: <200508142347.j7ENlIVh010646@sheep.berlios.de>

Author: grumbel
Date: 2005-08-15 01:46:57 +0200 (Mon, 15 Aug 2005)
New Revision: 598

Modified:
   trunk/lib/editor_map_component.cxx
   trunk/windstille/gui_specs.rb
   trunk/windstille/layout_manager.rb
Log:
- fixed resize even more, added tab-layout component

Modified: trunk/lib/editor_map_component.cxx
===================================================================
--- trunk/lib/editor_map_component.cxx	2005-08-14 23:21:56 UTC (rev 597)
+++ trunk/lib/editor_map_component.cxx	2005-08-14 23:46:57 UTC (rev 598)
@@ -219,6 +219,8 @@
   
   scrollbar_h->set_position(2 + rect.left, rect.get_height() - 14 + rect.top);
   scrollbar_h->set_size(rect.get_width() - 4 - 14, 12);
+
+  gc_state.set_size(rect.get_width(), rect.get_height());
 }
 
 CL_Signal_v2<int, int>&

Modified: trunk/windstille/gui_specs.rb
===================================================================
--- trunk/windstille/gui_specs.rb	2005-08-14 23:21:56 UTC (rev 597)
+++ trunk/windstille/gui_specs.rb	2005-08-14 23:46:57 UTC (rev 598)
@@ -107,10 +107,12 @@
           [:layout, :vbox],
           [:size, 192],
           [:components,
-            [:tileselector,
-              [:name, 'tileselector']],
-            [:objectselector,
-              [:name, 'objectselector']],
+            [:tab,
+              [:components,
+                [:tileselector,
+                  [:name, 'tileselector']],
+                [:objectselector,
+                  [:name, 'objectselector']]]],
             [:minimap, 
               [:name,    'minimap'],
               [:size,    144],

Modified: trunk/windstille/layout_manager.rb
===================================================================
--- trunk/windstille/layout_manager.rb	2005-08-14 23:21:56 UTC (rev 597)
+++ trunk/windstille/layout_manager.rb	2005-08-14 23:46:57 UTC (rev 598)
@@ -102,6 +102,9 @@
                                  :fill    => sexpr.get_value([:fill,    '_'],    true),
                                  :padding => sexpr.get_value([:padding, '_'], 0))
 
+    when :tab
+      return TabComponent.new(rect, sexpr, parent)
+
     else
       return LayoutComponent.new(create_raw(type, rect, sexpr, parent), 
                                  nil,
@@ -175,6 +178,45 @@
   end
 end
 
+class TabComponent < LayoutComponent
+  def initialize(rect, sexpr, parent)
+    super(nil, nil,
+          :name    => sexpr.get_value([:name,    '_'], nil),
+          :size    => sexpr.get_value([:size,    '_'], nil),
+          :expand  => sexpr.get_value([:expand,  '_'], true),
+          :fill    => sexpr.get_value([:fill,    '_'],    true),
+          :padding => sexpr.get_value([:padding, '_'], 0))
+    
+    @childs = []
+
+    sexpr.get(:components, SExpression.new()).each_pair() { |name, value|
+      @childs.push(LayoutComponent.create(name, CL_Rect.new(0, 0, 256, 256), value, parent))
+    }
+  end
+
+  def get(name)
+    @childs.each() { |i| 
+      if i.name == name then
+        return i
+      end
+    }
+    return nil
+  end
+  
+  def set_pos(x, y)
+    @childs.each() { |i| i.set_pos(x, y) }
+  end
+  
+  def set_size(width, height)
+    @childs.each() { |i| i.set_size(width, height) }
+  end
+
+  # Rearanges the layout to fit the current size
+  def layout()
+    @childs.each() { |i| i.layout() }
+  end
+end
+
 class LayoutBox < LayoutComponent
   def initialize(type, rect, sexpr, parent)
     super(nil, nil,



From grumbel at berlios.de  Mon Aug 15 12:36:57 2005
From: grumbel at berlios.de (Ingo Ruhnke at BerliOS)
Date: Mon, 15 Aug 2005 12:36:57 +0200
Subject: [Flexlay-commit] r599 - in trunk: lib netpanzer ruby windstille
Message-ID: <200508151036.j7FAavkT015756@sheep.berlios.de>

Author: grumbel
Date: 2005-08-15 12:36:48 +0200 (Mon, 15 Aug 2005)
New Revision: 599

Added:
   trunk/ruby/layout_component.rb
Removed:
   trunk/windstille/layout_manager.rb
Modified:
   trunk/lib/minimap.cxx
   trunk/lib/object_selector.cxx
   trunk/netpanzer/gui.rb
   trunk/netpanzer/netpanzer.rb
   trunk/windstille/gui.rb
Log:
- added resize handling to netpanzer

Modified: trunk/lib/minimap.cxx
===================================================================
--- trunk/lib/minimap.cxx	2005-08-14 23:46:57 UTC (rev 598)
+++ trunk/lib/minimap.cxx	2005-08-15 10:36:48 UTC (rev 599)
@@ -181,13 +181,16 @@
 {
   // FIXME: This doesn't work all that well
   TilemapLayer tilemap = TilemapLayer::current();
-  int tile_size  = tilemap.get_tileset().get_tile_size();
-  int map_width  = tilemap.get_width()  * tile_size;
-  int map_height = tilemap.get_height() * tile_size;
+  if (!tilemap.is_null())
+    {
+      int tile_size  = tilemap.get_tileset().get_tile_size();
+      int map_width  = tilemap.get_width()  * tile_size;
+      int map_height = tilemap.get_height() * tile_size;
 
-  if (impl->drag_active)
-    impl->parent->move_to(event.mouse_pos.x * map_width / get_width(),
-                          event.mouse_pos.y * map_height / get_height());
+      if (impl->drag_active)
+        impl->parent->move_to(event.mouse_pos.x * map_width / get_width(),
+                              event.mouse_pos.y * map_height / get_height());
+    }
 }
 
 void
@@ -195,21 +198,28 @@
 {
   // FIXME: This doesn't work all that well
   TilemapLayer tilemap = TilemapLayer::current();
-  int tile_size  = tilemap.get_tileset().get_tile_size();
-  int map_width  = tilemap.get_width()  * tile_size;
-  int map_height = tilemap.get_height() * tile_size;
+  if (!tilemap.is_null())
+    {
+      int tile_size  = tilemap.get_tileset().get_tile_size();
+      int map_width  = tilemap.get_width()  * tile_size;
+      int map_height = tilemap.get_height() * tile_size;
 
-  impl->parent->move_to(event.mouse_pos.x * map_width / get_width(),
-                        event.mouse_pos.y * map_height / get_height());
-  impl->drag_active = true;
-  capture_mouse();
+      impl->parent->move_to(event.mouse_pos.x * map_width / get_width(),
+                            event.mouse_pos.y * map_height / get_height());
+      impl->drag_active = true;
+      capture_mouse();
+    }
 }
 
 void
 Minimap::mouse_up  (const CL_InputEvent& event)
 {
-  impl->drag_active = false;
-  release_mouse();
+  TilemapLayer tilemap = TilemapLayer::current();
+  if (!tilemap.is_null())
+    {
+      impl->drag_active = false;
+      release_mouse();
+    }
 }
 
 void

Modified: trunk/lib/object_selector.cxx
===================================================================
--- trunk/lib/object_selector.cxx	2005-08-14 23:46:57 UTC (rev 598)
+++ trunk/lib/object_selector.cxx	2005-08-15 10:36:48 UTC (rev 599)
@@ -154,6 +154,8 @@
   if (offset < 0)
     offset = 0;
 
+  CL_Display::push_cliprect(get_screen_rect());
+
   // Handle scrolling in the Component
   CL_Display::push_modelview();
   CL_Display::add_translate(0, -offset);
@@ -184,7 +186,8 @@
     }
 
   CL_Display::pop_modelview();
-
+  CL_Display::pop_cliprect();
+ 
   // Draw drag sprite
   if (drag_obj != -1)
     {

Modified: trunk/netpanzer/gui.rb
===================================================================
--- trunk/netpanzer/gui.rb	2005-08-14 23:46:57 UTC (rev 598)
+++ trunk/netpanzer/gui.rb	2005-08-15 10:36:48 UTC (rev 599)
@@ -17,24 +17,59 @@
 ##  along with this program; if not, write to the Free Software
 ##  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
+require "layout_component.rb"
+
+$guilayout_spec = \
+[:vbox,
+  [:components,
+    [:menubar,
+      [:name, 'menubar'],
+      [:size, 23]],
+    [:buttonpanel, 
+      [:name, 'buttonpanel'],
+      [:size, 33]],
+    [:hbox,
+      [:components,
+        [:editormap, 
+          [:name, 'editormap']],
+        [:panel,
+          [:layout, :vbox],
+          [:size, 134],
+          [:components,
+            [:tab,
+              [:padding, 3],
+              [:components,
+                [:listbox, 
+                  [:name, 'brushbox']],
+                [:objectselector,
+                  [:name, 'objectselector']]]],
+            [:minimap, 
+              [:padding, 3],
+              [:size, 134],
+              [:name, 'minimap']]]]]]]]
+
 class GUI
   attr_reader :workspace, :minimap, :editor_map
 
   def initialize()
     @gui = GUIManager.new()
 
-    myrect = CL_Rect.new(CL_Point.new(0, 56), CL_Size.new($screen.width-134-1, ($screen.height-112)+56))
-    @editor_map = EditorMapComponent.new(myrect, @gui.get_component())
+    components = LayoutComponent.create_from_sexpr(CL_Rect.new(0,0, $screen.width, $screen.height),
+                                                   SExpression.new($guilayout_spec),
+                                                   @gui.get_component())
+
+    connect_v2_graceful($flexlay.sig_resize(), proc{|w, h|
+                          components.set_size(w, h)
+                        })
+
+    @editor_map = components.get('editormap').component
     @workspace  = Workspace.new()
     @editor_map.set_workspace(@workspace)
 
-    @option_panel = Panel.new(CL_Rect.new(CL_Point.new($screen.width-134, 56), CL_Size.new(134, $screen.height-112+56)), @gui.get_component())
-
-    @brushbox = CL_ListBox.new(CL_Rect.new(CL_Point.new(3, 3), CL_Size.new(128, $screen.height-112+56-128-9)), @option_panel)
+    @brushbox = components.get('brushbox').component
     @brushbox.show(false)
 
-    @objectselector = ObjectSelector.new(CL_Rect.new(CL_Point.new(3, 3), CL_Size.new(128, $screen.height-112+56-128-9)),
-                                         64, 64, @option_panel)
+    @objectselector = components.get('objectselector').component
 
     @objectselector.add_brush(ObjectBrush.new(GameObjects::Outpost.get_sprite(),
                                               make_metadata(proc{GameObjects::Outpost.new()})))
@@ -53,7 +88,7 @@
 
     @workspace.set_tool($tilemap_paint_tool.to_tool());
 
-    @button_panel = ButtonPanel.new(0, 23, $screen.width, 33, true, @gui.get_component)
+    @button_panel = components.get('buttonpanel').component
 
     @button_panel.add_icon("../data/images/icons24/stock_new.png",
                            proc{ gui_level_new() })
@@ -105,7 +140,7 @@
       @brushbox.insert_item("%s - %sx%s" % [name, width, height])
     }
 
-    @menu = CL_Menu.new(@gui.get_component())
+    @menu = components.get('menubar').component
     @menu.add_item("File/New...", proc{gui_level_new})
     @menu.add_item("File/Open...", proc{gui_level_load})
     @menu.add_item("File/Save...", proc{gui_level_save})
@@ -121,8 +156,7 @@
     @menu.add_item("Scripts/Flatten",  proc{ @workspace.get_map().get_data().flatten() })
     @menu.add_item("Scripts/Unflatten",  proc{ @workspace.get_map().get_data().unflatten() })
 
-    @minimap = Minimap.new(@editor_map, CL_Rect.new(CL_Point.new(3, ($screen.height-112)+56 - 128-3), CL_Size.new(128, 128)), 
-                           @option_panel)
+    @minimap = components.get('minimap').component
 
     @load_dialog = SimpleFileDialog.new("Load netPanzer Level", "Load", "Cancel", @gui.get_component())
     @load_dialog.set_filename($config.datadir + "maps/")

Modified: trunk/netpanzer/netpanzer.rb
===================================================================
--- trunk/netpanzer/netpanzer.rb	2005-08-14 23:46:57 UTC (rev 598)
+++ trunk/netpanzer/netpanzer.rb	2005-08-15 10:36:48 UTC (rev 599)
@@ -35,10 +35,10 @@
 require "gameobjects.rb"
 require "gui.rb"
 
-$screen  = CL_Size.new(1024, 768)
+$screen  = CL_Size.new(640, 480)
 
-flexlay = Flexlay.new()
-flexlay.init($screen.width, $screen.height)
+$flexlay = Flexlay.new()
+$flexlay.init($screen.width, $screen.height, false, true)
 
 class Config
   attr_accessor :datadir, :recent_files
@@ -89,7 +89,7 @@
 
 $gui = GUI.new()
 
-$gui.set_tilemap_paint_tool()
+# $gui.set_tilemap_paint_tool()
 
 $gui.gui_level_new()
 

Copied: trunk/ruby/layout_component.rb (from rev 598, trunk/windstille/layout_manager.rb)
===================================================================
--- trunk/windstille/layout_manager.rb	2005-08-14 23:46:57 UTC (rev 598)
+++ trunk/ruby/layout_component.rb	2005-08-15 10:36:48 UTC (rev 599)
@@ -0,0 +1,316 @@
+##  $Id$
+##   ______ __               ___
+##  |   ___|  |.-----.--.--.|   | .---.-.--.--.
+##  |   ___|  ||  -__|_   _||   |_|  _  |  |  |
+##  |__|   |__||_____|__.__||_____|___._|___  |
+##                                      |_____|
+##  Copyright (C) 2004 Ingo Ruhnke <grumbel at gmx.de>
+##
+##  This program is free software; you can redistribute it and/or
+##  modify it under the terms of the GNU General Public License
+##  as published by the Free Software Foundation; either version 2
+##  of the License, or (at your option) any later version.
+##
+##  This program is distributed in the hope that it will be useful,
+##  but WITHOUT ANY WARRANTY; without even the implied warranty of
+##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+##  GNU General Public License for more details.
+## 
+##  You should have received a copy of the GNU General Public License
+##  along with this program; if not, write to the Free Software
+##  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+##  02111-1307, USA.
+
+require "sexpr.rb"
+
+# Helper class that holds all necesarry paramter to handle layouting,
+# could also extend Component instead
+class LayoutComponent
+  attr_reader :component, :name, :size,:expand, :fill, :padding
+
+  # use nil for width and height if it should be determined
+  # automatically
+  def initialize(component, child, params)
+    @component = component
+    @child     = child
+
+    @name      = params[:name]
+    @size      = params[:size]
+    @expand    = params[:expand]
+    @fill      = params[:fill]
+    @padding   = params[:padding]
+  end
+
+  def get(name)
+    if @child then
+      return @child.get(name)
+    else
+      return nil
+    end
+  end
+  
+  def set_pos(x, y)
+    if @component then
+      @component.set_position(x, y)
+    end
+  end
+  
+  def set_size(width, height)
+    if @component then
+      @component.set_size(width, height)
+    end
+
+    if @child then
+      @child.set_size(width, height)
+    end
+  end
+
+  # Rearanges the layout to fit the current size
+  def layout()
+    if @child then
+      return @child.layout()
+    end
+  end
+
+  def LayoutComponent.create_from_sexpr(rect, sexpr, parent)
+    create(sexpr.car().value(), rect, sexpr.cdr(), parent)
+  end
+  
+  def LayoutComponent.create(type, rect, sexpr, parent)
+    # puts "Create: #{type}"
+    case type
+    when :vbox
+      return LayoutBox.new(type, rect, sexpr, parent)
+
+    when :hbox
+      return  LayoutBox.new(type, rect, sexpr, parent)
+
+    when :panel
+      panel = Panel.new(rect, parent)
+      return LayoutComponent.new(panel, 
+                                 LayoutBox.new(sexpr.get_value([:layout, '_'], :vbox),
+                                               CL_Rect.new(0, 0, rect.get_width(), rect.get_height()), 
+                                               sexpr, panel),
+                                 :name    => sexpr.get_value([:name,    '_'], nil),
+                                 :size    => sexpr.get_value([:size,    '_'], nil),
+                                 :expand  => sexpr.get_value([:expand,  '_'], true),
+                                 :fill    => sexpr.get_value([:fill,    '_'],    true),
+                                 :padding => sexpr.get_value([:padding, '_'], 0))
+
+    when :tab
+      return TabComponent.new(rect, sexpr, parent)
+
+    else
+      return LayoutComponent.new(create_raw(type, rect, sexpr, parent), 
+                                 nil,
+                                 :name    => sexpr.get_value([:name,    '_'], nil),
+                                 :size    => sexpr.get_value([:size,    '_'], nil),
+                                 :expand  => sexpr.get_value([:expand,  '_'], true),
+                                 :fill    => sexpr.get_value([:fill,    '_'],    true),
+                                 :padding => sexpr.get_value([:padding, '_'], 0))
+    end
+  end
+
+  def LayoutComponent.create_raw(type, rect, sexpr, parent)
+    case type
+
+    when :editormap
+      return EditorMapComponent.new(rect, parent)      
+      
+    when :menubar
+      return CL_Menu.new_from_spec(sexpr.get_value(['spec', '_'], []),
+                                   parent)
+
+    when :button
+      return CL_Button.new(rect,
+                           sexpr.get_value(['label', '_'], []),
+                           parent)
+
+    when :label
+      return CL_Label.new(CL_Point.new(rect.top, rect.left),
+                          sexpr.get_value(['label', '_'], []),
+                          parent)
+
+    when :listbox
+      return CL_ListBox.new(rect, parent)
+      
+    when :inputbox
+      return CL_InputBox.new(rect, parent)
+
+    when :radiobutton
+      return CL_RadioButton.new(CL_Point.new(rect.left, rect.top),
+                                sexpr.get_value(['label', '_'], []),
+                                parent)
+
+    when :radiogroup
+      return CL_RadioGroup.new()
+
+    when :checkbox
+      return CL_CheckBox.new(CL_Point.new(rect.left, rect.top),
+                             sexpr.get_value(['label', '_'], []),
+                             parent)
+
+    when :buttonpanel
+      return ButtonPanel.new_from_spec(rect.left, rect.top, rect.get_width(), rect.get_height(), true,
+                                       sexpr.get_value([:spec, '_'], []), parent)
+
+    when :tileselector
+      return TileSelector.new(rect, parent)
+      
+    when :objectselector
+      return ObjectSelector.new(rect, 
+                                sexpr.get_value([:objectwidth, '_'], 42), 
+                                sexpr.get_value([:objectheight, '_'], 42),
+                                parent)
+
+    when :minimap
+      @minimap = Minimap.new(nil, rect, parent)
+      
+    else
+      raise "Unknonwn Component type '#{type.inspect}'"
+
+    end
+  end
+end
+
+class TabComponent < LayoutComponent
+  def initialize(rect, sexpr, parent)
+    super(nil, nil,
+          :name    => sexpr.get_value([:name,    '_'], nil),
+          :size    => sexpr.get_value([:size,    '_'], nil),
+          :expand  => sexpr.get_value([:expand,  '_'], true),
+          :fill    => sexpr.get_value([:fill,    '_'],    true),
+          :padding => sexpr.get_value([:padding, '_'], 0))
+    
+    @childs = []
+
+    sexpr.get(:components, SExpression.new()).each_pair() { |name, value|
+      @childs.push(LayoutComponent.create(name, CL_Rect.new(0, 0, 256, 256), value, parent))
+    }
+  end
+
+  def get(name)
+    @childs.each() { |i| 
+      if i.name == name then
+        return i
+      end
+    }
+    return nil
+  end
+  
+  def set_pos(x, y)
+    @childs.each() { |i| i.set_pos(x, y) }
+  end
+  
+  def set_size(width, height)
+    @childs.each() { |i| i.set_size(width, height) }
+  end
+
+  # Rearanges the layout to fit the current size
+  def layout()
+    @childs.each() { |i| i.layout() }
+  end
+end
+
+class LayoutBox < LayoutComponent
+  def initialize(type, rect, sexpr, parent)
+    super(nil, nil,
+          :name    => sexpr.get_value([:name,    '_'], nil),
+          :size    => sexpr.get_value([:size,    '_'], nil),
+          :expand  => sexpr.get_value([:expand,  '_'], true),
+          :fill    => sexpr.get_value([:fill,    '_'],    true),
+          :padding => sexpr.get_value([:padding, '_'], 0))
+
+    @type       = type # :vbox or :hbox
+    @x          = rect.left
+    @y          = rect.top
+    @width      = rect.get_width()
+    @height     = rect.get_height()
+    @parent     = parent
+    @components = []
+    @homogenus  = false
+
+    sexpr.get(:components, SExpression.new()).each_pair() { |name, value|
+      @components.push(LayoutComponent.create(name, CL_Rect.new(0, 0, 256, 256), value, @parent))
+    }
+
+    layout()
+  end
+
+  def get(name)
+    @components.each() { |i|
+      if i.name == name then
+        return i
+      else
+        a = i.get(name)
+        if a then return a end
+      end
+    }
+    return nil
+  end
+
+  def add(type, spec)
+    @components.push([type, spec, nil])
+  end
+  
+  def set_pos(x, y)
+    @x = x
+    @y = y
+    layout()
+  end
+
+  def set_size(width, height)
+    @width  = width
+    @height = height
+    layout()
+  end
+
+  def layout()
+    x = @x
+    y = @y
+
+    len = 0
+    num = 0
+    @components.each() { |component|
+      if component.size then
+        len += component.size
+      else
+        num += 1
+      end
+    }
+
+    if @type == :vbox     
+      avlen = (@height - len) / num
+      
+      @components.each() { |component|
+        component.set_pos(x + component.padding, y + component.padding)
+
+        if component.size then
+          component.set_size(@width - component.padding*2, component.size - component.padding*2)
+          y += component.size
+        else
+          component.set_size(@width - component.padding*2, avlen - component.padding*2)
+          y += avlen
+        end
+      }
+    elsif @type == :hbox
+      avlen = (@width - len) / num
+      
+      @components.each() { |component|
+        component.set_pos(x + component.padding, y + component.padding)
+
+        if component.size then
+          component.set_size(component.size - component.padding*2, @height - component.padding*2)
+          x += component.size
+        else
+          component.set_size(avlen - component.padding*2, @height - component.padding*2)
+          x += avlen
+        end
+      }
+    else
+      raise "LayoutBox: Unknown type #{type}"
+    end
+  end
+end
+
+## EOF ##

Modified: trunk/windstille/gui.rb
===================================================================
--- trunk/windstille/gui.rb	2005-08-14 23:46:57 UTC (rev 598)
+++ trunk/windstille/gui.rb	2005-08-15 10:36:48 UTC (rev 599)
@@ -22,7 +22,7 @@
 ##  02111-1307, USA.
 
 require "gameobjects.rb"
-require "layout_manager.rb"
+require "layout_component.rb"
 require "gui_specs.rb"
 
 ## GUI class which holds all the GUI components and the state of them
@@ -69,14 +69,6 @@
       @tilegroup_menu.add_item($mysprite, tilegroup.name, proc{@tileselector.set_tiles(tilegroup.tiles)})
     }
 
-    # @selector_window = Panel.new(CL_Rect.new(CL_Point.new($screen_width-128-64-6, 23+33), 
-    #                                         CL_Size.new(128 + 64 + 6, $screen_height - 600 + 558)),
-    #                             @gui.get_component())
-
-    # @tileselector = TileSelector.new(CL_Rect.new(CL_Point.new(3, 3), 
-    #                                             CL_Size.new(128+64, $screen_height - 600 + 552 - 144 - 3)),
-    #                                 @selector_window)
-
     @tileselector = components.get('tileselector').component
     @tileselector.set_tileset($tileset)
     @tileselector.set_scale(0.75)
@@ -85,7 +77,6 @@
     @tileselector.show(true)
     
     @objectselector = components.get('objectselector').component
-    # @objectselector = ObjectSelector.new(CL_Rect.new(0, 0, 128, $screen_height - 600 + 552 - 144 - 3), 42, 42, @selector_window)
     @objectselector.show(false)
 
     connect_v2_ObjectBrush_Point(@objectselector.sig_drop(), proc{|brush, pos| on_object_drop(brush, pos) })

Deleted: trunk/windstille/layout_manager.rb
===================================================================
--- trunk/windstille/layout_manager.rb	2005-08-14 23:46:57 UTC (rev 598)
+++ trunk/windstille/layout_manager.rb	2005-08-15 10:36:48 UTC (rev 599)
@@ -1,321 +0,0 @@
-##  $Id$
-##   ______ __               ___
-##  |   ___|  |.-----.--.--.|   | .---.-.--.--.
-##  |   ___|  ||  -__|_   _||   |_|  _  |  |  |
-##  |__|   |__||_____|__.__||_____|___._|___  |
-##                                      |_____|
-##  Copyright (C) 2004 Ingo Ruhnke <grumbel at gmx.de>
-##
-##  This program is free software; you can redistribute it and/or
-##  modify it under the terms of the GNU General Public License
-##  as published by the Free Software Foundation; either version 2
-##  of the License, or (at your option) any later version.
-##
-##  This program is distributed in the hope that it will be useful,
-##  but WITHOUT ANY WARRANTY; without even the implied warranty of
-##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-##  GNU General Public License for more details.
-## 
-##  You should have received a copy of the GNU General Public License
-##  along with this program; if not, write to the Free Software
-##  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-##  02111-1307, USA.
-
-
-# Helper class that holds all necesarry paramter to handle layouting,
-# could also extend Component instead
-class LayoutComponent
-  attr_reader :component, :name, :size,:expand, :fill, :padding
-
-  # use nil for width and height if it should be determined
-  # automatically
-  def initialize(component, child, params)
-    @component = component
-    @child     = child
-
-    @name      = params[:name]
-    @size      = params[:size]
-    @expand    = params[:expand]
-    @fill      = params[:fill]
-    @padding   = params[:padding]
-  end
-
-  def get(name)
-    if @child then
-      return @child.get(name)
-    else
-      return nil
-    end
-  end
-  
-  def set_pos(x, y)
-    if @component then
-      @component.set_position(x, y)
-    end
-  end
-  
-  def set_size(width, height)
-    if @component then
-      @component.set_size(width, height)
-    end
-
-    if @child then
-      @child.set_size(width, height)
-    end
-  end
-
-  # Rearanges the layout to fit the current size
-  def layout()
-    if @child then
-      return @child.layout()
-    end
-  end
-
-  def LayoutComponent.create_from_sexpr(rect, sexpr, parent)
-    case sexpr.car()
-    when :vbox
-    when :hbox
-    when :panel
-      
-    else
-      create(sexpr.car().value(), rect, sexpr.cdr(), parent)
-    end
-  end
-  
-  def LayoutComponent.create(type, rect, sexpr, parent)
-    case type
-    when :vbox
-      return LayoutBox.new(type, rect, sexpr, parent)
-
-    when :hbox
-      return  LayoutBox.new(type, rect, sexpr, parent)
-
-    when :panel
-      panel = Panel.new(rect, parent)
-      return LayoutComponent.new(panel, 
-                                 LayoutBox.new(sexpr.get_value([:layout, '_'], :vbox),
-                                               CL_Rect.new(0, 0, rect.get_width(), rect.get_height()), 
-                                               sexpr, panel),
-                                 :name    => sexpr.get_value([:name,    '_'], nil),
-                                 :size    => sexpr.get_value([:size,    '_'], nil),
-                                 :expand  => sexpr.get_value([:expand,  '_'], true),
-                                 :fill    => sexpr.get_value([:fill,    '_'],    true),
-                                 :padding => sexpr.get_value([:padding, '_'], 0))
-
-    when :tab
-      return TabComponent.new(rect, sexpr, parent)
-
-    else
-      return LayoutComponent.new(create_raw(type, rect, sexpr, parent), 
-                                 nil,
-                                 :name    => sexpr.get_value([:name,    '_'], nil),
-                                 :size    => sexpr.get_value([:size,    '_'], nil),
-                                 :expand  => sexpr.get_value([:expand,  '_'], true),
-                                 :fill    => sexpr.get_value([:fill,    '_'],    true),
-                                 :padding => sexpr.get_value([:padding, '_'], 0))
-    end
-  end
-
-  def LayoutComponent.create_raw(type, rect, sexpr, parent)
-    case type
-
-    when :editormap
-      return EditorMapComponent.new(rect, parent)      
-      
-    when :menubar
-      return CL_Menu.new_from_spec(sexpr.get_value(['spec', '_'], []),
-                                   parent)
-
-    when :button
-      return CL_Button.new(rect,
-                           sexpr.get_value(['label', '_'], []),
-                           parent)
-
-    when :label
-      return CL_Label.new(CL_Point.new(rect.top, rect.left),
-                          sexpr.get_value(['label', '_'], []),
-                          parent)
-
-    when :listbox
-      return CL_ListBox.new(rect, parent)
-      
-    when :inputbox
-      return CL_InputBox.new(rect, parent)
-
-    when :radiobutton
-      return CL_RadioButton.new(CL_Point.new(rect.left, rect.top),
-                                sexpr.get_value(['label', '_'], []),
-                                parent)
-
-    when :radiogroup
-      return CL_RadioGroup.new()
-
-    when :checkbox
-      return CL_CheckBox.new(CL_Point.new(rect.left, rect.top),
-                             sexpr.get_value(['label', '_'], []),
-                             parent)
-
-    when :buttonpanel
-      return ButtonPanel.new_from_spec(rect.left, rect.top, rect.get_width(), rect.get_height(), true,
-                                       sexpr.get_value([:spec, '_'], []), parent)
-
-    when :tileselector
-      return TileSelector.new(rect, parent)
-      
-    when :objectselector
-      return ObjectSelector.new(rect, 
-                                sexpr.get_value([:objectwidth, '_'], 42), 
-                                sexpr.get_value([:objectheight, '_'], 42),
-                                parent)
-
-    when :minimap
-      @minimap = Minimap.new(nil, rect, parent)
-      
-    else
-      raise "Unknonwn Component type '#{type.inspect}'"
-
-    end
-  end
-end
-
-class TabComponent < LayoutComponent
-  def initialize(rect, sexpr, parent)
-    super(nil, nil,
-          :name    => sexpr.get_value([:name,    '_'], nil),
-          :size    => sexpr.get_value([:size,    '_'], nil),
-          :expand  => sexpr.get_value([:expand,  '_'], true),
-          :fill    => sexpr.get_value([:fill,    '_'],    true),
-          :padding => sexpr.get_value([:padding, '_'], 0))
-    
-    @childs = []
-
-    sexpr.get(:components, SExpression.new()).each_pair() { |name, value|
-      @childs.push(LayoutComponent.create(name, CL_Rect.new(0, 0, 256, 256), value, parent))
-    }
-  end
-
-  def get(name)
-    @childs.each() { |i| 
-      if i.name == name then
-        return i
-      end
-    }
-    return nil
-  end
-  
-  def set_pos(x, y)
-    @childs.each() { |i| i.set_pos(x, y) }
-  end
-  
-  def set_size(width, height)
-    @childs.each() { |i| i.set_size(width, height) }
-  end
-
-  # Rearanges the layout to fit the current size
-  def layout()
-    @childs.each() { |i| i.layout() }
-  end
-end
-
-class LayoutBox < LayoutComponent
-  def initialize(type, rect, sexpr, parent)
-    super(nil, nil,
-          :name    => sexpr.get_value([:name,    '_'], nil),
-          :size    => sexpr.get_value([:size,    '_'], nil),
-          :expand  => sexpr.get_value([:expand,  '_'], true),
-          :fill    => sexpr.get_value([:fill,    '_'],    true),
-          :padding => sexpr.get_value([:padding, '_'], 0))
-
-    @type       = type # :vbox or :hbox
-    @x          = rect.left
-    @y          = rect.top
-    @width      = rect.get_width()
-    @height     = rect.get_height()
-    @parent     = parent
-    @components = []
-    @homogenus  = false
-
-    sexpr.get(:components, SExpression.new()).each_pair() { |name, value|
-      @components.push(LayoutComponent.create(name, CL_Rect.new(0, 0, 256, 256), value, @parent))
-    }
-
-    layout()
-  end
-
-  def get(name)
-    @components.each() { |i|
-      if i.name == name then
-        return i
-      else
-        a = i.get(name)
-        if a then return a end
-      end
-    }
-    return nil
-  end
-
-  def add(type, spec)
-    @components.push([type, spec, nil])
-  end
-  
-  def set_pos(x, y)
-    @x = x
-    @y = y
-    layout()
-  end
-
-  def set_size(width, height)
-    @width  = width
-    @height = height
-    layout()
-  end
-
-  def layout()
-    x = @x
-    y = @y
-
-    len = 0
-    num = 0
-    @components.each() { |component|
-      if component.size then
-        len += component.size
-      else
-        num += 1
-      end
-    }
-
-    if @type == :vbox     
-      avlen = (@height - len) / num
-      
-      @components.each() { |component|
-        component.set_pos(x + component.padding, y + component.padding)
-
-        if component.size then
-          component.set_size(@width - component.padding*2, component.size - component.padding*2)
-          y += component.size
-        else
-          component.set_size(@width - component.padding*2, avlen - component.padding*2)
-          y += avlen
-        end
-      }
-    elsif @type == :hbox
-      avlen = (@width - len) / num
-      
-      @components.each() { |component|
-        component.set_pos(x + component.padding, y + component.padding)
-
-        if component.size then
-          component.set_size(component.size - component.padding*2, @height - component.padding*2)
-          x += component.size
-        else
-          component.set_size(avlen - component.padding*2, @height - component.padding*2)
-          x += avlen
-        end
-      }
-    else
-      raise "LayoutBox: Unknown type #{type}"
-    end
-  end
-end
-
-## EOF ##



From grumbel at berlios.de  Mon Aug 15 13:48:29 2005
From: grumbel at berlios.de (Ingo Ruhnke at BerliOS)
Date: Mon, 15 Aug 2005 13:48:29 +0200
Subject: [Flexlay-commit] r600 - trunk/windstille
Message-ID: <200508151148.j7FBmTug028471@sheep.berlios.de>

Author: grumbel
Date: 2005-08-15 13:47:55 +0200 (Mon, 15 Aug 2005)
New Revision: 600

Added:
   trunk/windstille/sprite.rb
Log:
- added sprite file parser (incomplete)

Added: trunk/windstille/sprite.rb
===================================================================
--- trunk/windstille/sprite.rb	2005-08-15 10:36:48 UTC (rev 599)
+++ trunk/windstille/sprite.rb	2005-08-15 11:47:55 UTC (rev 600)
@@ -0,0 +1,78 @@
+##  $Id$
+##   ______ __               ___
+##  |   ___|  |.-----.--.--.|   | .---.-.--.--.
+##  |   ___|  ||  -__|_   _||   |_|  _  |  |  |
+##  |__|   |__||_____|__.__||_____|___._|___  |
+##                                      |_____|
+##  Copyright (C) 2004 Ingo Ruhnke <grumbel at gmx.de>
+##
+##  This program is free software; you can redistribute it and/or
+##  modify it under the terms of the GNU General Public License
+##  as published by the Free Software Foundation; either version 2
+##  of the License, or (at your option) any later version.
+##
+##  This program is distributed in the hope that it will be useful,
+##  but WITHOUT ANY WARRANTY; without even the implied warranty of
+##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+##  GNU General Public License for more details.
+## 
+##  You should have received a copy of the GNU General Public License
+##  along with this program; if not, write to the Free Software
+##  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+##  02111-1307, USA.
+
+require "sexpr.rb"
+
+class SpriteAction
+  attr_reader :name, :speed, :offset, :images
+
+  def initialize(sexpr)
+    value.each_pair() {|name, value|
+      case name
+      when :name
+        @offset = value.car().value()
+
+      when :speed 
+        @speed = value.car().value()
+
+      when :images
+        @images = value.car().value()
+
+      when :'image-grid'
+        # implement me
+
+      when :offset
+        @offset = value.value()
+
+      else
+        puts "Sprite: Unknown tag #{name}"
+      end
+    end
+  end
+end
+
+class Sprite
+  attr_reader :actions
+
+  def initialize(filename)
+    @actions = []
+
+    sexpr = SExpression.new_from_file(filename)
+    
+    if sexpr.car().value() == :sprite then
+      sexpr.cdr().each_pair() { |name, value|
+        case name
+        when :action
+          @actions.push(SpriteAction.new(value))
+        else
+          puts "Sprite: Unknown tag #{name}"
+        end
+      }
+    else
+      raise "Sprite: #{filename} not a sprite file"
+    end
+  end
+  
+end
+
+## EOF ##



From grumbel at berlios.de  Wed Aug 17 02:55:45 2005
From: grumbel at berlios.de (Ingo Ruhnke at BerliOS)
Date: Wed, 17 Aug 2005 02:55:45 +0200
Subject: [Flexlay-commit] r601 - in trunk: lib ruby windstille
Message-ID: <200508170055.j7H0tjMW007151@sheep.berlios.de>

Author: grumbel
Date: 2005-08-17 02:55:27 +0200 (Wed, 17 Aug 2005)
New Revision: 601

Modified:
   trunk/lib/flexlay_wrap.i
   trunk/lib/tilemap_layer.cxx
   trunk/lib/tilemap_layer.hxx
   trunk/ruby/flexlay.rb
   trunk/windstille/gui.rb
   trunk/windstille/windstille.rb
Log:
- some cleanup
- added metadata handling to TilemapLayer

Modified: trunk/lib/flexlay_wrap.i
===================================================================
--- trunk/lib/flexlay_wrap.i	2005-08-15 11:47:55 UTC (rev 600)
+++ trunk/lib/flexlay_wrap.i	2005-08-17 00:55:27 UTC (rev 601)
@@ -205,6 +205,6 @@
 %include "../ruby/ruby_sexpr_parser.hxx"
 #endif
 
-// 1
+// 2
 
 /* EOF */

Modified: trunk/lib/tilemap_layer.cxx
===================================================================
--- trunk/lib/tilemap_layer.cxx	2005-08-15 11:47:55 UTC (rev 600)
+++ trunk/lib/tilemap_layer.cxx	2005-08-17 00:55:27 UTC (rev 601)
@@ -39,9 +39,6 @@
 class TilemapLayerImpl : public LayerImpl
 {
 public:
-  TilemapLayerImpl() {}
-  virtual ~TilemapLayerImpl() {}
-
   Tileset tileset;
   CL_Color background_color;
   CL_Color foreground_color;
@@ -52,6 +49,11 @@
   bool draw_grid;
   bool draw_attribute;
 
+  MetaData metadata;
+
+  TilemapLayerImpl() {}
+  virtual ~TilemapLayerImpl() {}
+
   bool has_bounding_rect() const;
   CL_Rect get_bounding_rect();
   void draw(EditorMapComponent* parent, CL_GraphicContext* gc);
@@ -414,4 +416,16 @@
    return Layer(impl);
 }
 
+void
+TilemapLayer::set_metadata(const MetaData& metadata)
+{
+  impl->metadata = metadata;
+}
+
+MetaData
+TilemapLayer::get_metadata() const
+{
+  return impl->metadata;
+}
+
 /* EOF */

Modified: trunk/lib/tilemap_layer.hxx
===================================================================
--- trunk/lib/tilemap_layer.hxx	2005-08-15 11:47:55 UTC (rev 600)
+++ trunk/lib/tilemap_layer.hxx	2005-08-17 00:55:27 UTC (rev 601)
@@ -22,6 +22,7 @@
 
 #include <ClanLib/Display/pixel_buffer.h>
 #include "field.hxx"
+#include "meta_data.hxx"
 #include "shared_ptr.hxx"
 #include "layer.hxx"
 
@@ -58,6 +59,9 @@
   const std::vector<int>& get_data();
   void set_data(std::vector<int> d);
 
+  void   set_metadata(const MetaData& obj);
+  MetaData get_metadata() const;
+
   /** Draw the gives brush to the map */
   void draw_tile(const TileBrush& brush, const CL_Point& pos);
 

Modified: trunk/ruby/flexlay.rb
===================================================================
--- trunk/ruby/flexlay.rb	2005-08-15 11:47:55 UTC (rev 600)
+++ trunk/ruby/flexlay.rb	2005-08-17 00:55:27 UTC (rev 601)
@@ -1,4 +1,15 @@
 class TilemapLayer
+  alias orig_get_metadata get_metadata
+  alias orig_set_metadata set_metadata
+
+  def set_metadata(data)
+    orig_set_metadata(make_metadata(data))
+  end
+
+  def get_metadata()
+    return get_ruby_object(orig_get_metadata())
+  end
+
   def each(x, y, width, height)
     data = get_data()
     (y..height-1).each{

Modified: trunk/windstille/gui.rb
===================================================================
--- trunk/windstille/gui.rb	2005-08-15 11:47:55 UTC (rev 600)
+++ trunk/windstille/gui.rb	2005-08-17 00:55:27 UTC (rev 601)
@@ -55,18 +55,18 @@
     @button_panel.items["redo"].disable()
 
     @layer_menu = Menu.new(CL_Point.new(32*15+2, 54), @gui.get_component())
-    @layer_menu.add_item($mysprite, "Show all",          proc{ show_all() })
-    @layer_menu.add_item($mysprite, "Show current",      proc{ show_current() })
-    @layer_menu.add_item($mysprite, "Show only current", proc{ show_only_current() })
+    @layer_menu.add_item("Show all",          proc{ show_all() })
+    @layer_menu.add_item("Show current",      proc{ show_current() })
+    @layer_menu.add_item("Show only current", proc{ show_only_current() })
     
     @toolbar = ButtonPanel.new_from_spec(0, 23+33, 33, 32*4+2, false, $toolbar_spec, @gui.get_component)
     @menu    = components.get('menubar').component
 
     # FIXME: Having position in the Menus here is EXTREMLY ugly
     @tilegroup_menu = Menu.new(CL_Point.new(35*15+2, 54), @gui.get_component())
-    @tilegroup_menu.add_item($mysprite, "All Tiles", proc{@tileselector.set_tiles($tileset.get_tiles())})
+    @tilegroup_menu.add_item("All Tiles", proc{@tileselector.set_tiles($tileset.get_tiles())})
     $tileset.tilegroups.each { |tilegroup|
-      @tilegroup_menu.add_item($mysprite, tilegroup.name, proc{@tileselector.set_tiles(tilegroup.tiles)})
+      @tilegroup_menu.add_item(tilegroup.name, proc{@tileselector.set_tiles(tilegroup.tiles)})
     }
 
     @tileselector = components.get('tileselector').component

Modified: trunk/windstille/windstille.rb
===================================================================
--- trunk/windstille/windstille.rb	2005-08-15 11:47:55 UTC (rev 600)
+++ trunk/windstille/windstille.rb	2005-08-17 00:55:27 UTC (rev 601)
@@ -52,9 +52,6 @@
 
 $controller = Controller.new()
 
-$mysprite = make_sprite("../data/images/icons16/stock_paste-16.png")
-
-             
 $resources = CL_ResourceManager.new("../data/flexlay.xml")
 
 $tileset = Tileset.new(32)



From grumbel at berlios.de  Wed Aug 17 14:04:10 2005
From: grumbel at berlios.de (Ingo Ruhnke at BerliOS)
Date: Wed, 17 Aug 2005 14:04:10 +0200
Subject: [Flexlay-commit] r602 - in trunk: ruby windstille
Message-ID: <200508171204.j7HC4AVW010403@sheep.berlios.de>

Author: grumbel
Date: 2005-08-17 14:04:04 +0200 (Wed, 17 Aug 2005)
New Revision: 602

Modified:
   trunk/ruby/flexlay.rb
   trunk/windstille/gui.rb
   trunk/windstille/gui_specs.rb
   trunk/windstille/sector.rb
   trunk/windstille/windstille.rb
Log:
- added some editing for layer properties


Modified: trunk/ruby/flexlay.rb
===================================================================
--- trunk/ruby/flexlay.rb	2005-08-17 00:55:27 UTC (rev 601)
+++ trunk/ruby/flexlay.rb	2005-08-17 12:04:04 UTC (rev 602)
@@ -1,3 +1,5 @@
+puts "This line must only apear once!"
+
 class TilemapLayer
   alias orig_get_metadata get_metadata
   alias orig_set_metadata set_metadata

Modified: trunk/windstille/gui.rb
===================================================================
--- trunk/windstille/gui.rb	2005-08-17 00:55:27 UTC (rev 601)
+++ trunk/windstille/gui.rb	2005-08-17 12:04:04 UTC (rev 602)
@@ -133,7 +133,7 @@
 
     if layer == :foreground then
       @button_panel.items["foreground"].set_down();
-      TilemapLayer.set_current(@workspace.get_map().get_metadata().interactive)
+      TilemapLayer.set_current(@workspace.get_map().get_metadata().foreground)
     else
       @button_panel.items["foreground"].set_up();
     end
@@ -214,6 +214,23 @@
     $gui.workspace.get_map().execute(cmd.to_command());
     return obj
   end
+
+  def layer_properties()
+    tilemap = TilemapLayer.current()
+
+    dialog = GenericDialog.new("Edit Tilemap Properties", @gui.get_component())
+    dialog.add_string("Name: ", tilemap.get_metadata().name)
+    dialog.add_int("XOffset: ", tilemap.get_metadata().x_offset)
+    dialog.add_int("YOffset: ", tilemap.get_metadata().y_offset)
+    dialog.add_int("Z-Pos: ",   tilemap.get_metadata().z_pos)
+
+    dialog.set_callback(proc{|name, x_offset, y_offset, z_pos| 
+                          tilemap.get_metadata().name      = name
+                          tilemap.get_metadata().x_offset = x_offset 
+                          tilemap.get_metadata().y_offset = y_offset 
+                          tilemap.get_metadata().z_pos    = z_pos 
+                        })
+  end
 end
 
 # EOF #

Modified: trunk/windstille/gui_specs.rb
===================================================================
--- trunk/windstille/gui_specs.rb	2005-08-17 00:55:27 UTC (rev 601)
+++ trunk/windstille/gui_specs.rb	2005-08-17 12:04:04 UTC (rev 602)
@@ -60,6 +60,7 @@
   [:icon,       "background",  "../data/images/icons24/background.png",    proc{ $gui.show_layer(:background) }],
   [:icon,       "interactive", "../data/images/icons24/interactive.png",   proc{ $gui.show_layer(:interactive) }],
   [:icon,       "foreground",  "../data/images/icons24/foreground.png",    proc{ $gui.show_layer(:foreground) }],
+  [:icon,       "properties",  "../data/images/icons24/stock_properties.png", proc{ $gui.layer_properties() }],
   [:icon,       "viewprops",   "../data/images/icons24/eye.png",           proc{ $gui.layer_menu.run() }],
   [:seperator],
   [:icon,       "tilegroups",  "../data/images/icons24/eye.png",           proc{ $gui.tilegroup_menu.run() }],

Modified: trunk/windstille/sector.rb
===================================================================
--- trunk/windstille/sector.rb	2005-08-17 00:55:27 UTC (rev 601)
+++ trunk/windstille/sector.rb	2005-08-17 12:04:04 UTC (rev 602)
@@ -17,14 +17,14 @@
 ##  along with this program; if not, write to the Free Software
 ##  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
-class Tilemap
+class TilemapMetadata
   attr_accessor :name, :x_offset, :y_offset, :z_pos
   
-  def initialize()
-    name     = "empty"
-    x_offset = 0
-    y_offset = 0
-    z_pos = 0;
+  def initialize(params = {})
+    @name     = (params[:name] or "")
+    @x_offset = (params[:x_offset] or 0)
+    @y_offset = (params[:y_offset] or 0)
+    @z_pos    = (params[:z_pos] or 0)
   end
 end
 
@@ -51,6 +51,10 @@
     @interactive = TilemapLayer.new($tileset, width, height)
     @foreground  = TilemapLayer.new($tileset, width, height)
     
+    @background.set_metadata(TilemapMetadata.new(:name =>  'background'))
+    @foreground.set_metadata(TilemapMetadata.new(:name =>  'foreground'))
+    @interactive.set_metadata(TilemapMetadata.new(:name => 'interactive'))
+
     @layers = []
     @layers += [@background]
     @layers += [@interactive]
@@ -93,8 +97,12 @@
         
         tilemap = TilemapLayer.new($tileset, width, height)
         tilemap.set_data(get_value_from_tree(["data"], objdata, []))
-        # tilemap.z_pos = get_value_from_tree(["z-pos", "_"],  mydata, 0)
-        
+        tilemap.set_metadata(TilemapMetadata.new(:name  => name,
+                                                 :z_pos => get_value_from_tree(["z-pos", "_"],  objdata, 0),
+                                                 :x_offset => get_value_from_tree(["x-offset", "_"],  objdata, 0),
+                                                 :y_offset => get_value_from_tree(["y-offset", "_"],  objdata, 0)
+                                                 ))
+
         case name 
         when "background"
           @background = tilemap

Modified: trunk/windstille/windstille.rb
===================================================================
--- trunk/windstille/windstille.rb	2005-08-17 00:55:27 UTC (rev 601)
+++ trunk/windstille/windstille.rb	2005-08-17 12:04:04 UTC (rev 602)
@@ -41,8 +41,8 @@
 require "sector.rb"
 require "tileset.rb"
 
-$screen_width  = 400
-$screen_height = 300
+$screen_width  = 640
+$screen_height = 480
 
 ## Init Flexlay itself
 $flexlay = Flexlay.new()



