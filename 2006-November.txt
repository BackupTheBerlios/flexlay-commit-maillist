From grumbel at mail.berlios.de  Sat Nov  4 04:03:03 2006
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Sat, 4 Nov 2006 04:03:03 +0100
Subject: [Flexlay-commit] r686 - in trunk/netbrush: . experimental
Message-ID: <200611040303.kA4333ZX031111@sheep.berlios.de>

Author: grumbel
Date: 2006-11-04 04:03:03 +0100 (Sat, 04 Nov 2006)
New Revision: 686

Added:
   trunk/netbrush/experimental/
   trunk/netbrush/experimental/SConstruct
   trunk/netbrush/experimental/input_device_xinput.cpp
   trunk/netbrush/experimental/input_device_xinput.hpp
   trunk/netbrush/experimental/wacom.cpp
Log:
- some experimental wacom support

Added: trunk/netbrush/experimental/SConstruct
===================================================================
--- trunk/netbrush/experimental/SConstruct	2006-10-30 21:51:04 UTC (rev 685)
+++ trunk/netbrush/experimental/SConstruct	2006-11-04 03:03:03 UTC (rev 686)
@@ -0,0 +1,10 @@
+env = Environment()
+env.ParseConfig('sdl-config --cflags --libs')
+env['CXXFLAGS'] += ['-O0', '-Wall', '-g']
+env['LIBS'] += ['Xi']
+env.Program('wacom', ['wacom.cpp',
+                      'input_device_xinput.cpp'])
+
+# EOF #
+
+

Added: trunk/netbrush/experimental/input_device_xinput.cpp
===================================================================
--- trunk/netbrush/experimental/input_device_xinput.cpp	2006-10-30 21:51:04 UTC (rev 685)
+++ trunk/netbrush/experimental/input_device_xinput.cpp	2006-11-04 03:03:03 UTC (rev 686)
@@ -0,0 +1,425 @@
+/*
+**  ClanLib SDK
+**  Copyright (c) 1997-2005 The ClanLib Team
+**
+**  This software is provided 'as-is', without any express or implied
+**  warranty.  In no event will the authors be held liable for any damages
+**  arising from the use of this software.
+**
+**  Permission is granted to anyone to use this software for any purpose,
+**  including commercial applications, and to alter it and redistribute it
+**  freely, subject to the following restrictions:
+**
+**  1. The origin of this software must not be misrepresented; you must not
+**     claim that you wrote the original software. If you use this software
+**     in a product, an acknowledgment in the product documentation would be
+**     appreciated but is not required.
+**  2. Altered source versions must be plainly marked as such, and must not be
+**     misrepresented as being the original software.
+**  3. This notice may not be removed or altered from any source distribution.
+**
+**  Note: Some of the libraries ClanLib may link to may have additional
+**  requirements or restrictions.
+**
+**  File Author(s):
+**
+**    Magnus Norddahl
+**    (if your name is missing here, please add it)
+*/
+
+#include <iostream>
+#include "input_device_xinput.hpp"
+#include "SDL.h"
+#include "SDL_syswm.h"
+
+extern SDL_SysWMinfo syswm;
+
+#define INVALID_EVENT_TYPE	-1
+
+CL_InputDevice_XInput::CL_InputDevice_XInput()
+	: 
+	  absolute(false),
+	  num_keys   (0),
+	  motion_type        (INVALID_EVENT_TYPE),
+	  button_press_type  (INVALID_EVENT_TYPE),
+	  button_release_type(INVALID_EVENT_TYPE),
+	  key_press_type     (INVALID_EVENT_TYPE),
+	  key_release_type   (INVALID_EVENT_TYPE),
+	  proximity_in_type  (INVALID_EVENT_TYPE),
+	  proximity_out_type (INVALID_EVENT_TYPE)
+
+{
+	name = "gstylus";
+	XDeviceInfo* info = find_device_info(syswm.info.x11.display, name.c_str(), True);
+	if (!info)
+		std::cout << "CL_InputDeviceXInput Error: Couldn't find device: " << name << std::endl;
+	name = info->name;
+	get_info(info);
+
+  if (!register_events(syswm.info.x11.display, info, name.c_str(), True))
+  {
+	  std::cout << "debug" << "CL_InputDeviceXInput: Couldn't find device: " << name << std::endl;
+  }
+  else
+  {
+	  //slot_xevent = owner->sig_unknown_xevent.connect(this, &CL_InputDevice_XInput::on_xevent);
+  }
+}
+
+CL_InputDevice_XInput::~CL_InputDevice_XInput()
+{
+	
+}
+
+void
+CL_InputDevice_XInput::get_info(XDeviceInfo	*info)
+{
+	int			i,j;
+	XAnyClassPtr	any;
+	XKeyInfoPtr		k;
+	XButtonInfoPtr	b;
+	XValuatorInfoPtr	v;
+	XAxisInfoPtr	a;
+
+	printf("\"%s\"\tid=%ld\t[%s]\n", info->name, info->id,
+			 (info->use == IsXExtensionDevice) ? "XExtensionDevice" :
+			 ((info->use == IsXPointer) ? "XPointer" : "XKeyboard"));
+
+	if (info->num_classes > 0) {
+		any = (XAnyClassPtr) (info->inputclassinfo);
+		for (i=0; i<info->num_classes; i++) {
+			switch (any->c_class) {
+			case KeyClass:
+				k = (XKeyInfoPtr) any;
+				printf("\tNum_keys is %d\n", k->num_keys);
+				printf("\tMin_keycode is %d\n", k->min_keycode);
+				printf("\tMax_keycode is %d\n", k->max_keycode);
+
+				num_keys = k->num_keys;
+				break;
+
+			case ButtonClass:
+				b = (XButtonInfoPtr) any;
+				printf("\tNum_buttons is %d\n", b->num_buttons);
+
+				buttons.resize(b->num_buttons, false);
+				break;
+
+			case ValuatorClass:
+				v = (XValuatorInfoPtr) any;
+				a = (XAxisInfoPtr) ((char *) v + 
+										  sizeof (XValuatorInfo));
+
+				printf("\tNum_axes is %d\n", v->num_axes);
+				printf("\tMode is %s\n", (v->mode == Absolute) ? "Absolute" : "Relative");
+				printf("\tMotion_buffer is %ld\n", v->motion_buffer);
+
+				absolute = (v->mode == Absolute);
+
+				for (j=0; j<v->num_axes; j++, a++) 
+				{
+					printf("\tAxis %d :\n", j);
+					printf("\t\tMin_value is %d\n", a->min_value);
+					printf("\t\tMax_value is %d\n", a->max_value);
+					printf ("\t\tResolution is %d\n", a->resolution);
+					
+					axis.push_back(AxisInfo(a->min_value, a->max_value, a->resolution));
+				}
+
+				break;
+		
+			default:
+				printf ("unknown class\n");
+			}
+			any = (XAnyClassPtr) ((char *) any + any->length);
+		}
+	}
+}
+
+XDeviceInfo*
+CL_InputDevice_XInput::find_device_info(Display	*display,
+													 const char		*name,
+													 Bool		only_extended)
+{
+	// FIXME: Not really needed could simply pass XDeviceInfo to the
+	// constructor, might however make a nicer interface
+	XDeviceInfo	*devices;
+	int		loop;
+	int		num_devices;
+	int		len = strlen(name);
+	Bool     is_id = True;
+	XID		id = 0;
+    
+	for(loop=0; loop<len; loop++) {
+		if (!isdigit(name[loop])) {
+			is_id = False;
+			break;
+		}
+	}
+
+	if (is_id) {
+		id = atoi(name);
+	}
+    
+	devices = XListInputDevices(display, &num_devices);
+
+	for(loop=0; loop<num_devices; loop++) {
+		if ((!only_extended || (devices[loop].use == IsXExtensionDevice)) &&
+			 ((!is_id && strcmp(devices[loop].name, name) == 0) ||
+			  (is_id && devices[loop].id == id))) {
+			return &devices[loop];
+		}
+	}
+	return NULL;
+}
+
+int
+CL_InputDevice_XInput::register_events(Display		*dpy,
+													XDeviceInfo	*info,
+													const char		*dev_name,
+													Bool		handle_proximity)
+{
+	int             number = 0;	/* number of events registered */
+	XEventClass     event_list[7];
+	int             i;
+	XDevice         *device;
+	Window          root_win;
+	unsigned long   screen;
+	XInputClassInfo *ip;
+
+	screen   = DefaultScreen(dpy);
+	root_win = RootWindow(dpy, screen);
+
+	device = XOpenDevice(dpy, info->id);
+
+	if (!device) {
+		fprintf(stderr, "unable to open device %s\n", dev_name);
+		return 0;
+	}
+    
+	if (device->num_classes > 0) {
+		for (ip = device->classes, i=0; i<info->num_classes; ip++, i++) {
+			switch (ip->input_class) {
+			case KeyClass:
+				DeviceKeyPress  (device, key_press_type,   event_list[number]); number++;
+				DeviceKeyRelease(device, key_release_type, event_list[number]); number++;
+				break;
+
+			case ButtonClass:
+				DeviceButtonPress  (device, button_press_type,   event_list[number]); number++;
+				DeviceButtonRelease(device, button_release_type, event_list[number]); number++;
+				break;
+
+			case ValuatorClass:
+				DeviceMotionNotify(device, motion_type, event_list[number]); number++;
+				if (handle_proximity) {
+					ProximityIn (device, proximity_in_type,  event_list[number]); number++;
+					ProximityOut(device, proximity_out_type, event_list[number]); number++;
+				}
+				break;
+		
+			default:
+				fprintf(stderr, "unknown class\n");
+				break;
+			}
+		}
+
+		if (XSelectExtensionEvent(dpy, root_win, event_list, number)) {
+			fprintf(stderr, "error selecting extended events\n");
+			return 0;
+		}
+	}
+
+	//std::cout << "### Registered events: " << number << std::endl;
+	return number;
+}
+
+void
+CL_InputDevice_XInput::on_xevent(XEvent &event)
+{
+	if (0)
+		std::cout << this << " event: " 
+					 << event.type << " Defs: "
+					 << motion_type << " " 
+					 << button_press_type << " " 
+					 << button_release_type << " " 
+					 << key_press_type << " " 
+					 << key_release_type << " " 
+					 << proximity_out_type << " " 
+					 << proximity_in_type << " " 
+					 << std::endl;
+
+	std::vector<AxisInfo> old_axis = axis;
+	std::vector<bool>     old_buttons = buttons;
+
+  	if (event.type == motion_type) 
+	{
+		XDeviceMotionEvent *motion = (XDeviceMotionEvent *) &event;
+
+		//printf("motion ");
+	    
+		for(int loop=0; loop<motion->axes_count; loop++) {
+			//printf("a[%d]=%d ", motion->first_axis + loop, motion->axis_data[loop]);
+			axis[loop + motion->first_axis].pos = motion->axis_data[loop];
+		}
+		//printf("\n");
+	} 
+	else if ((event.type == button_press_type) ||
+				(event.type == button_release_type)) 
+	{
+		int	loop;
+		XDeviceButtonEvent *button = (XDeviceButtonEvent *) &event;
+	    
+		//printf("button %s %d ", (event.type == button_release_type) ? "release" : "press  ", button->button);
+
+		buttons[button->button] = (event.type == button_press_type);
+	    
+		for(loop=0; loop<button->axes_count; loop++) {
+			//printf("a[%d]=%d ", button->first_axis + loop, button->axis_data[loop]);
+			axis[loop + button->first_axis].pos = button->axis_data[loop];
+		}
+		//printf("\n");
+	} 
+	else if ((event.type == key_press_type) ||
+				(event.type == key_release_type)) 
+	{
+		int	loop;
+		XDeviceKeyEvent *key = (XDeviceKeyEvent *) &event;
+	    
+		//printf("key %s %d ", (event.type == key_release_type) ? "release" : "press  ", key->keycode);
+	    
+		for(loop=0; loop<key->axes_count; loop++) {
+			//printf("a[%d]=%d ", key->first_axis + loop, key->axis_data[loop]);
+			axis[loop + key->first_axis].pos = key->axis_data[loop];
+		}
+		//printf("\n");
+	}
+	else if ((event.type == proximity_out_type) ||
+				(event.type == proximity_in_type))
+	{
+		int	loop;
+		XProximityNotifyEvent *prox = (XProximityNotifyEvent *) &event;
+	    
+		//printf("proximity %s ", (event.type == proximity_in_type) ? "in " : "out");
+	    
+		for(loop=0; loop<prox->axes_count; loop++) {
+			//printf("a[%d]=%d ", prox->first_axis + loop, prox->axis_data[loop]);
+			axis[loop + prox->first_axis].pos = prox->axis_data[loop];
+		}
+		//printf("\n");
+	}
+	else 
+	{
+		//printf("CL_InputDevice_XInput: what's that %d\n", event.type);
+	}
+
+
+	for (std::vector<bool>::size_type i = 0; i < buttons.size(); ++i)
+	{
+		if (buttons[i] != old_buttons[i])
+		{
+			//CL_InputEvent ie;
+			
+			//ie.id           = i;
+			//ie.type         = CL_InputEvent::pressed;
+			//ie.device       = CL_InputDevice(this);
+			//ie.mouse_pos    = CL_Point(0, 0);
+			//ie.axis_pos     = 0;
+			//ie.repeat_count = false;
+
+			//sig_axis_move(ie);
+			std::cout << "Wacom: Button" << std::endl;
+		}
+	}
+
+	for (std::vector<AxisInfo>::size_type i = 0; i < axis.size(); ++i)
+	{
+		if (axis[i].pos != old_axis[i].pos)
+		{
+//			CL_InputEvent ie;
+			//		
+//			ie.id           = i;
+//			ie.type         = CL_InputEvent::axis_moved;
+//			ie.device       = CL_InputDevice(this);
+//			ie.mouse_pos    = CL_Point(0, 0);
+//			ie.axis_pos     = get_axis(i);
+			//ie.repeat_count = false;
+
+			//sig_axis_move(ie);
+
+			std::cout << "Wacom: Axis moved " << std::endl;
+		}
+	}
+}
+
+int
+CL_InputDevice_XInput::get_x() const
+{
+	return 0;
+}
+
+int
+CL_InputDevice_XInput::get_y() const
+{
+	return 0;
+}
+
+bool
+CL_InputDevice_XInput::get_keycode(int keycode) const
+{
+	if (keycode >=0 && keycode < int(buttons.size()))
+	{
+		return buttons[keycode];
+	}
+	else
+	{
+		return false;
+	}
+}
+
+std::string
+CL_InputDevice_XInput::get_key_name(int id) const
+{
+	return "button NUM"; // + CL_String::from_int(id);
+}
+
+float
+CL_InputDevice_XInput::get_axis(int index) const
+{
+	if (index >= 0 && index < get_axis_count())
+	{
+		return float(axis[index].pos)/(axis[index].max_value - axis[index].min_value);
+	}
+	else
+	{
+		return 0.0f;
+	}
+}
+
+int
+CL_InputDevice_XInput::get_axis_count() const
+{
+	return axis.size();
+}
+
+std::string
+CL_InputDevice_XInput::get_name() const
+{
+	return name;
+}
+
+std::string
+CL_InputDevice_XInput::get_device_name() const
+{
+	return "xinput:" + name;
+}
+
+int
+CL_InputDevice_XInput::get_button_count() const
+{
+	return buttons.size();
+}
+
+// Local Variables: ***
+// mode: clanlib ***
+// End: ***

Added: trunk/netbrush/experimental/input_device_xinput.hpp
===================================================================
--- trunk/netbrush/experimental/input_device_xinput.hpp	2006-10-30 21:51:04 UTC (rev 685)
+++ trunk/netbrush/experimental/input_device_xinput.hpp	2006-11-04 03:03:03 UTC (rev 686)
@@ -0,0 +1,144 @@
+/*
+**  ClanLib SDK
+**  Copyright (c) 1997-2005 The ClanLib Team
+**
+**  This software is provided 'as-is', without any express or implied
+**  warranty.  In no event will the authors be held liable for any damages
+**  arising from the use of this software.
+**
+**  Permission is granted to anyone to use this software for any purpose,
+**  including commercial applications, and to alter it and redistribute it
+**  freely, subject to the following restrictions:
+**
+**  1. The origin of this software must not be misrepresented; you must not
+**     claim that you wrote the original software. If you use this software
+**     in a product, an acknowledgment in the product documentation would be
+**     appreciated but is not required.
+**  2. Altered source versions must be plainly marked as such, and must not be
+**     misrepresented as being the original software.
+**  3. This notice may not be removed or altered from any source distribution.
+**
+**  Note: Some of the libraries ClanLib may link to may have additional
+**  requirements or restrictions.
+**
+**  File Author(s):
+**
+**    Magnus Norddahl
+**    (if your name is missing here, please add it)
+*/
+
+#ifndef header_input_device_xinput
+#define header_input_device_xinput
+
+#include <vector>
+#include "../src/math/point.hpp"
+#include <X11/Xlib.h>
+#include <X11/Xutil.h>
+#include <X11/extensions/XInput.h>
+
+class CL_DisplayWindow_OpenGL;
+
+class CL_InputDevice_XInput
+{
+	//!Construction:
+public:
+	CL_InputDevice_XInput();
+
+	virtual ~CL_InputDevice_XInput();
+
+	//!Attributes:
+public:
+	//: Returns the x position of the device.
+	virtual int get_x() const;
+
+	//: Returns the y position of the device.
+	virtual int get_y() const;
+
+	//: Returns true if the passed key code is down for this device.
+	virtual bool get_keycode(int keycode) const;
+
+	//: Key name for specified identifier (A, B, C, Space, Enter, Backspace).
+	virtual std::string get_key_name(int id) const;
+
+	//: Returns the the current position of a joystick axis.
+	virtual float get_axis(int index) const;
+
+	//: Returns the number of axes available on this device.
+	virtual int get_axis_count() const;
+
+	//: Returns the name of the device (i.e. 'Microsoft Sidewinder 3D').
+	virtual std::string get_name() const;
+
+	//: Return the hardware id/device for this device (i.e. '/dev/input/js0')
+	virtual std::string get_device_name() const;
+
+	//: Returns the number of buttons available on this device.
+	//- <p>If used on a keyboard, this function returns -1.</p>
+	virtual int get_button_count() const;
+
+	//!Operations:
+public:
+
+	//!Implementation:
+private:
+	int register_events(Display		*dpy,
+							  XDeviceInfo	*info,
+							  const char		*dev_name,
+							  Bool		handle_proximity);
+
+	XDeviceInfo* find_device_info(Display	*display,
+											const char		*name,
+											Bool		only_extended);
+
+	void get_info(XDeviceInfo	*info);
+
+	void on_xevent(XEvent &event);
+	
+	void received_mouse_input(XEvent &event);
+	void received_mouse_move(XEvent &event);
+	
+	CL_DisplayWindow_OpenGL *owner;
+	std::string name;
+	//CL_Slot slot_xevent;
+
+	//: true: Device is a absolute pointing device, false: relative
+	bool absolute;
+
+	struct AxisInfo
+	{
+		int min_value;
+		int max_value;
+		int resolution;
+		int pos;
+
+		AxisInfo(int min_value_, int max_value_, int resolution_)
+			: min_value(min_value_), max_value(max_value_), resolution(resolution_), pos(0)
+		{}
+	};
+
+	std::vector<bool> buttons;
+
+	std::vector<AxisInfo> axis;
+
+	int num_keys;	
+	
+	Point mouse_pos;
+	Time time_at_last_press;
+	int last_press_id;
+
+	bool key_states[5];
+
+	int           motion_type;
+	int           button_press_type;
+	int           button_release_type;
+	int           key_press_type;
+	int           key_release_type;
+	int           proximity_in_type;
+	int           proximity_out_type;
+};
+
+#endif
+
+// Local Variables: ***
+// mode: clanlib ***
+// End: ***

Added: trunk/netbrush/experimental/wacom.cpp
===================================================================
--- trunk/netbrush/experimental/wacom.cpp	2006-10-30 21:51:04 UTC (rev 685)
+++ trunk/netbrush/experimental/wacom.cpp	2006-11-04 03:03:03 UTC (rev 686)
@@ -0,0 +1,73 @@
+#include <X11/Xlib.h>
+#include <X11/Xutil.h>
+#include <X11/extensions/XInput.h>
+
+#include <iostream>
+#include "SDL.h"
+#include "SDL_syswm.h"
+#include "input_device_xinput.hpp"
+
+SDL_SysWMinfo syswm;
+
+int main()
+{
+  bool fullscreen = false;
+  int screen_width = 640;
+  int screen_height = 480;
+  SDL_Surface* sdl_screen = NULL;
+
+  if(SDL_Init(SDL_INIT_VIDEO)== -1) {
+    printf("SDL_Init: %s\n", SDL_GetError());
+    exit(1);
+  }
+  atexit(SDL_Quit);
+
+  Uint32 flags = SDL_HWSURFACE;
+  if (fullscreen)
+    flags |= SDL_FULLSCREEN;
+  sdl_screen = SDL_SetVideoMode(screen_width, screen_height, 32, flags); 
+  if (sdl_screen == 0)
+    printf("SDL_SetVideoMode: %s\n", SDL_GetError());
+  SDL_WM_SetCaption("netBrush", "netBrush");
+
+  SDL_VERSION(&syswm.version); // this is important!
+  if (SDL_GetWMInfo(&syswm) == -1)
+    {
+      std::cout << "Couldn't get WM info " << std::endl;
+    }
+
+  syswm.info.x11.lock_func();
+  CL_InputDevice_XInput xinput;
+  syswm.info.x11.unlock_func();
+
+  while(true)
+    {
+      SDL_Event event;
+  
+      while(SDL_PollEvent(&event))
+        {
+          switch(event.type)
+            {
+            case SDL_QUIT:
+              puts("Quitting");
+              exit(0);
+              break;
+
+
+            case SDL_MOUSEBUTTONDOWN:
+              std::cout << "Mouse down: " << int(event.button.button) << std::endl;
+              break;
+
+            case SDL_MOUSEBUTTONUP:
+              std::cout << "Mouse up: " << int(event.button.button) << std::endl;
+              break;
+
+            case SDL_MOUSEMOTION:
+              //std::cout << "Mouse motion: " << event.motion.x << " " << event.motion.y << std::endl;
+              break;
+            }
+        }
+    }
+
+  return 0;
+}



From grumbel at mail.berlios.de  Sat Nov  4 04:21:02 2006
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Sat, 4 Nov 2006 04:21:02 +0100
Subject: [Flexlay-commit] r687 - trunk/netbrush/experimental
Message-ID: <200611040321.kA43L2eP000534@sheep.berlios.de>

Author: grumbel
Date: 2006-11-04 04:21:02 +0100 (Sat, 04 Nov 2006)
New Revision: 687

Modified:
   trunk/netbrush/experimental/input_device_xinput.cpp
   trunk/netbrush/experimental/input_device_xinput.hpp
   trunk/netbrush/experimental/wacom.cpp
Log:
- some experimental wacom support

Modified: trunk/netbrush/experimental/input_device_xinput.cpp
===================================================================
--- trunk/netbrush/experimental/input_device_xinput.cpp	2006-11-04 03:03:03 UTC (rev 686)
+++ trunk/netbrush/experimental/input_device_xinput.cpp	2006-11-04 03:21:02 UTC (rev 687)
@@ -256,10 +256,10 @@
 	{
 		XDeviceMotionEvent *motion = (XDeviceMotionEvent *) &event;
 
-		//printf("motion ");
+		printf("motion ");
 	    
 		for(int loop=0; loop<motion->axes_count; loop++) {
-			//printf("a[%d]=%d ", motion->first_axis + loop, motion->axis_data[loop]);
+			printf("a[%d]=%d ", motion->first_axis + loop, motion->axis_data[loop]);
 			axis[loop + motion->first_axis].pos = motion->axis_data[loop];
 		}
 		//printf("\n");
@@ -270,29 +270,29 @@
 		int	loop;
 		XDeviceButtonEvent *button = (XDeviceButtonEvent *) &event;
 	    
-		//printf("button %s %d ", (event.type == button_release_type) ? "release" : "press  ", button->button);
+		printf("button %s %d ", (event.type == button_release_type) ? "release" : "press  ", button->button);
 
 		buttons[button->button] = (event.type == button_press_type);
 	    
 		for(loop=0; loop<button->axes_count; loop++) {
-			//printf("a[%d]=%d ", button->first_axis + loop, button->axis_data[loop]);
+			printf("a[%d]=%d ", button->first_axis + loop, button->axis_data[loop]);
 			axis[loop + button->first_axis].pos = button->axis_data[loop];
 		}
-		//printf("\n");
+		printf("\n");
 	} 
 	else if ((event.type == key_press_type) ||
 				(event.type == key_release_type)) 
 	{
 		int	loop;
 		XDeviceKeyEvent *key = (XDeviceKeyEvent *) &event;
+	   
+		printf("key %s %d ", (event.type == key_release_type) ? "release" : "press  ", key->keycode);
 	    
-		//printf("key %s %d ", (event.type == key_release_type) ? "release" : "press  ", key->keycode);
-	    
 		for(loop=0; loop<key->axes_count; loop++) {
-			//printf("a[%d]=%d ", key->first_axis + loop, key->axis_data[loop]);
+			printf("a[%d]=%d ", key->first_axis + loop, key->axis_data[loop]);
 			axis[loop + key->first_axis].pos = key->axis_data[loop];
 		}
-		//printf("\n");
+		printf("\n");
 	}
 	else if ((event.type == proximity_out_type) ||
 				(event.type == proximity_in_type))
@@ -300,17 +300,17 @@
 		int	loop;
 		XProximityNotifyEvent *prox = (XProximityNotifyEvent *) &event;
 	    
-		//printf("proximity %s ", (event.type == proximity_in_type) ? "in " : "out");
+		printf("proximity %s ", (event.type == proximity_in_type) ? "in " : "out");
 	    
 		for(loop=0; loop<prox->axes_count; loop++) {
-			//printf("a[%d]=%d ", prox->first_axis + loop, prox->axis_data[loop]);
+			printf("a[%d]=%d ", prox->first_axis + loop, prox->axis_data[loop]);
 			axis[loop + prox->first_axis].pos = prox->axis_data[loop];
 		}
-		//printf("\n");
+		printf("\n");
 	}
 	else 
 	{
-		//printf("CL_InputDevice_XInput: what's that %d\n", event.type);
+		printf("CL_InputDevice_XInput: what's that %d\n", event.type);
 	}
 
 

Modified: trunk/netbrush/experimental/input_device_xinput.hpp
===================================================================
--- trunk/netbrush/experimental/input_device_xinput.hpp	2006-11-04 03:03:03 UTC (rev 686)
+++ trunk/netbrush/experimental/input_device_xinput.hpp	2006-11-04 03:21:02 UTC (rev 687)
@@ -91,9 +91,9 @@
 											Bool		only_extended);
 
 	void get_info(XDeviceInfo	*info);
-
+public:
 	void on_xevent(XEvent &event);
-	
+private:
 	void received_mouse_input(XEvent &event);
 	void received_mouse_move(XEvent &event);
 	

Modified: trunk/netbrush/experimental/wacom.cpp
===================================================================
--- trunk/netbrush/experimental/wacom.cpp	2006-11-04 03:03:03 UTC (rev 686)
+++ trunk/netbrush/experimental/wacom.cpp	2006-11-04 03:21:02 UTC (rev 687)
@@ -40,10 +40,12 @@
   CL_InputDevice_XInput xinput;
   syswm.info.x11.unlock_func();
 
+  SDL_EventState(SDL_SYSWMEVENT, SDL_ENABLE);
+
   while(true)
     {
       SDL_Event event;
-  
+      
       while(SDL_PollEvent(&event))
         {
           switch(event.type)
@@ -65,6 +67,11 @@
             case SDL_MOUSEMOTION:
               //std::cout << "Mouse motion: " << event.motion.x << " " << event.motion.y << std::endl;
               break;
+
+            case SDL_SYSWMEVENT:
+              std::cout << "Sysevent" << std::endl;
+              xinput.on_xevent(event.syswm.msg->event.xevent);
+              break;
             }
         }
     }



From grumbel at mail.berlios.de  Sat Nov  4 19:03:47 2006
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Sat, 4 Nov 2006 19:03:47 +0100
Subject: [Flexlay-commit] r688 - trunk/netbrush/experimental
Message-ID: <200611041803.kA4I3lOo010476@sheep.berlios.de>

Author: grumbel
Date: 2006-11-04 19:03:46 +0100 (Sat, 04 Nov 2006)
New Revision: 688

Modified:
   trunk/netbrush/experimental/input_device_xinput.cpp
   trunk/netbrush/experimental/input_device_xinput.hpp
   trunk/netbrush/experimental/wacom.cpp
Log:
- some cleanup

Modified: trunk/netbrush/experimental/input_device_xinput.cpp
===================================================================
--- trunk/netbrush/experimental/input_device_xinput.cpp	2006-11-04 03:21:02 UTC (rev 687)
+++ trunk/netbrush/experimental/input_device_xinput.cpp	2006-11-04 18:03:46 UTC (rev 688)
@@ -1,30 +1,24 @@
-/*
-**  ClanLib SDK
-**  Copyright (c) 1997-2005 The ClanLib Team
+/*  $Id$
+**            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This software is provided 'as-is', without any express or implied
-**  warranty.  In no event will the authors be held liable for any damages
-**  arising from the use of this software.
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
 **
-**  Permission is granted to anyone to use this software for any purpose,
-**  including commercial applications, and to alter it and redistribute it
-**  freely, subject to the following restrictions:
-**
-**  1. The origin of this software must not be misrepresented; you must not
-**     claim that you wrote the original software. If you use this software
-**     in a product, an acknowledgment in the product documentation would be
-**     appreciated but is not required.
-**  2. Altered source versions must be plainly marked as such, and must not be
-**     misrepresented as being the original software.
-**  3. This notice may not be removed or altered from any source distribution.
-**
-**  Note: Some of the libraries ClanLib may link to may have additional
-**  requirements or restrictions.
-**
-**  File Author(s):
-**
-**    Magnus Norddahl
-**    (if your name is missing here, please add it)
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
 */
 
 #include <iostream>
@@ -32,394 +26,421 @@
 #include "SDL.h"
 #include "SDL_syswm.h"
 
-extern SDL_SysWMinfo syswm;
+/*
+  static void print_bits(unsigned int n)
+  {
+  int i;
+  for(i = 31; i >= 0; --i)
+  {
+  if (i == 29)
+  putchar(' ');
 
+  if (i == 21)
+  putchar(' ');
+
+  if (n & (1 << i))
+  putchar('1');
+  else
+  putchar('0');
+  }
+  putchar(' ');
+  }
+*/
+
 #define INVALID_EVENT_TYPE	-1
+#define verbose true
 
-CL_InputDevice_XInput::CL_InputDevice_XInput()
-	: 
-	  absolute(false),
-	  num_keys   (0),
-	  motion_type        (INVALID_EVENT_TYPE),
-	  button_press_type  (INVALID_EVENT_TYPE),
-	  button_release_type(INVALID_EVENT_TYPE),
-	  key_press_type     (INVALID_EVENT_TYPE),
-	  key_release_type   (INVALID_EVENT_TYPE),
-	  proximity_in_type  (INVALID_EVENT_TYPE),
-	  proximity_out_type (INVALID_EVENT_TYPE)
+InputDevice_XInput::InputDevice_XInput(Display* dpy, const std::string& name_)
+  : name(name_),
+    absolute(false),
+    num_keys   (0),
+    motion_type        (INVALID_EVENT_TYPE),
+    button_press_type  (INVALID_EVENT_TYPE),
+    button_release_type(INVALID_EVENT_TYPE),
+    key_press_type     (INVALID_EVENT_TYPE),
+    key_release_type   (INVALID_EVENT_TYPE),
+    proximity_in_type  (INVALID_EVENT_TYPE),
+    proximity_out_type (INVALID_EVENT_TYPE)
 
 {
-	name = "gstylus";
-	XDeviceInfo* info = find_device_info(syswm.info.x11.display, name.c_str(), True);
-	if (!info)
-		std::cout << "CL_InputDeviceXInput Error: Couldn't find device: " << name << std::endl;
-	name = info->name;
-	get_info(info);
+  XDeviceInfo* info = find_device_info(dpy, name.c_str(), True);
+  if (!info)
+    std::cout << "InputDeviceXInput Error: Couldn't find device: " << name << std::endl;
+  get_info(info);
 
-  if (!register_events(syswm.info.x11.display, info, name.c_str(), True))
-  {
-	  std::cout << "debug" << "CL_InputDeviceXInput: Couldn't find device: " << name << std::endl;
-  }
+  if (!register_events(dpy, info, name.c_str(), True))
+    {
+      std::cout << "debug" << "InputDeviceXInput: Couldn't find device: " << name << std::endl;
+    }
   else
-  {
-	  //slot_xevent = owner->sig_unknown_xevent.connect(this, &CL_InputDevice_XInput::on_xevent);
-  }
+    {
+      //slot_xevent = owner->sig_unknown_xevent.connect(this, &InputDevice_XInput::on_xevent);
+    }
 }
 
-CL_InputDevice_XInput::~CL_InputDevice_XInput()
+InputDevice_XInput::~InputDevice_XInput()
 {
 	
 }
 
 void
-CL_InputDevice_XInput::get_info(XDeviceInfo	*info)
+InputDevice_XInput::get_info(XDeviceInfo	*info)
 {
-	int			i,j;
-	XAnyClassPtr	any;
-	XKeyInfoPtr		k;
-	XButtonInfoPtr	b;
-	XValuatorInfoPtr	v;
-	XAxisInfoPtr	a;
+  int			i,j;
+  XAnyClassPtr	any;
+  XKeyInfoPtr		k;
+  XButtonInfoPtr	b;
+  XValuatorInfoPtr	v;
+  XAxisInfoPtr	a;
 
-	printf("\"%s\"\tid=%ld\t[%s]\n", info->name, info->id,
-			 (info->use == IsXExtensionDevice) ? "XExtensionDevice" :
-			 ((info->use == IsXPointer) ? "XPointer" : "XKeyboard"));
+  printf("\"%s\"\tid=%ld\t[%s]\n", info->name, info->id,
+         (info->use == IsXExtensionDevice) ? "XExtensionDevice" :
+         ((info->use == IsXPointer) ? "XPointer" : "XKeyboard"));
 
-	if (info->num_classes > 0) {
-		any = (XAnyClassPtr) (info->inputclassinfo);
-		for (i=0; i<info->num_classes; i++) {
-			switch (any->c_class) {
-			case KeyClass:
-				k = (XKeyInfoPtr) any;
-				printf("\tNum_keys is %d\n", k->num_keys);
-				printf("\tMin_keycode is %d\n", k->min_keycode);
-				printf("\tMax_keycode is %d\n", k->max_keycode);
+  if (info->num_classes > 0) {
+    any = (XAnyClassPtr) (info->inputclassinfo);
+    for (i=0; i<info->num_classes; i++) {
+      switch (any->c_class) {
+      case KeyClass:
+        k = (XKeyInfoPtr) any;
+        printf("\tNum_keys is %d\n",    k->num_keys);
+        printf("\tMin_keycode is %d\n", k->min_keycode);
+        printf("\tMax_keycode is %d\n", k->max_keycode);
 
-				num_keys = k->num_keys;
-				break;
+        num_keys = k->num_keys;
+        break;
 
-			case ButtonClass:
-				b = (XButtonInfoPtr) any;
-				printf("\tNum_buttons is %d\n", b->num_buttons);
+      case ButtonClass:
+        b = (XButtonInfoPtr) any;
+        printf("\tNum_buttons is %d\n", b->num_buttons);
 
-				buttons.resize(b->num_buttons, false);
-				break;
+        buttons.resize(b->num_buttons, false);
+        break;
 
-			case ValuatorClass:
-				v = (XValuatorInfoPtr) any;
-				a = (XAxisInfoPtr) ((char *) v + 
-										  sizeof (XValuatorInfo));
+      case ValuatorClass:
+        v = (XValuatorInfoPtr) any;
+        a = (XAxisInfoPtr) ((char *) v + 
+                            sizeof (XValuatorInfo));
 
-				printf("\tNum_axes is %d\n", v->num_axes);
-				printf("\tMode is %s\n", (v->mode == Absolute) ? "Absolute" : "Relative");
-				printf("\tMotion_buffer is %ld\n", v->motion_buffer);
+        printf("\tNum_axes is %d\n", v->num_axes);
+        printf("\tMode is %s\n", (v->mode == Absolute) ? "Absolute" : "Relative");
+        printf("\tMotion_buffer is %ld\n", v->motion_buffer);
 
-				absolute = (v->mode == Absolute);
+        absolute = (v->mode == Absolute);
 
-				for (j=0; j<v->num_axes; j++, a++) 
-				{
-					printf("\tAxis %d :\n", j);
-					printf("\t\tMin_value is %d\n", a->min_value);
-					printf("\t\tMax_value is %d\n", a->max_value);
-					printf ("\t\tResolution is %d\n", a->resolution);
+        for (j=0; j<v->num_axes; j++, a++) 
+          {
+            printf("\tAxis %d :\n", j);
+            printf("\t\tMin_value is %d\n", a->min_value);
+            printf("\t\tMax_value is %d\n", a->max_value);
+            printf ("\t\tResolution is %d\n", a->resolution);
 					
-					axis.push_back(AxisInfo(a->min_value, a->max_value, a->resolution));
-				}
+            axis.push_back(AxisInfo(a->min_value, a->max_value, a->resolution));
+          }
 
-				break;
+        break;
 		
-			default:
-				printf ("unknown class\n");
-			}
-			any = (XAnyClassPtr) ((char *) any + any->length);
-		}
-	}
+      default:
+        printf ("unknown class\n");
+      }
+      any = (XAnyClassPtr) ((char *) any + any->length);
+    }
+  }
 }
 
 XDeviceInfo*
-CL_InputDevice_XInput::find_device_info(Display	*display,
-													 const char		*name,
-													 Bool		only_extended)
+InputDevice_XInput::find_device_info(Display	*display,
+                                     const char	*name,
+                                     Bool	only_extended)
 {
-	// FIXME: Not really needed could simply pass XDeviceInfo to the
-	// constructor, might however make a nicer interface
-	XDeviceInfo	*devices;
-	int		loop;
-	int		num_devices;
-	int		len = strlen(name);
-	Bool     is_id = True;
-	XID		id = 0;
+  // FIXME: Not really needed could simply pass XDeviceInfo to the
+  // constructor, might however make a nicer interface
+  XDeviceInfo	*devices;
+  int		loop;
+  int		num_devices;
+  int		len = strlen(name);
+  Bool     is_id = True;
+  XID		id = 0;
     
-	for(loop=0; loop<len; loop++) {
-		if (!isdigit(name[loop])) {
-			is_id = False;
-			break;
-		}
-	}
+  for(loop=0; loop<len; loop++) {
+    if (!isdigit(name[loop])) {
+      is_id = False;
+      break;
+    }
+  }
 
-	if (is_id) {
-		id = atoi(name);
-	}
+  if (is_id) {
+    id = atoi(name);
+  }
     
-	devices = XListInputDevices(display, &num_devices);
+  devices = XListInputDevices(display, &num_devices);
 
-	for(loop=0; loop<num_devices; loop++) {
-		if ((!only_extended || (devices[loop].use == IsXExtensionDevice)) &&
-			 ((!is_id && strcmp(devices[loop].name, name) == 0) ||
-			  (is_id && devices[loop].id == id))) {
-			return &devices[loop];
-		}
-	}
-	return NULL;
+  for(loop=0; loop<num_devices; loop++) {
+    if ((!only_extended || (devices[loop].use == IsXExtensionDevice)) &&
+        ((!is_id && strcmp(devices[loop].name, name) == 0) ||
+         (is_id && devices[loop].id == id))) {
+      return &devices[loop];
+    }
+  }
+  return NULL;
 }
 
 int
-CL_InputDevice_XInput::register_events(Display		*dpy,
-													XDeviceInfo	*info,
-													const char		*dev_name,
-													Bool		handle_proximity)
+InputDevice_XInput::register_events(Display		*dpy,
+                                    XDeviceInfo	*info,
+                                    const char		*dev_name,
+                                    Bool		handle_proximity)
 {
-	int             number = 0;	/* number of events registered */
-	XEventClass     event_list[7];
-	int             i;
-	XDevice         *device;
-	Window          root_win;
-	unsigned long   screen;
-	XInputClassInfo *ip;
+  int             number = 0;	/* number of events registered */
+  XEventClass     event_list[7];
+  int             i;
+  XDevice         *device;
+  Window          root_win;
+  unsigned long   screen;
+  XInputClassInfo *ip;
 
-	screen   = DefaultScreen(dpy);
-	root_win = RootWindow(dpy, screen);
+  screen   = DefaultScreen(dpy);
+  root_win = RootWindow(dpy, screen);
 
-	device = XOpenDevice(dpy, info->id);
+  device = XOpenDevice(dpy, info->id);
 
-	if (!device) {
-		fprintf(stderr, "unable to open device %s\n", dev_name);
-		return 0;
-	}
+  if (!device) {
+    fprintf(stderr, "unable to open device %s\n", dev_name);
+    return 0;
+  }
     
-	if (device->num_classes > 0) {
-		for (ip = device->classes, i=0; i<info->num_classes; ip++, i++) {
-			switch (ip->input_class) {
-			case KeyClass:
-				DeviceKeyPress  (device, key_press_type,   event_list[number]); number++;
-				DeviceKeyRelease(device, key_release_type, event_list[number]); number++;
-				break;
+  if (device->num_classes > 0) 
+    {
+      for (ip = device->classes, i=0; i<info->num_classes; ip++, i++) 
+        {
+          switch (ip->input_class) {
+          case KeyClass:
+            DeviceKeyPress  (device, key_press_type,   event_list[number]); number++;
+            DeviceKeyRelease(device, key_release_type, event_list[number]); number++;
+            break;
 
-			case ButtonClass:
-				DeviceButtonPress  (device, button_press_type,   event_list[number]); number++;
-				DeviceButtonRelease(device, button_release_type, event_list[number]); number++;
-				break;
+          case ButtonClass:
+            DeviceButtonPress  (device, button_press_type,   event_list[number]); number++;
+            DeviceButtonRelease(device, button_release_type, event_list[number]); number++;
+            break;
 
-			case ValuatorClass:
-				DeviceMotionNotify(device, motion_type, event_list[number]); number++;
-				if (handle_proximity) {
-					ProximityIn (device, proximity_in_type,  event_list[number]); number++;
-					ProximityOut(device, proximity_out_type, event_list[number]); number++;
-				}
-				break;
+          case ValuatorClass:
+            DeviceMotionNotify(device, motion_type, event_list[number]); number++;
+            if (handle_proximity) {
+              ProximityIn (device, proximity_in_type,  event_list[number]); number++;
+              ProximityOut(device, proximity_out_type, event_list[number]); number++;
+            }
+            break;
 		
-			default:
-				fprintf(stderr, "unknown class\n");
-				break;
-			}
-		}
+          default:
+            fprintf(stderr, "unknown class\n");
+            break;
+          }
+        }
 
-		if (XSelectExtensionEvent(dpy, root_win, event_list, number)) {
-			fprintf(stderr, "error selecting extended events\n");
-			return 0;
-		}
-	}
+      if (XSelectExtensionEvent(dpy, root_win, event_list, number)) 
+        {
+          fprintf(stderr, "error selecting extended events\n");
+          return 0;
+        }
+    }
 
-	//std::cout << "### Registered events: " << number << std::endl;
-	return number;
+  //std::cout << "### Registered events: " << number << std::endl;
+  return number;
 }
 
 void
-CL_InputDevice_XInput::on_xevent(XEvent &event)
+InputDevice_XInput::on_xevent(XEvent &event)
 {
-	if (0)
-		std::cout << this << " event: " 
-					 << event.type << " Defs: "
-					 << motion_type << " " 
-					 << button_press_type << " " 
-					 << button_release_type << " " 
-					 << key_press_type << " " 
-					 << key_release_type << " " 
-					 << proximity_out_type << " " 
-					 << proximity_in_type << " " 
-					 << std::endl;
+  if (0)
+    std::cout << this << " event: " 
+              << event.type << " Defs: "
+              << motion_type << " " 
+              << button_press_type << " " 
+              << button_release_type << " " 
+              << key_press_type << " " 
+              << key_release_type << " " 
+              << proximity_out_type << " " 
+              << proximity_in_type << " " 
+              << std::endl;
 
-	std::vector<AxisInfo> old_axis = axis;
-	std::vector<bool>     old_buttons = buttons;
+  std::vector<AxisInfo> old_axis    = axis;
+  std::vector<bool>     old_buttons = buttons;
 
-  	if (event.type == motion_type) 
-	{
-		XDeviceMotionEvent *motion = (XDeviceMotionEvent *) &event;
+  if (event.type == motion_type) 
+    {
+      on_device_motion_event((XDeviceMotionEvent *)&event);
+    } 
+  else if ((event.type == button_press_type) ||
+           (event.type == button_release_type)) 
+    {
+      on_device_button_event((XDeviceButtonEvent *)&event);
+    } 
+  else if ((event.type == key_press_type) ||
+           (event.type == key_release_type)) 
+    {
+      on_device_key_event((XDeviceKeyEvent*)&event);
+    }
+  else if ((event.type == proximity_out_type) ||
+           (event.type == proximity_in_type))
+    {
+      on_proximity_notify_event((XProximityNotifyEvent*)&event);
+    }
+  else 
+    {  // Events that aren't XInput events lang here (focus and stuff)
+      if (verbose) printf("InputDevice_XInput: what's that %d\n", event.type);
+    }
 
-		printf("motion ");
-	    
-		for(int loop=0; loop<motion->axes_count; loop++) {
-			printf("a[%d]=%d ", motion->first_axis + loop, motion->axis_data[loop]);
-			axis[loop + motion->first_axis].pos = motion->axis_data[loop];
-		}
-		//printf("\n");
-	} 
-	else if ((event.type == button_press_type) ||
-				(event.type == button_release_type)) 
-	{
-		int	loop;
-		XDeviceButtonEvent *button = (XDeviceButtonEvent *) &event;
-	    
-		printf("button %s %d ", (event.type == button_release_type) ? "release" : "press  ", button->button);
+  for (std::vector<bool>::size_type i = 0; i < buttons.size(); ++i)
+    {
+      if (buttons[i] != old_buttons[i])
+        {
+          //InputEvent ie;
+			
+          //ie.id           = i;
+          //ie.type         = InputEvent::pressed;
+          //ie.device       = InputDevice(this);
+          //ie.mouse_pos    = Point(0, 0);
+          //ie.axis_pos     = 0;
+          //ie.repeat_count = false;
 
-		buttons[button->button] = (event.type == button_press_type);
-	    
-		for(loop=0; loop<button->axes_count; loop++) {
-			printf("a[%d]=%d ", button->first_axis + loop, button->axis_data[loop]);
-			axis[loop + button->first_axis].pos = button->axis_data[loop];
-		}
-		printf("\n");
-	} 
-	else if ((event.type == key_press_type) ||
-				(event.type == key_release_type)) 
-	{
-		int	loop;
-		XDeviceKeyEvent *key = (XDeviceKeyEvent *) &event;
-	   
-		printf("key %s %d ", (event.type == key_release_type) ? "release" : "press  ", key->keycode);
-	    
-		for(loop=0; loop<key->axes_count; loop++) {
-			printf("a[%d]=%d ", key->first_axis + loop, key->axis_data[loop]);
-			axis[loop + key->first_axis].pos = key->axis_data[loop];
-		}
-		printf("\n");
-	}
-	else if ((event.type == proximity_out_type) ||
-				(event.type == proximity_in_type))
-	{
-		int	loop;
-		XProximityNotifyEvent *prox = (XProximityNotifyEvent *) &event;
-	    
-		printf("proximity %s ", (event.type == proximity_in_type) ? "in " : "out");
-	    
-		for(loop=0; loop<prox->axes_count; loop++) {
-			printf("a[%d]=%d ", prox->first_axis + loop, prox->axis_data[loop]);
-			axis[loop + prox->first_axis].pos = prox->axis_data[loop];
-		}
-		printf("\n");
-	}
-	else 
-	{
-		printf("CL_InputDevice_XInput: what's that %d\n", event.type);
-	}
+          //sig_axis_move(ie);
+          //std::cout << "Wacom: Button" << std::endl;
+        }
+    }
 
+  for (std::vector<AxisInfo>::size_type i = 0; i < axis.size(); ++i)
+    {
+      if (axis[i].pos != old_axis[i].pos)
+        {
+          //			InputEvent ie;
+          //		
+          //			ie.id           = i;
+          //			ie.type         = InputEvent::axis_moved;
+          //			ie.device       = InputDevice(this);
+          //			ie.mouse_pos    = Point(0, 0);
+          //			ie.axis_pos     = get_axis(i);
+          //ie.repeat_count = false;
 
-	for (std::vector<bool>::size_type i = 0; i < buttons.size(); ++i)
-	{
-		if (buttons[i] != old_buttons[i])
-		{
-			//CL_InputEvent ie;
-			
-			//ie.id           = i;
-			//ie.type         = CL_InputEvent::pressed;
-			//ie.device       = CL_InputDevice(this);
-			//ie.mouse_pos    = CL_Point(0, 0);
-			//ie.axis_pos     = 0;
-			//ie.repeat_count = false;
+          //sig_axis_move(ie);
 
-			//sig_axis_move(ie);
-			std::cout << "Wacom: Button" << std::endl;
-		}
-	}
+          //std::cout << "Wacom: Axis moved " << std::endl;
+        }
+    }
+}
 
-	for (std::vector<AxisInfo>::size_type i = 0; i < axis.size(); ++i)
-	{
-		if (axis[i].pos != old_axis[i].pos)
-		{
-//			CL_InputEvent ie;
-			//		
-//			ie.id           = i;
-//			ie.type         = CL_InputEvent::axis_moved;
-//			ie.device       = CL_InputDevice(this);
-//			ie.mouse_pos    = CL_Point(0, 0);
-//			ie.axis_pos     = get_axis(i);
-			//ie.repeat_count = false;
+void
+InputDevice_XInput::on_device_button_event(XDeviceButtonEvent *button)
+{
+  if (verbose) printf("button %s %d ", (button->type == button_release_type) ? "release" : "press  ", button->button);
 
-			//sig_axis_move(ie);
+  buttons[button->button] = (button->type == button_press_type);
+	    
+  for(int loop = 0; loop < button->axes_count; loop++) {
+    if (verbose)  printf("a[%d]=%d ", button->first_axis + loop, button->axis_data[loop]);
+    axis[loop + button->first_axis].pos = button->axis_data[loop];
+  }
+  if (verbose) printf("\n");
+}
 
-			std::cout << "Wacom: Axis moved " << std::endl;
-		}
-	}
+void
+InputDevice_XInput::on_device_key_event(XDeviceKeyEvent* key)
+{   
+  if (verbose) printf("key %s %d ", (key->type == key_release_type) ? "release" : "press  ", key->keycode);
+	    
+  for(int loop = 0; loop < key->axes_count; loop++) 
+    {
+      if (verbose) printf("a[%d]=%d ", key->first_axis + loop, key->axis_data[loop]);
+      axis[loop + key->first_axis].pos = key->axis_data[loop];
+    }
+  if (verbose) printf("\n");
 }
 
-int
-CL_InputDevice_XInput::get_x() const
+void
+InputDevice_XInput::on_device_motion_event(XDeviceMotionEvent* motion)
 {
-	return 0;
+        if (verbose) printf("motion ");
+	    
+      for(int loop=0; loop<motion->axes_count; loop++) {
+        if (loop >= 3)
+          {
+            //printf("a[%d] = ", motion->first_axis + loop);
+            //print_bits(*((unsigned int*)&(motion->axis_data[loop])));
+
+            if (verbose) printf("a[%d] = %8d ", motion->first_axis + loop,
+                                *((short*)&(motion->axis_data[loop]))); // workaround for buggy driver
+          }
+        else
+          {
+            if (verbose) printf("a[%d] = %8d ", motion->first_axis + loop, motion->axis_data[loop]);
+          }
+        axis[loop + motion->first_axis].pos = motion->axis_data[loop];
+      }
+      if (verbose) printf("\n");
+
 }
 
-int
-CL_InputDevice_XInput::get_y() const
+void
+InputDevice_XInput::on_proximity_notify_event(XProximityNotifyEvent* prox)
 {
-	return 0;
+  if (verbose) printf("proximity %s ", (prox->type == proximity_in_type) ? "in " : "out");
+		
+  for(int loop=0; loop < prox->axes_count; loop++)
+    {
+      if (verbose) printf("a[%d]=%d ", prox->first_axis + loop, prox->axis_data[loop]);
+      axis[loop + prox->first_axis].pos = prox->axis_data[loop];
+    }
+  if (verbose) printf("\n");
 }
 
 bool
-CL_InputDevice_XInput::get_keycode(int keycode) const
+InputDevice_XInput::get_keycode(int keycode) const
 {
-	if (keycode >=0 && keycode < int(buttons.size()))
-	{
-		return buttons[keycode];
-	}
-	else
-	{
-		return false;
-	}
+  if (keycode >=0 && keycode < int(buttons.size()))
+    {
+      return buttons[keycode];
+    }
+  else
+    {
+      return false;
+    }
 }
 
-std::string
-CL_InputDevice_XInput::get_key_name(int id) const
-{
-	return "button NUM"; // + CL_String::from_int(id);
-}
-
 float
-CL_InputDevice_XInput::get_axis(int index) const
+InputDevice_XInput::get_axis(int index) const
 {
-	if (index >= 0 && index < get_axis_count())
-	{
-		return float(axis[index].pos)/(axis[index].max_value - axis[index].min_value);
-	}
-	else
-	{
-		return 0.0f;
-	}
+  if (index >= 0 && index < get_axis_count())
+    {
+      return float(axis[index].pos)/(axis[index].max_value - axis[index].min_value);
+    }
+  else
+    {
+      return 0.0f;
+    }
 }
 
 int
-CL_InputDevice_XInput::get_axis_count() const
+InputDevice_XInput::get_axis_count() const
 {
-	return axis.size();
+  return axis.size();
 }
 
 std::string
-CL_InputDevice_XInput::get_name() const
+InputDevice_XInput::get_name() const
 {
-	return name;
+  return name;
 }
 
 std::string
-CL_InputDevice_XInput::get_device_name() const
+InputDevice_XInput::get_device_name() const
 {
-	return "xinput:" + name;
+  return "xinput:" + name;
 }
 
 int
-CL_InputDevice_XInput::get_button_count() const
+InputDevice_XInput::get_button_count() const
 {
-	return buttons.size();
+  return buttons.size();
 }
 
-// Local Variables: ***
-// mode: clanlib ***
-// End: ***
+/* EOF */

Modified: trunk/netbrush/experimental/input_device_xinput.hpp
===================================================================
--- trunk/netbrush/experimental/input_device_xinput.hpp	2006-11-04 03:21:02 UTC (rev 687)
+++ trunk/netbrush/experimental/input_device_xinput.hpp	2006-11-04 18:03:46 UTC (rev 688)
@@ -1,34 +1,28 @@
-/*
-**  ClanLib SDK
-**  Copyright (c) 1997-2005 The ClanLib Team
+/*  $Id$
+**            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This software is provided 'as-is', without any express or implied
-**  warranty.  In no event will the authors be held liable for any damages
-**  arising from the use of this software.
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
 **
-**  Permission is granted to anyone to use this software for any purpose,
-**  including commercial applications, and to alter it and redistribute it
-**  freely, subject to the following restrictions:
-**
-**  1. The origin of this software must not be misrepresented; you must not
-**     claim that you wrote the original software. If you use this software
-**     in a product, an acknowledgment in the product documentation would be
-**     appreciated but is not required.
-**  2. Altered source versions must be plainly marked as such, and must not be
-**     misrepresented as being the original software.
-**  3. This notice may not be removed or altered from any source distribution.
-**
-**  Note: Some of the libraries ClanLib may link to may have additional
-**  requirements or restrictions.
-**
-**  File Author(s):
-**
-**    Magnus Norddahl
-**    (if your name is missing here, please add it)
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
 */
 
-#ifndef header_input_device_xinput
-#define header_input_device_xinput
+#ifndef HEADER_INPUT_DEVICE_XINPUT_HPP
+#define HEADER_INPUT_DEVICE_XINPUT_HPP
 
 #include <vector>
 #include "../src/math/point.hpp"
@@ -36,109 +30,99 @@
 #include <X11/Xutil.h>
 #include <X11/extensions/XInput.h>
 
-class CL_DisplayWindow_OpenGL;
-
-class CL_InputDevice_XInput
+class InputDevice_XInput
 {
-	//!Construction:
+  //!Construction:
 public:
-	CL_InputDevice_XInput();
+  InputDevice_XInput(Display* dpy, const std::string& name);
 
-	virtual ~CL_InputDevice_XInput();
+  virtual ~InputDevice_XInput();
 
-	//!Attributes:
+  //!Attributes:
 public:
-	//: Returns the x position of the device.
-	virtual int get_x() const;
+  //: Returns true if the passed key code is down for this device.
+  virtual bool get_keycode(int keycode) const;
 
-	//: Returns the y position of the device.
-	virtual int get_y() const;
+  //: Returns the the current position of a joystick axis.
+  virtual float get_axis(int index) const;
 
-	//: Returns true if the passed key code is down for this device.
-	virtual bool get_keycode(int keycode) const;
+  //: Returns the number of axes available on this device.
+  virtual int get_axis_count() const;
 
-	//: Key name for specified identifier (A, B, C, Space, Enter, Backspace).
-	virtual std::string get_key_name(int id) const;
+  //: Returns the name of the device (i.e. 'Microsoft Sidewinder 3D').
+  virtual std::string get_name() const;
 
-	//: Returns the the current position of a joystick axis.
-	virtual float get_axis(int index) const;
+  //: Return the hardware id/device for this device (i.e. '/dev/input/js0')
+  virtual std::string get_device_name() const;
 
-	//: Returns the number of axes available on this device.
-	virtual int get_axis_count() const;
+  //: Returns the number of buttons available on this device.
+  //- <p>If used on a keyboard, this function returns -1.</p>
+  virtual int get_button_count() const;
 
-	//: Returns the name of the device (i.e. 'Microsoft Sidewinder 3D').
-	virtual std::string get_name() const;
+  //!Operations:
+public:
 
-	//: Return the hardware id/device for this device (i.e. '/dev/input/js0')
-	virtual std::string get_device_name() const;
+  //!Implementation:
+private:
+  int register_events(Display		*dpy,
+                      XDeviceInfo	*info,
+                      const char		*dev_name,
+                      Bool		handle_proximity);
 
-	//: Returns the number of buttons available on this device.
-	//- <p>If used on a keyboard, this function returns -1.</p>
-	virtual int get_button_count() const;
+  XDeviceInfo* find_device_info(Display	*display,
+                                const char		*name,
+                                Bool		only_extended);
 
-	//!Operations:
+  void get_info(XDeviceInfo	*info);
 public:
+  void on_xevent(XEvent &event);
 
-	//!Implementation:
 private:
-	int register_events(Display		*dpy,
-							  XDeviceInfo	*info,
-							  const char		*dev_name,
-							  Bool		handle_proximity);
+  void on_device_button_event(XDeviceButtonEvent *button);
+  void on_device_key_event(XDeviceKeyEvent* key);
+  void on_device_motion_event(XDeviceMotionEvent* motion);
+  void on_proximity_notify_event(XProximityNotifyEvent* prox);
 
-	XDeviceInfo* find_device_info(Display	*display,
-											const char		*name,
-											Bool		only_extended);
-
-	void get_info(XDeviceInfo	*info);
-public:
-	void on_xevent(XEvent &event);
 private:
-	void received_mouse_input(XEvent &event);
-	void received_mouse_move(XEvent &event);
+  void received_mouse_input(XEvent &event);
+  void received_mouse_move(XEvent &event);
 	
-	CL_DisplayWindow_OpenGL *owner;
-	std::string name;
-	//CL_Slot slot_xevent;
+  std::string name;
 
-	//: true: Device is a absolute pointing device, false: relative
-	bool absolute;
+  struct AxisInfo
+  {
+    int min_value;
+    int max_value;
+    int resolution;
+    int pos;
 
-	struct AxisInfo
-	{
-		int min_value;
-		int max_value;
-		int resolution;
-		int pos;
+    AxisInfo(int min_value_, int max_value_, int resolution_)
+      : min_value(min_value_), max_value(max_value_), resolution(resolution_), pos(0)
+    {}
+  };
 
-		AxisInfo(int min_value_, int max_value_, int resolution_)
-			: min_value(min_value_), max_value(max_value_), resolution(resolution_), pos(0)
-		{}
-	};
+  std::vector<bool> buttons;
 
-	std::vector<bool> buttons;
+  std::vector<AxisInfo> axis;
 
-	std::vector<AxisInfo> axis;
-
-	int num_keys;	
+  bool absolute;
+  int num_keys;	
 	
-	Point mouse_pos;
-	Time time_at_last_press;
-	int last_press_id;
+  Point mouse_pos;
+  Time time_at_last_press;
+  int last_press_id;
 
-	bool key_states[5];
+  bool key_states[5];
 
-	int           motion_type;
-	int           button_press_type;
-	int           button_release_type;
-	int           key_press_type;
-	int           key_release_type;
-	int           proximity_in_type;
-	int           proximity_out_type;
+  int           motion_type;
+  int           button_press_type;
+  int           button_release_type;
+  int           key_press_type;
+  int           key_release_type;
+  int           proximity_in_type;
+  int           proximity_out_type;
 };
 
 #endif
 
-// Local Variables: ***
-// mode: clanlib ***
-// End: ***
+/* EOF */

Modified: trunk/netbrush/experimental/wacom.cpp
===================================================================
--- trunk/netbrush/experimental/wacom.cpp	2006-11-04 03:21:02 UTC (rev 687)
+++ trunk/netbrush/experimental/wacom.cpp	2006-11-04 18:03:46 UTC (rev 688)
@@ -37,7 +37,7 @@
     }
 
   syswm.info.x11.lock_func();
-  CL_InputDevice_XInput xinput;
+  InputDevice_XInput xinput(syswm.info.x11.display, "gstylus");
   syswm.info.x11.unlock_func();
 
   SDL_EventState(SDL_SYSWMEVENT, SDL_ENABLE);
@@ -69,7 +69,7 @@
               break;
 
             case SDL_SYSWMEVENT:
-              std::cout << "Sysevent" << std::endl;
+              //std::cout << "Sysevent" << std::endl;
               xinput.on_xevent(event.syswm.msg->event.xevent);
               break;
             }



From grumbel at mail.berlios.de  Sat Nov  4 19:23:45 2006
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Sat, 4 Nov 2006 19:23:45 +0100
Subject: [Flexlay-commit] r689 - trunk/netbrush/experimental
Message-ID: <200611041823.kA4INjRJ031042@sheep.berlios.de>

Author: grumbel
Date: 2006-11-04 19:23:44 +0100 (Sat, 04 Nov 2006)
New Revision: 689

Modified:
   trunk/netbrush/experimental/input_device_xinput.cpp
Log:
- some cleanup

Modified: trunk/netbrush/experimental/input_device_xinput.cpp
===================================================================
--- trunk/netbrush/experimental/input_device_xinput.cpp	2006-11-04 18:03:46 UTC (rev 688)
+++ trunk/netbrush/experimental/input_device_xinput.cpp	2006-11-04 18:23:44 UTC (rev 689)
@@ -1,6 +1,6 @@
 /*  $Id$
-**            _   ___              _   
-**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**            _   ___              _
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_
 **  | ' \/ -_)  _| _ \ '_| || (_-<|   |
 **  |_||_\___|\__|___/_|  \_,_/__/|_|_|
 **  Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
@@ -14,7 +14,7 @@
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
 **  along with this program; if not, write to the Free Software
 **  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
@@ -84,200 +84,197 @@
 }
 
 void
-InputDevice_XInput::get_info(XDeviceInfo	*info)
+InputDevice_XInput::get_info(XDeviceInfo* info)
 {
-  int			i,j;
-  XAnyClassPtr	any;
-  XKeyInfoPtr		k;
-  XButtonInfoPtr	b;
-  XValuatorInfoPtr	v;
-  XAxisInfoPtr	a;
-
   printf("\"%s\"\tid=%ld\t[%s]\n", info->name, info->id,
          (info->use == IsXExtensionDevice) ? "XExtensionDevice" :
          ((info->use == IsXPointer) ? "XPointer" : "XKeyboard"));
 
-  if (info->num_classes > 0) {
-    any = (XAnyClassPtr) (info->inputclassinfo);
-    for (i=0; i<info->num_classes; i++) {
-      switch (any->c_class) {
-      case KeyClass:
-        k = (XKeyInfoPtr) any;
-        printf("\tNum_keys is %d\n",    k->num_keys);
-        printf("\tMin_keycode is %d\n", k->min_keycode);
-        printf("\tMax_keycode is %d\n", k->max_keycode);
+  if (info->num_classes > 0)
+    {
+      XAnyClassPtr any = (XAnyClassPtr) (info->inputclassinfo);
+      for (int i = 0; i < info->num_classes; ++i) 
+        {
+          switch (any->c_class) {
+          case KeyClass:
+            {
+              XKeyInfoPtr k = (XKeyInfoPtr) any;
+              printf("\tNum_keys is %d\n",    k->num_keys);
+              printf("\tMin_keycode is %d\n", k->min_keycode);
+              printf("\tMax_keycode is %d\n", k->max_keycode);
 
-        num_keys = k->num_keys;
-        break;
+              num_keys = k->num_keys;
+            }
+            break;
 
-      case ButtonClass:
-        b = (XButtonInfoPtr) any;
-        printf("\tNum_buttons is %d\n", b->num_buttons);
+          case ButtonClass:
+            {
+              XButtonInfoPtr   b = (XButtonInfoPtr) any;
+              printf("\tNum_buttons is %d\n", b->num_buttons);
 
-        buttons.resize(b->num_buttons, false);
-        break;
+              buttons.resize(b->num_buttons, false);
+            }
+            break;
 
-      case ValuatorClass:
-        v = (XValuatorInfoPtr) any;
-        a = (XAxisInfoPtr) ((char *) v + 
-                            sizeof (XValuatorInfo));
+          case ValuatorClass:
+            {
+              XValuatorInfoPtr v = (XValuatorInfoPtr) any;
+              XAxisInfoPtr     a = (XAxisInfoPtr) ((char *) v +
+                                                   sizeof (XValuatorInfo));
 
-        printf("\tNum_axes is %d\n", v->num_axes);
-        printf("\tMode is %s\n", (v->mode == Absolute) ? "Absolute" : "Relative");
-        printf("\tMotion_buffer is %ld\n", v->motion_buffer);
+              printf("\tNum_axes is %d\n", v->num_axes);
+              printf("\tMode is %s\n", (v->mode == Absolute) ? "Absolute" : "Relative");
+              printf("\tMotion_buffer is %ld\n", v->motion_buffer);
 
-        absolute = (v->mode == Absolute);
+              absolute = (v->mode == Absolute);
 
-        for (j=0; j<v->num_axes; j++, a++) 
-          {
-            printf("\tAxis %d :\n", j);
-            printf("\t\tMin_value is %d\n", a->min_value);
-            printf("\t\tMax_value is %d\n", a->max_value);
-            printf ("\t\tResolution is %d\n", a->resolution);
+              for (int j = 0; j < v->num_axes; j++, a++)
+                {
+                  printf("\tAxis %d :\n", j);
+                  printf("\t\tMin_value is %d\n",   a->min_value);
+                  printf("\t\tMax_value is %d\n",   a->max_value);
+                  printf ("\t\tResolution is %d\n", a->resolution);
 					
-            axis.push_back(AxisInfo(a->min_value, a->max_value, a->resolution));
-          }
-
-        break;
+                  axis.push_back(AxisInfo(a->min_value, a->max_value, a->resolution));
+                }
+            }
+            break;
 		
-      default:
-        printf ("unknown class\n");
-      }
-      any = (XAnyClassPtr) ((char *) any + any->length);
+          default:
+            printf ("unknown class\n");
+          }
+          any = (XAnyClassPtr) ((char *) any + any->length);
+        }
     }
-  }
 }
 
-XDeviceInfo*
-InputDevice_XInput::find_device_info(Display	*display,
-                                     const char	*name,
-                                     Bool	only_extended)
-{
-  // FIXME: Not really needed could simply pass XDeviceInfo to the
-  // constructor, might however make a nicer interface
-  XDeviceInfo	*devices;
-  int		loop;
-  int		num_devices;
-  int		len = strlen(name);
-  Bool     is_id = True;
-  XID		id = 0;
-    
-  for(loop=0; loop<len; loop++) {
-    if (!isdigit(name[loop])) {
-      is_id = False;
-      break;
-    }
-  }
+      XDeviceInfo*
+        InputDevice_XInput::find_device_info(Display	*display,
+                                             const char	*name,
+                                             Bool	only_extended)
+        {
+          // FIXME: Not really needed could simply pass XDeviceInfo to the
+          // constructor, might however make a nicer interface
+          XDeviceInfo	*devices;
+          int		loop;
+          int		num_devices;
+          int		len = strlen(name);
+          Bool     is_id = True;
+          XID		id = 0;
 
-  if (is_id) {
-    id = atoi(name);
-  }
-    
-  devices = XListInputDevices(display, &num_devices);
+          for(loop=0; loop<len; loop++) {
+            if (!isdigit(name[loop])) {
+              is_id = False;
+              break;
+            }
+          }
 
-  for(loop=0; loop<num_devices; loop++) {
-    if ((!only_extended || (devices[loop].use == IsXExtensionDevice)) &&
-        ((!is_id && strcmp(devices[loop].name, name) == 0) ||
-         (is_id && devices[loop].id == id))) {
-      return &devices[loop];
-    }
-  }
-  return NULL;
-}
+          if (is_id) {
+            id = atoi(name);
+          }
 
-int
-InputDevice_XInput::register_events(Display		*dpy,
-                                    XDeviceInfo	*info,
-                                    const char		*dev_name,
-                                    Bool		handle_proximity)
-{
-  int             number = 0;	/* number of events registered */
-  XEventClass     event_list[7];
-  int             i;
-  XDevice         *device;
-  Window          root_win;
-  unsigned long   screen;
-  XInputClassInfo *ip;
+          devices = XListInputDevices(display, &num_devices);
 
-  screen   = DefaultScreen(dpy);
-  root_win = RootWindow(dpy, screen);
-
-  device = XOpenDevice(dpy, info->id);
-
-  if (!device) {
-    fprintf(stderr, "unable to open device %s\n", dev_name);
-    return 0;
-  }
-    
-  if (device->num_classes > 0) 
-    {
-      for (ip = device->classes, i=0; i<info->num_classes; ip++, i++) 
-        {
-          switch (ip->input_class) {
-          case KeyClass:
-            DeviceKeyPress  (device, key_press_type,   event_list[number]); number++;
-            DeviceKeyRelease(device, key_release_type, event_list[number]); number++;
-            break;
-
-          case ButtonClass:
-            DeviceButtonPress  (device, button_press_type,   event_list[number]); number++;
-            DeviceButtonRelease(device, button_release_type, event_list[number]); number++;
-            break;
-
-          case ValuatorClass:
-            DeviceMotionNotify(device, motion_type, event_list[number]); number++;
-            if (handle_proximity) {
-              ProximityIn (device, proximity_in_type,  event_list[number]); number++;
-              ProximityOut(device, proximity_out_type, event_list[number]); number++;
+          for(loop=0; loop<num_devices; loop++) {
+            if ((!only_extended || (devices[loop].use == IsXExtensionDevice)) &&
+                ((!is_id && strcmp(devices[loop].name, name) == 0) ||
+                 (is_id && devices[loop].id == id))) {
+              return &devices[loop];
             }
-            break;
-		
-          default:
-            fprintf(stderr, "unknown class\n");
-            break;
           }
+          return NULL;
         }
 
-      if (XSelectExtensionEvent(dpy, root_win, event_list, number)) 
-        {
-          fprintf(stderr, "error selecting extended events\n");
+      int
+        InputDevice_XInput::register_events(Display		*dpy,
+                                            XDeviceInfo	*info,
+                                            const char		*dev_name,
+                                            Bool		handle_proximity)
+      {
+        int             number = 0;	/* number of events registered */
+        XEventClass     event_list[7];
+        int             i;
+        XDevice         *device;
+        Window          root_win;
+        unsigned long   screen;
+        XInputClassInfo *ip;
+
+        screen   = DefaultScreen(dpy);
+        root_win = RootWindow(dpy, screen);
+
+        device = XOpenDevice(dpy, info->id);
+
+        if (!device) {
+          fprintf(stderr, "unable to open device %s\n", dev_name);
           return 0;
         }
-    }
 
-  //std::cout << "### Registered events: " << number << std::endl;
-  return number;
-}
+        if (device->num_classes > 0)
+          {
+            for (ip = device->classes, i = 0; i<info->num_classes; ip++, ++i)
+              {
+                switch (ip->input_class) {
+                case KeyClass:
+                  DeviceKeyPress  (device, key_press_type,   event_list[number]); number++;
+                  DeviceKeyRelease(device, key_release_type, event_list[number]); number++;
+                  break;
 
-void
-InputDevice_XInput::on_xevent(XEvent &event)
-{
-  if (0)
-    std::cout << this << " event: " 
-              << event.type << " Defs: "
-              << motion_type << " " 
-              << button_press_type << " " 
-              << button_release_type << " " 
-              << key_press_type << " " 
-              << key_release_type << " " 
-              << proximity_out_type << " " 
-              << proximity_in_type << " " 
-              << std::endl;
+                case ButtonClass:
+                  DeviceButtonPress  (device, button_press_type,   event_list[number]); number++;
+                  DeviceButtonRelease(device, button_release_type, event_list[number]); number++;
+                  break;
 
-  std::vector<AxisInfo> old_axis    = axis;
-  std::vector<bool>     old_buttons = buttons;
+                case ValuatorClass:
+                  DeviceMotionNotify(device, motion_type, event_list[number]); number++;
+                  if (handle_proximity) {
+                    ProximityIn (device, proximity_in_type,  event_list[number]); number++;
+                    ProximityOut(device, proximity_out_type, event_list[number]); number++;
+                  }
+                  break;
+		
+                default:
+                  fprintf(stderr, "unknown class\n");
+                  break;
+                }
+              }
 
-  if (event.type == motion_type) 
+            if (XSelectExtensionEvent(dpy, root_win, event_list, number))
+              {
+                fprintf(stderr, "error selecting extended events\n");
+                return 0;
+              }
+          }
+
+        //std::cout << "### Registered events: " << number << std::endl;
+        return number;
+      }
+
+      void
+        InputDevice_XInput::on_xevent(XEvent &event)
+      {
+        if (0)
+          std::cout << this << " event: "
+                    << event.type << " Defs: "
+                    << motion_type << " "
+                    << button_press_type << " "
+                    << button_release_type << " "
+                    << key_press_type << " "
+                    << key_release_type << " "
+                    << proximity_out_type << " "
+                    << proximity_in_type << " "
+                    << std::endl;
+
+  if (event.type == motion_type)
     {
       on_device_motion_event((XDeviceMotionEvent *)&event);
-    } 
+    }
   else if ((event.type == button_press_type) ||
-           (event.type == button_release_type)) 
+           (event.type == button_release_type))
     {
       on_device_button_event((XDeviceButtonEvent *)&event);
-    } 
+    }
   else if ((event.type == key_press_type) ||
-           (event.type == key_release_type)) 
+           (event.type == key_release_type))
     {
       on_device_key_event((XDeviceKeyEvent*)&event);
     }
@@ -286,47 +283,10 @@
     {
       on_proximity_notify_event((XProximityNotifyEvent*)&event);
     }
-  else 
+  else
     {  // Events that aren't XInput events lang here (focus and stuff)
       if (verbose) printf("InputDevice_XInput: what's that %d\n", event.type);
     }
-
-  for (std::vector<bool>::size_type i = 0; i < buttons.size(); ++i)
-    {
-      if (buttons[i] != old_buttons[i])
-        {
-          //InputEvent ie;
-			
-          //ie.id           = i;
-          //ie.type         = InputEvent::pressed;
-          //ie.device       = InputDevice(this);
-          //ie.mouse_pos    = Point(0, 0);
-          //ie.axis_pos     = 0;
-          //ie.repeat_count = false;
-
-          //sig_axis_move(ie);
-          //std::cout << "Wacom: Button" << std::endl;
-        }
-    }
-
-  for (std::vector<AxisInfo>::size_type i = 0; i < axis.size(); ++i)
-    {
-      if (axis[i].pos != old_axis[i].pos)
-        {
-          //			InputEvent ie;
-          //		
-          //			ie.id           = i;
-          //			ie.type         = InputEvent::axis_moved;
-          //			ie.device       = InputDevice(this);
-          //			ie.mouse_pos    = Point(0, 0);
-          //			ie.axis_pos     = get_axis(i);
-          //ie.repeat_count = false;
-
-          //sig_axis_move(ie);
-
-          //std::cout << "Wacom: Axis moved " << std::endl;
-        }
-    }
 }
 
 void
@@ -335,23 +295,24 @@
   if (verbose) printf("button %s %d ", (button->type == button_release_type) ? "release" : "press  ", button->button);
 
   buttons[button->button] = (button->type == button_press_type);
-	    
-  for(int loop = 0; loop < button->axes_count; loop++) {
-    if (verbose)  printf("a[%d]=%d ", button->first_axis + loop, button->axis_data[loop]);
-    axis[loop + button->first_axis].pos = button->axis_data[loop];
-  }
+	
+  for(int i = 0; i < button->axes_count; ++i)
+    {
+      if (verbose)  printf("a[%d]=%d ", button->first_axis + i, button->axis_data[i]);
+      axis[i + button->first_axis].pos = button->axis_data[i];
+    }
   if (verbose) printf("\n");
 }
 
 void
 InputDevice_XInput::on_device_key_event(XDeviceKeyEvent* key)
-{   
+{
   if (verbose) printf("key %s %d ", (key->type == key_release_type) ? "release" : "press  ", key->keycode);
-	    
-  for(int loop = 0; loop < key->axes_count; loop++) 
+	
+  for(int i = 0; i < key->axes_count; ++i)
     {
-      if (verbose) printf("a[%d]=%d ", key->first_axis + loop, key->axis_data[loop]);
-      axis[loop + key->first_axis].pos = key->axis_data[loop];
+      if (verbose) printf("a[%d]=%d ", key->first_axis + i, key->axis_data[i]);
+      axis[i + key->first_axis].pos = key->axis_data[i];
     }
   if (verbose) printf("\n");
 }
@@ -359,25 +320,24 @@
 void
 InputDevice_XInput::on_device_motion_event(XDeviceMotionEvent* motion)
 {
-        if (verbose) printf("motion ");
-	    
-      for(int loop=0; loop<motion->axes_count; loop++) {
-        if (loop >= 3)
-          {
-            //printf("a[%d] = ", motion->first_axis + loop);
-            //print_bits(*((unsigned int*)&(motion->axis_data[loop])));
+  if (verbose) printf("motion ");
 
-            if (verbose) printf("a[%d] = %8d ", motion->first_axis + loop,
-                                *((short*)&(motion->axis_data[loop]))); // workaround for buggy driver
-          }
-        else
-          {
-            if (verbose) printf("a[%d] = %8d ", motion->first_axis + loop, motion->axis_data[loop]);
-          }
-        axis[loop + motion->first_axis].pos = motion->axis_data[loop];
-      }
-      if (verbose) printf("\n");
+  for(int i = 0; i<motion->axes_count; ++i) {
+    if (i >= 3)
+      {
+        //printf("a[%d] = ", motion->first_axis + i);
+        //print_bits(*((unsigned int*)&(motion->axis_data[i])));
 
+        if (verbose) printf("a[%d] = %5d ", motion->first_axis + i,
+                            *((short*)&(motion->axis_data[i]))); // workaround for buggy driver
+      }
+    else
+      {
+        if (verbose) printf("a[%d] = %5d ", motion->first_axis + i, motion->axis_data[i]);
+      }
+    axis[i + motion->first_axis].pos = motion->axis_data[i];
+  }
+  if (verbose) printf("\n");
 }
 
 void
@@ -385,10 +345,10 @@
 {
   if (verbose) printf("proximity %s ", (prox->type == proximity_in_type) ? "in " : "out");
 		
-  for(int loop=0; loop < prox->axes_count; loop++)
+  for(int i = 0; i < prox->axes_count; ++i)
     {
-      if (verbose) printf("a[%d]=%d ", prox->first_axis + loop, prox->axis_data[loop]);
-      axis[loop + prox->first_axis].pos = prox->axis_data[loop];
+      if (verbose) printf("a[%d]=%d ", prox->first_axis + i, prox->axis_data[i]);
+      axis[i + prox->first_axis].pos = prox->axis_data[i];
     }
   if (verbose) printf("\n");
 }



From grumbel at mail.berlios.de  Sat Nov  4 19:29:45 2006
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Sat, 4 Nov 2006 19:29:45 +0100
Subject: [Flexlay-commit] r690 - trunk/netbrush/experimental
Message-ID: <200611041829.kA4ITjPj031340@sheep.berlios.de>

Author: grumbel
Date: 2006-11-04 19:29:44 +0100 (Sat, 04 Nov 2006)
New Revision: 690

Modified:
   trunk/netbrush/experimental/input_device_xinput.cpp
Log:
- some cleanup

Modified: trunk/netbrush/experimental/input_device_xinput.cpp
===================================================================
--- trunk/netbrush/experimental/input_device_xinput.cpp	2006-11-04 18:23:44 UTC (rev 689)
+++ trunk/netbrush/experimental/input_device_xinput.cpp	2006-11-04 18:29:44 UTC (rev 690)
@@ -148,122 +148,122 @@
     }
 }
 
-      XDeviceInfo*
-        InputDevice_XInput::find_device_info(Display	*display,
-                                             const char	*name,
-                                             Bool	only_extended)
-        {
-          // FIXME: Not really needed could simply pass XDeviceInfo to the
-          // constructor, might however make a nicer interface
-          XDeviceInfo	*devices;
-          int		loop;
-          int		num_devices;
-          int		len = strlen(name);
-          Bool     is_id = True;
-          XID		id = 0;
+XDeviceInfo*
+InputDevice_XInput::find_device_info(Display	*display,
+                                     const char	*name,
+                                     Bool	only_extended)
+{
+  // FIXME: Not really needed could simply pass XDeviceInfo to the
+  // constructor, might however make a nicer interface
+  XDeviceInfo	*devices;
+  int		loop;
+  int		num_devices;
+  int		len = strlen(name);
+  Bool     is_id = True;
+  XID		id = 0;
 
-          for(loop=0; loop<len; loop++) {
-            if (!isdigit(name[loop])) {
-              is_id = False;
-              break;
-            }
-          }
+  for(loop=0; loop<len; loop++) {
+    if (!isdigit(name[loop])) {
+      is_id = False;
+      break;
+    }
+  }
 
-          if (is_id) {
-            id = atoi(name);
-          }
+  if (is_id) {
+    id = atoi(name);
+  }
 
-          devices = XListInputDevices(display, &num_devices);
+  devices = XListInputDevices(display, &num_devices);
 
-          for(loop=0; loop<num_devices; loop++) {
-            if ((!only_extended || (devices[loop].use == IsXExtensionDevice)) &&
-                ((!is_id && strcmp(devices[loop].name, name) == 0) ||
-                 (is_id && devices[loop].id == id))) {
-              return &devices[loop];
-            }
-          }
-          return NULL;
-        }
+  for(loop=0; loop<num_devices; loop++) {
+    if ((!only_extended || (devices[loop].use == IsXExtensionDevice)) &&
+        ((!is_id && strcmp(devices[loop].name, name) == 0) ||
+         (is_id && devices[loop].id == id))) {
+      return &devices[loop];
+    }
+  }
+  return NULL;
+}
 
-      int
-        InputDevice_XInput::register_events(Display		*dpy,
-                                            XDeviceInfo	*info,
-                                            const char		*dev_name,
-                                            Bool		handle_proximity)
-      {
-        int             number = 0;	/* number of events registered */
-        XEventClass     event_list[7];
-        int             i;
-        XDevice         *device;
-        Window          root_win;
-        unsigned long   screen;
-        XInputClassInfo *ip;
+int
+InputDevice_XInput::register_events(Display		*dpy,
+                                    XDeviceInfo	*info,
+                                    const char		*dev_name,
+                                    Bool		handle_proximity)
+{
+  int             number = 0;	/* number of events registered */
+  XEventClass     event_list[7];
+  int             i;
+  XDevice         *device;
+  Window          root_win;
+  unsigned long   screen;
+  XInputClassInfo *ip;
 
-        screen   = DefaultScreen(dpy);
-        root_win = RootWindow(dpy, screen);
+  screen   = DefaultScreen(dpy);
+  root_win = RootWindow(dpy, screen);
 
-        device = XOpenDevice(dpy, info->id);
+  device = XOpenDevice(dpy, info->id);
 
-        if (!device) {
-          fprintf(stderr, "unable to open device %s\n", dev_name);
-          return 0;
-        }
+  if (!device) {
+    fprintf(stderr, "unable to open device %s\n", dev_name);
+    return 0;
+  }
 
-        if (device->num_classes > 0)
-          {
-            for (ip = device->classes, i = 0; i<info->num_classes; ip++, ++i)
-              {
-                switch (ip->input_class) {
-                case KeyClass:
-                  DeviceKeyPress  (device, key_press_type,   event_list[number]); number++;
-                  DeviceKeyRelease(device, key_release_type, event_list[number]); number++;
-                  break;
+  if (device->num_classes > 0)
+    {
+      for (ip = device->classes, i = 0; i<info->num_classes; ip++, ++i)
+        {
+          switch (ip->input_class) {
+          case KeyClass:
+            DeviceKeyPress  (device, key_press_type,   event_list[number]); number++;
+            DeviceKeyRelease(device, key_release_type, event_list[number]); number++;
+            break;
 
-                case ButtonClass:
-                  DeviceButtonPress  (device, button_press_type,   event_list[number]); number++;
-                  DeviceButtonRelease(device, button_release_type, event_list[number]); number++;
-                  break;
+          case ButtonClass:
+            DeviceButtonPress  (device, button_press_type,   event_list[number]); number++;
+            DeviceButtonRelease(device, button_release_type, event_list[number]); number++;
+            break;
 
-                case ValuatorClass:
-                  DeviceMotionNotify(device, motion_type, event_list[number]); number++;
-                  if (handle_proximity) {
-                    ProximityIn (device, proximity_in_type,  event_list[number]); number++;
-                    ProximityOut(device, proximity_out_type, event_list[number]); number++;
-                  }
-                  break;
+          case ValuatorClass:
+            DeviceMotionNotify(device, motion_type, event_list[number]); number++;
+            if (handle_proximity) {
+              ProximityIn (device, proximity_in_type,  event_list[number]); number++;
+              ProximityOut(device, proximity_out_type, event_list[number]); number++;
+            }
+            break;
 		
-                default:
-                  fprintf(stderr, "unknown class\n");
-                  break;
-                }
-              }
-
-            if (XSelectExtensionEvent(dpy, root_win, event_list, number))
-              {
-                fprintf(stderr, "error selecting extended events\n");
-                return 0;
-              }
+          default:
+            fprintf(stderr, "unknown class\n");
+            break;
           }
+        }
 
-        //std::cout << "### Registered events: " << number << std::endl;
-        return number;
-      }
+      if (XSelectExtensionEvent(dpy, root_win, event_list, number))
+        {
+          fprintf(stderr, "error selecting extended events\n");
+          return 0;
+        }
+    }
 
-      void
-        InputDevice_XInput::on_xevent(XEvent &event)
-      {
-        if (0)
-          std::cout << this << " event: "
-                    << event.type << " Defs: "
-                    << motion_type << " "
-                    << button_press_type << " "
-                    << button_release_type << " "
-                    << key_press_type << " "
-                    << key_release_type << " "
-                    << proximity_out_type << " "
-                    << proximity_in_type << " "
-                    << std::endl;
+  //std::cout << "### Registered events: " << number << std::endl;
+  return number;
+}
 
+void
+InputDevice_XInput::on_xevent(XEvent &event)
+{
+  if (0)
+    std::cout << this << " event: "
+              << event.type << " Defs: "
+              << motion_type << " "
+              << button_press_type << " "
+              << button_release_type << " "
+              << key_press_type << " "
+              << key_release_type << " "
+              << proximity_out_type << " "
+              << proximity_in_type << " "
+              << std::endl;
+
   if (event.type == motion_type)
     {
       on_device_motion_event((XDeviceMotionEvent *)&event);



From grumbel at mail.berlios.de  Sat Nov  4 20:51:29 2006
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Sat, 4 Nov 2006 20:51:29 +0100
Subject: [Flexlay-commit] r691 - in trunk/netbrush: . src src/widget
Message-ID: <200611041951.kA4JpTeo004534@sheep.berlios.de>

Author: grumbel
Date: 2006-11-04 20:51:28 +0100 (Sat, 04 Nov 2006)
New Revision: 691

Added:
   trunk/netbrush/src/input_device_xinput.cpp
   trunk/netbrush/src/input_device_xinput.hpp
Modified:
   trunk/netbrush/SConstruct
   trunk/netbrush/src/client.cpp
   trunk/netbrush/src/client_connection.cpp
   trunk/netbrush/src/client_state.cpp
   trunk/netbrush/src/client_state.hpp
   trunk/netbrush/src/controller.cpp
   trunk/netbrush/src/globals.cpp
   trunk/netbrush/src/globals.hpp
   trunk/netbrush/src/screen_buffer.cpp
   trunk/netbrush/src/screen_buffer.hpp
   trunk/netbrush/src/server_connection.cpp
   trunk/netbrush/src/tool.hpp
   trunk/netbrush/src/widget/events.hpp
   trunk/netbrush/src/widget/widget.hpp
   trunk/netbrush/src/widget/widget_manager.cpp
   trunk/netbrush/src/widget/widget_manager.hpp
Log:
- some pen handling

Modified: trunk/netbrush/SConstruct
===================================================================
--- trunk/netbrush/SConstruct	2006-11-04 18:29:44 UTC (rev 690)
+++ trunk/netbrush/SConstruct	2006-11-04 19:51:28 UTC (rev 691)
@@ -26,7 +26,7 @@
 client_env['CXXFLAGS'] += ['-O0', '-Wall', '-g']
 client_env['CPPPATH'] += ['src/']
 client_env['LIBPATH'] += ['.']
-client_env['LIBS'] += ['SDL_image', 'SDL_net'] + libcommon
+client_env['LIBS'] += ['SDL_image', 'SDL_net', 'Xi'] + libcommon
 client_env.Program('netbrush-client', [
         'src/alpha_picker.cpp',
         'src/brush_widget.cpp',
@@ -70,7 +70,9 @@
         'src/text_view.cpp',
         'src/rect_tool.cpp',
         'src/circle_tool.cpp',
+        'src/line_tool.cpp',
         'src/SDL_gfx/SDL_gfxPrimitives.c',
+        'src/input_device_xinput.cpp'
 #        'src/widget/events.cpp',
 ])
 

Modified: trunk/netbrush/src/client.cpp
===================================================================
--- trunk/netbrush/src/client.cpp	2006-11-04 18:29:44 UTC (rev 690)
+++ trunk/netbrush/src/client.cpp	2006-11-04 19:51:28 UTC (rev 691)
@@ -8,6 +8,8 @@
 #include "SDL_main.h"
 #include "SDL_image.h"
 #include "SDL_net.h"
+#include "SDL_syswm.h"
+#include "input_device_xinput.hpp"
 #include "drawing_context.hpp"
 #include "drawing_parameter.hpp"
 #include "debug.hpp"
@@ -24,6 +26,7 @@
 #include "command_line.hpp"
 #include "text_view.hpp"
 #include "widget/slider_widget.hpp"
+#include "input_device_xinput.hpp"
 #include "controller.hpp"
 
 #ifdef WIN32
@@ -134,16 +137,24 @@
           break;
 
         case SDL_MOUSEBUTTONDOWN:
-          widget_manager->on_mouse_button(event.button);
+          if (!(xinput && xinput->in_proximity()))
+            widget_manager->on_mouse_button(event.button);
           break;
 
         case SDL_MOUSEBUTTONUP:
-          widget_manager->on_mouse_button(event.button);
+          if (!(xinput && xinput->in_proximity()))
+            widget_manager->on_mouse_button(event.button);
           break;
 
         case SDL_MOUSEMOTION:
-          widget_manager->on_mouse_motion(event.motion);
+          if (!(xinput && xinput->in_proximity()))
+            widget_manager->on_mouse_motion(event.motion);
           break;
+
+        case SDL_SYSWMEVENT:
+          if (xinput)
+            xinput->on_xevent(event.syswm.msg->event.xevent);
+          break;
         }
     }  
 }
@@ -263,6 +274,23 @@
       printf("SDL_SetVideoMode: %s\n", SDL_GetError());
     SDL_WM_SetCaption("netBrush", "netBrush");
 
+    if (1) // enable tablet support
+      {
+        SDL_SysWMinfo syswm;
+
+        SDL_VERSION(&syswm.version); // this is important!
+        if (SDL_GetWMInfo(&syswm) == -1)
+          {
+            std::cout << "Couldn't get WM info " << std::endl;
+          }
+
+        syswm.info.x11.lock_func();
+        xinput = new InputDevice_XInput(syswm.info.x11.display, "gstylus");
+        syswm.info.x11.unlock_func();
+
+        SDL_EventState(SDL_SYSWMEVENT, SDL_ENABLE);
+      }
+
     // 18 is scrollbar
     screen_buffer = new ScreenBuffer(Rect(38, 2, screen->w - 128 - 18 - 2 - 2, screen->h - 16 - 4 - 38)); 
     draw_ctx      = new DrawingContext(canvas_width, canvas_height);

Modified: trunk/netbrush/src/client_connection.cpp
===================================================================
--- trunk/netbrush/src/client_connection.cpp	2006-11-04 18:29:44 UTC (rev 690)
+++ trunk/netbrush/src/client_connection.cpp	2006-11-04 19:51:28 UTC (rev 691)
@@ -224,6 +224,7 @@
             tokens[0] == "copy_region"  ||
             tokens[0] == "fill_rect"    ||
             tokens[0] == "fill_circle"  ||
+            tokens[0] == "draw_line"    ||
             tokens[0] == "set_opacity" 
             ))
     {

Modified: trunk/netbrush/src/client_state.cpp
===================================================================
--- trunk/netbrush/src/client_state.cpp	2006-11-04 18:29:44 UTC (rev 690)
+++ trunk/netbrush/src/client_state.cpp	2006-11-04 19:51:28 UTC (rev 691)
@@ -152,4 +152,15 @@
                                  pos.x + radius+1, pos.y + radius+1));  
 }
 
+void
+ClientState::draw_line(const Point& p1, const Point& p2)
+{
+  aalineRGBA(draw_ctx->get_surface(),
+             p1.x, p1.y, p2.x, p2.y,
+             draw_param->color.r, draw_param->color.g, draw_param->color.b, 
+             draw_param->opacity);
+  screen_buffer->mark_dirty(Rect(p1.x, p1.y,
+                                 p2.x, p2.y));
+}
+
 /* EOF */

Modified: trunk/netbrush/src/client_state.hpp
===================================================================
--- trunk/netbrush/src/client_state.hpp	2006-11-04 18:29:44 UTC (rev 690)
+++ trunk/netbrush/src/client_state.hpp	2006-11-04 19:51:28 UTC (rev 691)
@@ -63,6 +63,7 @@
   void copy_region(const Rect& rect, const Point& target);
   void fill_rect(const Rect& rect);
   void fill_circle(const Point& pos, int radius);
+  void draw_line(const Point& p1, const Point& p2);
 
   void dab(unsigned int time, int x, int y);
 };

Modified: trunk/netbrush/src/controller.cpp
===================================================================
--- trunk/netbrush/src/controller.cpp	2006-11-04 18:29:44 UTC (rev 690)
+++ trunk/netbrush/src/controller.cpp	2006-11-04 19:51:28 UTC (rev 691)
@@ -148,8 +148,11 @@
     widget_manager->add(new Button(IMG_Load("data/icons/stock-tool-circle-22.png"), 
                                    Rect(Point(2, 2+4*34), Size(34, 34)),
                                    new ToolButtonCallback(CIRCLE_TOOL)));
+    widget_manager->add(new Button(IMG_Load("data/icons/stock-tool-line-22.png"), 
+                                   Rect(Point(2, 2+5*34), Size(34, 34)),
+                                   new ToolButtonCallback(LINE_TOOL)));
     widget_manager->add(new Button(IMG_Load("data/icons/stock-tool-rect-select-22.png"), 
-                                   Rect(Point(2, 2+5*34), Size(34, 34)),
+                                   Rect(Point(2, 2+6*34), Size(34, 34)),
                                    new ToolButtonCallback(REGION_TOOL)));
     widget_manager->add(text_view = new TextView(Rect(38, screen->h - 38,
                                                       screen->w - 128 - 18 - 2 - 2, screen->h)));

Modified: trunk/netbrush/src/globals.cpp
===================================================================
--- trunk/netbrush/src/globals.cpp	2006-11-04 18:29:44 UTC (rev 690)
+++ trunk/netbrush/src/globals.cpp	2006-11-04 19:51:28 UTC (rev 691)
@@ -42,4 +42,6 @@
 
 Controller* controller = 0;
 
+InputDevice_XInput* xinput = 0;
+
 /* EOF */

Modified: trunk/netbrush/src/globals.hpp
===================================================================
--- trunk/netbrush/src/globals.hpp	2006-11-04 18:29:44 UTC (rev 690)
+++ trunk/netbrush/src/globals.hpp	2006-11-04 19:51:28 UTC (rev 691)
@@ -43,6 +43,7 @@
 class ServerConnection;
 class Scrollbar;
 class Navigation;
+class InputDevice_XInput;
 
 extern SDLNet_SocketSet socketset;
 
@@ -59,6 +60,7 @@
 
 extern Navigation* navigation;
 extern Controller* controller;
+extern InputDevice_XInput* xinput;
 
 #endif
 

Copied: trunk/netbrush/src/input_device_xinput.cpp (from rev 690, trunk/netbrush/experimental/input_device_xinput.cpp)
===================================================================
--- trunk/netbrush/experimental/input_device_xinput.cpp	2006-11-04 18:29:44 UTC (rev 690)
+++ trunk/netbrush/src/input_device_xinput.cpp	2006-11-04 19:51:28 UTC (rev 691)
@@ -0,0 +1,448 @@
+/*  $Id$
+**            _   ___              _
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+**
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#include <iostream>
+#include "input_device_xinput.hpp"
+#include "SDL.h"
+#include "SDL_syswm.h"
+#include "widget/events.hpp"
+#include "widget/widget_manager.hpp"
+#include "globals.hpp"
+
+/*
+  static void print_bits(unsigned int n)
+  {
+  int i;
+  for(i = 31; i >= 0; --i)
+  {
+  if (i == 29)
+  putchar(' ');
+
+  if (i == 21)
+  putchar(' ');
+
+  if (n & (1 << i))
+  putchar('1');
+  else
+  putchar('0');
+  }
+  putchar(' ');
+  }
+*/
+
+#define INVALID_EVENT_TYPE	-1
+#define verbose false
+
+InputDevice_XInput::InputDevice_XInput(Display* dpy, const std::string& name_)
+  : name(name_),
+    absolute(false),
+    num_keys   (0),
+    proximity(false),
+    motion_type        (INVALID_EVENT_TYPE),
+    button_press_type  (INVALID_EVENT_TYPE),
+    button_release_type(INVALID_EVENT_TYPE),
+    key_press_type     (INVALID_EVENT_TYPE),
+    key_release_type   (INVALID_EVENT_TYPE),
+    proximity_in_type  (INVALID_EVENT_TYPE),
+    proximity_out_type (INVALID_EVENT_TYPE)
+
+{
+  XDeviceInfo* info = find_device_info(dpy, name.c_str(), True);
+  if (!info)
+    std::cout << "InputDeviceXInput Error: Couldn't find device: " << name << std::endl;
+  get_info(info);
+
+  if (!register_events(dpy, info, name.c_str(), True))
+    {
+      std::cout << "debug" << "InputDeviceXInput: Couldn't find device: " << name << std::endl;
+    }
+  else
+    {
+      //slot_xevent = owner->sig_unknown_xevent.connect(this, &InputDevice_XInput::on_xevent);
+    }
+}
+
+InputDevice_XInput::~InputDevice_XInput()
+{
+	
+}
+
+void
+InputDevice_XInput::get_info(XDeviceInfo* info)
+{
+  printf("\"%s\"\tid=%ld\t[%s]\n", info->name, info->id,
+         (info->use == IsXExtensionDevice) ? "XExtensionDevice" :
+         ((info->use == IsXPointer) ? "XPointer" : "XKeyboard"));
+
+  if (info->num_classes > 0)
+    {
+      XAnyClassPtr any = (XAnyClassPtr) (info->inputclassinfo);
+      for (int i = 0; i < info->num_classes; ++i) 
+        {
+          switch (any->c_class) {
+          case KeyClass:
+            {
+              XKeyInfoPtr k = (XKeyInfoPtr) any;
+              printf("\tNum_keys is %d\n",    k->num_keys);
+              printf("\tMin_keycode is %d\n", k->min_keycode);
+              printf("\tMax_keycode is %d\n", k->max_keycode);
+
+              num_keys = k->num_keys;
+            }
+            break;
+
+          case ButtonClass:
+            {
+              XButtonInfoPtr   b = (XButtonInfoPtr) any;
+              printf("\tNum_buttons is %d\n", b->num_buttons);
+
+              buttons.resize(b->num_buttons, false);
+            }
+            break;
+
+          case ValuatorClass:
+            {
+              XValuatorInfoPtr v = (XValuatorInfoPtr) any;
+              XAxisInfoPtr     a = (XAxisInfoPtr) ((char *) v +
+                                                   sizeof (XValuatorInfo));
+
+              printf("\tNum_axes is %d\n", v->num_axes);
+              printf("\tMode is %s\n", (v->mode == Absolute) ? "Absolute" : "Relative");
+              printf("\tMotion_buffer is %ld\n", v->motion_buffer);
+
+              absolute = (v->mode == Absolute);
+
+              for (int j = 0; j < v->num_axes; j++, a++)
+                {
+                  printf("\tAxis %d :\n", j);
+                  printf("\t\tMin_value is %d\n",   a->min_value);
+                  printf("\t\tMax_value is %d\n",   a->max_value);
+                  printf ("\t\tResolution is %d\n", a->resolution);
+					
+                  axis.push_back(AxisInfo(a->min_value, a->max_value, a->resolution));
+                }
+            }
+            break;
+		
+          default:
+            printf ("unknown class\n");
+          }
+          any = (XAnyClassPtr) ((char *) any + any->length);
+        }
+    }
+}
+
+XDeviceInfo*
+InputDevice_XInput::find_device_info(Display	*display,
+                                     const char	*name,
+                                     Bool	only_extended)
+{
+  // FIXME: Not really needed could simply pass XDeviceInfo to the
+  // constructor, might however make a nicer interface
+  XDeviceInfo	*devices;
+  int		loop;
+  int		num_devices;
+  int		len = strlen(name);
+  Bool     is_id = True;
+  XID		id = 0;
+
+  for(loop=0; loop<len; loop++) {
+    if (!isdigit(name[loop])) {
+      is_id = False;
+      break;
+    }
+  }
+
+  if (is_id) {
+    id = atoi(name);
+  }
+
+  devices = XListInputDevices(display, &num_devices);
+
+  for(loop=0; loop<num_devices; loop++) {
+    if ((!only_extended || (devices[loop].use == IsXExtensionDevice)) &&
+        ((!is_id && strcmp(devices[loop].name, name) == 0) ||
+         (is_id && devices[loop].id == id))) {
+      return &devices[loop];
+    }
+  }
+  return NULL;
+}
+
+int
+InputDevice_XInput::register_events(Display		*dpy,
+                                    XDeviceInfo	*info,
+                                    const char		*dev_name,
+                                    Bool		handle_proximity)
+{
+  int             number = 0;	/* number of events registered */
+  XEventClass     event_list[7];
+  int             i;
+  XDevice         *device;
+  Window          root_win;
+  unsigned long   screen;
+  XInputClassInfo *ip;
+
+  screen   = DefaultScreen(dpy);
+  root_win = RootWindow(dpy, screen);
+
+  device = XOpenDevice(dpy, info->id);
+
+  if (!device) {
+    fprintf(stderr, "unable to open device %s\n", dev_name);
+    return 0;
+  }
+
+  if (device->num_classes > 0)
+    {
+      for (ip = device->classes, i = 0; i<info->num_classes; ip++, ++i)
+        {
+          switch (ip->input_class) {
+          case KeyClass:
+            DeviceKeyPress  (device, key_press_type,   event_list[number]); number++;
+            DeviceKeyRelease(device, key_release_type, event_list[number]); number++;
+            break;
+
+          case ButtonClass:
+            DeviceButtonPress  (device, button_press_type,   event_list[number]); number++;
+            DeviceButtonRelease(device, button_release_type, event_list[number]); number++;
+            break;
+
+          case ValuatorClass:
+            DeviceMotionNotify(device, motion_type, event_list[number]); number++;
+            if (handle_proximity) {
+              ProximityIn (device, proximity_in_type,  event_list[number]); number++;
+              ProximityOut(device, proximity_out_type, event_list[number]); number++;
+            }
+            break;
+		
+          default:
+            fprintf(stderr, "unknown class\n");
+            break;
+          }
+        }
+
+      if (XSelectExtensionEvent(dpy, root_win, event_list, number))
+        {
+          fprintf(stderr, "error selecting extended events\n");
+          return 0;
+        }
+    }
+
+  //std::cout << "### Registered events: " << number << std::endl;
+  return number;
+}
+
+void
+InputDevice_XInput::on_xevent(XEvent &event)
+{
+  if (0)
+    std::cout << this << " event: "
+              << event.type << " Defs: "
+              << motion_type << " "
+              << button_press_type << " "
+              << button_release_type << " "
+              << key_press_type << " "
+              << key_release_type << " "
+              << proximity_out_type << " "
+              << proximity_in_type << " "
+              << std::endl;
+
+  if (event.type == motion_type)
+    {
+      on_device_motion_event((XDeviceMotionEvent *)&event);
+    }
+  else if ((event.type == button_press_type) ||
+           (event.type == button_release_type))
+    {
+      on_device_button_event((XDeviceButtonEvent *)&event);
+    }
+  else if ((event.type == key_press_type) ||
+           (event.type == key_release_type))
+    {
+      on_device_key_event((XDeviceKeyEvent*)&event);
+    }
+  else if ((event.type == proximity_out_type) ||
+           (event.type == proximity_in_type))
+    {
+      on_proximity_notify_event((XProximityNotifyEvent*)&event);
+    }
+  else
+    {  // Events that aren't XInput events lang here (focus and stuff)
+      if (verbose) printf("InputDevice_XInput: what's that %d\n", event.type);
+    }
+}
+
+void
+InputDevice_XInput::on_device_button_event(XDeviceButtonEvent *button)
+{
+  if (verbose) printf("button %s %d ", (button->type == button_release_type) ? "release" : "press  ", button->button);
+
+  buttons[button->button] = (button->type == button_press_type);
+	
+  for(int i = 0; i < button->axes_count; ++i)
+    {
+      if (verbose)  printf("a[%d]=%d ", button->first_axis + i, button->axis_data[i]);
+      axis[i + button->first_axis].pos = button->axis_data[i];
+    }
+  if (verbose) printf("\n");
+}
+
+void
+InputDevice_XInput::on_device_key_event(XDeviceKeyEvent* key)
+{
+  if (verbose) printf("key %s %d ", (key->type == key_release_type) ? "release" : "press  ", key->keycode);
+	
+  for(int i = 0; i < key->axes_count; ++i)
+    {
+      if (verbose) printf("a[%d]=%d ", key->first_axis + i, key->axis_data[i]);
+      axis[i + key->first_axis].pos = key->axis_data[i];
+    }
+  if (verbose) printf("\n");
+}
+
+void
+InputDevice_XInput::on_device_motion_event(XDeviceMotionEvent* motion)
+{
+  if (verbose) printf("motion ");
+  float x;
+  float y;
+  float pressure;
+  float x_tilt;
+  float y_tilt;
+
+  for(int i = 0; i<motion->axes_count; ++i) 
+    {
+      if (i == 0)
+        {
+          x = float(motion->axis_data[i])/(axis[i].max_value - axis[i].min_value);
+        }
+      else if (i == 1)
+        {
+          y = float(motion->axis_data[i])/(axis[i].max_value - axis[i].min_value);
+        }
+      else if (i == 2)
+        {
+          pressure = float(motion->axis_data[i])/(axis[i].max_value - axis[i].min_value);
+        }
+      else if (i == 3)
+        {
+          x_tilt = float(*((short*)&(motion->axis_data[i])))/(axis[i].max_value - axis[i].min_value);
+        }
+      else if (i == 4)
+        {
+          y_tilt = float(*((short*)&(motion->axis_data[i])))/(axis[i].max_value - axis[i].min_value);
+        }
+
+      if (i >= 3)
+        {
+          //printf("a[%d] = ", motion->first_axis + i);
+          //print_bits(*((unsigned int*)&(motion->axis_data[i])));
+
+          if (verbose) printf("a[%d] = %5d ", motion->first_axis + i,
+                              *((short*)&(motion->axis_data[i]))); // workaround for buggy driver
+        }
+      else
+        {
+          if (verbose) printf("a[%d] = %5d ", motion->first_axis + i, motion->axis_data[i]);
+        }
+      axis[i + motion->first_axis].pos = motion->axis_data[i];
+    }
+  if (verbose) printf("\n");
+
+  if (0) 
+    printf("x: %1.5f y: %1.5f pressure: %1.5f x_tilt: %2.5f y_tilt: %2.5f\n", x, y, pressure, x_tilt, y_tilt);
+  widget_manager->on_pen_motion(PenEvent(x * 1152, y * 864, // FIXME: Calculate those dynamically
+                                         pressure, 
+                                         x_tilt, y_tilt));
+}
+
+void
+InputDevice_XInput::on_proximity_notify_event(XProximityNotifyEvent* prox)
+{
+  if (verbose) printf("proximity %s ", (prox->type == proximity_in_type) ? "in " : "out");
+		
+  if (prox->type == proximity_in_type)
+    proximity = true;
+  else 
+    proximity = false;
+
+  for(int i = 0; i < prox->axes_count; ++i)
+    {
+      if (verbose) printf("a[%d]=%d ", prox->first_axis + i, prox->axis_data[i]);
+      axis[i + prox->first_axis].pos = prox->axis_data[i];
+    }
+  if (verbose) printf("\n");
+}
+
+bool
+InputDevice_XInput::get_keycode(int keycode) const
+{
+  if (keycode >=0 && keycode < int(buttons.size()))
+    {
+      return buttons[keycode];
+    }
+  else
+    {
+      return false;
+    }
+}
+
+float
+InputDevice_XInput::get_axis(int index) const
+{
+  if (index >= 0 && index < get_axis_count())
+    {
+      return float(axis[index].pos)/(axis[index].max_value - axis[index].min_value);
+    }
+  else
+    {
+      return 0.0f;
+    }
+}
+
+int
+InputDevice_XInput::get_axis_count() const
+{
+  return axis.size();
+}
+
+std::string
+InputDevice_XInput::get_name() const
+{
+  return name;
+}
+
+std::string
+InputDevice_XInput::get_device_name() const
+{
+  return "xinput:" + name;
+}
+
+int
+InputDevice_XInput::get_button_count() const
+{
+  return buttons.size();
+}
+
+/* EOF */

Copied: trunk/netbrush/src/input_device_xinput.hpp (from rev 688, trunk/netbrush/experimental/input_device_xinput.hpp)
===================================================================
--- trunk/netbrush/experimental/input_device_xinput.hpp	2006-11-04 18:03:46 UTC (rev 688)
+++ trunk/netbrush/src/input_device_xinput.hpp	2006-11-04 19:51:28 UTC (rev 691)
@@ -0,0 +1,130 @@
+/*  $Id$
+**            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_INPUT_DEVICE_XINPUT_HPP
+#define HEADER_INPUT_DEVICE_XINPUT_HPP
+
+#include <vector>
+#include "../src/math/point.hpp"
+#include <X11/Xlib.h>
+#include <X11/Xutil.h>
+#include <X11/extensions/XInput.h>
+
+class InputDevice_XInput
+{
+  //!Construction:
+public:
+  InputDevice_XInput(Display* dpy, const std::string& name);
+
+  virtual ~InputDevice_XInput();
+
+  //!Attributes:
+public:
+  //: Returns true if the passed key code is down for this device.
+  virtual bool get_keycode(int keycode) const;
+
+  //: Returns the the current position of a joystick axis.
+  virtual float get_axis(int index) const;
+
+  //: Returns the number of axes available on this device.
+  virtual int get_axis_count() const;
+
+  //: Returns the name of the device (i.e. 'Microsoft Sidewinder 3D').
+  virtual std::string get_name() const;
+
+  //: Return the hardware id/device for this device (i.e. '/dev/input/js0')
+  virtual std::string get_device_name() const;
+
+  //: Returns the number of buttons available on this device.
+  //- <p>If used on a keyboard, this function returns -1.</p>
+  virtual int get_button_count() const;
+
+  //!Operations:
+public:
+
+  //!Implementation:
+private:
+  int register_events(Display		*dpy,
+                      XDeviceInfo	*info,
+                      const char		*dev_name,
+                      Bool		handle_proximity);
+
+  XDeviceInfo* find_device_info(Display	*display,
+                                const char		*name,
+                                Bool		only_extended);
+
+  void get_info(XDeviceInfo	*info);
+public:
+  void on_xevent(XEvent &event);
+  bool in_proximity() const { return proximity; }
+private:
+  void on_device_button_event(XDeviceButtonEvent *button);
+  void on_device_key_event(XDeviceKeyEvent* key);
+  void on_device_motion_event(XDeviceMotionEvent* motion);
+  void on_proximity_notify_event(XProximityNotifyEvent* prox);
+
+private:
+  void received_mouse_input(XEvent &event);
+  void received_mouse_move(XEvent &event);
+	
+  std::string name;
+
+  struct AxisInfo
+  {
+    int min_value;
+    int max_value;
+    int resolution;
+    int pos;
+
+    AxisInfo(int min_value_, int max_value_, int resolution_)
+      : min_value(min_value_), max_value(max_value_), resolution(resolution_), pos(0)
+    {}
+  };
+
+  std::vector<bool> buttons;
+
+  std::vector<AxisInfo> axis;
+
+  bool absolute;
+  int num_keys;	
+
+  bool proximity;
+	
+  Point mouse_pos;
+  Time time_at_last_press;
+  int last_press_id;
+
+  bool key_states[5];
+
+  int           motion_type;
+  int           button_press_type;
+  int           button_release_type;
+  int           key_press_type;
+  int           key_release_type;
+  int           proximity_in_type;
+  int           proximity_out_type;
+};
+
+#endif
+
+/* EOF */

Modified: trunk/netbrush/src/screen_buffer.cpp
===================================================================
--- trunk/netbrush/src/screen_buffer.cpp	2006-11-04 18:29:44 UTC (rev 690)
+++ trunk/netbrush/src/screen_buffer.cpp	2006-11-04 19:51:28 UTC (rev 691)
@@ -40,13 +40,15 @@
 #include "region_tool.hpp"
 #include "rect_tool.hpp"
 #include "circle_tool.hpp"
+#include "line_tool.hpp"
 #include "screen_buffer.hpp"
 
 ScreenBuffer::ScreenBuffer(const Rect& rect)
   : Widget(rect),
     complete_refresh(false),
     scroll_offset_x(0),
-    scroll_offset_y(0)
+    scroll_offset_y(0),
+    pen_active(false)
 {
   tools.push_back(airbrush_tool    = new AirbrushTool());
   tools.push_back(scroll_tool      = new ScrollTool());
@@ -54,6 +56,7 @@
   tools.push_back(rect_tool        = new RectTool());
   tools.push_back(region_tool      = new RegionTool());
   tools.push_back(circle_tool      = new CircleTool());
+  tools.push_back(line_tool        = new LineTool());
 }
 
 ScreenBuffer::~ScreenBuffer()
@@ -64,6 +67,7 @@
   delete scroll_tool;
   delete airbrush_tool;
   delete circle_tool;
+  delete line_tool;
 }
 
 void
@@ -221,6 +225,21 @@
 }
 
 void
+ScreenBuffer::on_pen_motion(const PenEvent& pen)
+{
+  printf("x: %1.5f y: %1.5f pressure: %1.5f x_tilt: %2.5f y_tilt: %2.5f\n",
+         pen.x, pen.y, pen.pressure, pen.x_tilt, pen.y_tilt);
+  if (pen.pressure > 0)
+    {
+      pen_active = true;
+    }
+  else
+    {
+      
+    }
+}
+
+void
 ScreenBuffer::on_mouse_motion(const MouseMotionEvent& motion)
 {
   ToolMotionEvent tool_motion;
@@ -287,6 +306,10 @@
 {
   switch(tool)
     {
+    case LINE_TOOL:
+      tools[0] = line_tool;
+      break;
+
     case PAINTBRUSH_TOOL:
       tools[0] = airbrush_tool;
       break;

Modified: trunk/netbrush/src/screen_buffer.hpp
===================================================================
--- trunk/netbrush/src/screen_buffer.hpp	2006-11-04 18:29:44 UTC (rev 690)
+++ trunk/netbrush/src/screen_buffer.hpp	2006-11-04 19:51:28 UTC (rev 691)
@@ -37,6 +37,7 @@
 class RegionTool;
 class RectTool;
 class CircleTool;
+class LineTool;
 class AirbrushTool;
 
 /** */
@@ -57,7 +58,10 @@
   CircleTool*      circle_tool;
   ScrollTool*      scroll_tool;
   AirbrushTool*    airbrush_tool;
+  LineTool*    line_tool;
 
+  bool pen_active;
+
   typedef std::vector<Tool*> Tools;
   Tools tools;
 public:
@@ -73,6 +77,7 @@
 
   void on_mouse_motion(const MouseMotionEvent& motion);
   void on_mouse_button(const MouseButtonEvent& button);
+  void on_pen_motion(const PenEvent& pen);
   
   void on_enter() {}
   void on_leave() {}

Modified: trunk/netbrush/src/server_connection.cpp
===================================================================
--- trunk/netbrush/src/server_connection.cpp	2006-11-04 18:29:44 UTC (rev 690)
+++ trunk/netbrush/src/server_connection.cpp	2006-11-04 19:51:28 UTC (rev 691)
@@ -227,12 +227,19 @@
                                                   atoi(tokens[8].c_str())));
                 }
               else if (tokens.size() == 7 && tokens[2] == "fill_rect")
-                { // fill_rect X1 Y2 X2 Y2
+                { // fill_rect X1 Y1 X2 Y2
                   client_state->fill_rect(Rect(atoi(tokens[3].c_str()),
                                                atoi(tokens[4].c_str()),
                                                atoi(tokens[5].c_str()),
                                                atoi(tokens[6].c_str())));
                 }
+              else if (tokens.size() == 7 && tokens[2] == "draw_line")
+                { // draw_line X1 Y1 X2 Y2
+                  client_state->draw_line(Point(atoi(tokens[3].c_str()),
+                                                atoi(tokens[4].c_str())),
+                                          Point(atoi(tokens[5].c_str()),
+                                                atoi(tokens[6].c_str())));
+                }
               else if (tokens.size() == 6 && tokens[2] == "fill_circle")
                 { // fill_circle X Y RADIUS
                   client_state->fill_circle(Point(atoi(tokens[3].c_str()),

Modified: trunk/netbrush/src/tool.hpp
===================================================================
--- trunk/netbrush/src/tool.hpp	2006-11-04 18:29:44 UTC (rev 690)
+++ trunk/netbrush/src/tool.hpp	2006-11-04 19:51:28 UTC (rev 691)
@@ -31,7 +31,7 @@
 #include "math/rect.hpp"
 #include "widget/events.hpp"
 
-enum ToolName { PAINTBRUSH_TOOL, RECT_TOOL, REGION_TOOL, COLOR_PICKER_TOOL, CIRCLE_TOOL };
+enum ToolName { PAINTBRUSH_TOOL, RECT_TOOL, REGION_TOOL, COLOR_PICKER_TOOL, CIRCLE_TOOL, LINE_TOOL };
 
 struct ToolMotionEvent
 {

Modified: trunk/netbrush/src/widget/events.hpp
===================================================================
--- trunk/netbrush/src/widget/events.hpp	2006-11-04 18:29:44 UTC (rev 690)
+++ trunk/netbrush/src/widget/events.hpp	2006-11-04 19:51:28 UTC (rev 691)
@@ -28,6 +28,20 @@
 
 #include "SDL.h"
 
+class PenEvent
+{
+public:
+  float x;
+  float y;
+  float pressure;
+  float x_tilt;
+  float y_tilt;
+
+  PenEvent(float x, float y, float pressure, float x_tilt, float y_tilt)
+    : x(x), y(y), pressure(pressure), x_tilt(x_tilt), y_tilt(y_tilt)
+  {}
+};
+
 class MouseButtonEvent
 {
 public:

Modified: trunk/netbrush/src/widget/widget.hpp
===================================================================
--- trunk/netbrush/src/widget/widget.hpp	2006-11-04 18:29:44 UTC (rev 690)
+++ trunk/netbrush/src/widget/widget.hpp	2006-11-04 19:51:28 UTC (rev 691)
@@ -51,6 +51,8 @@
   virtual void on_mouse_motion(const MouseMotionEvent& motion) =0;
   virtual void on_mouse_button(const MouseButtonEvent& button) =0;
 
+  virtual void on_pen_motion(const PenEvent& button) {}
+
   virtual void on_enter() = 0;
   virtual void on_leave() = 0;
 

Modified: trunk/netbrush/src/widget/widget_manager.cpp
===================================================================
--- trunk/netbrush/src/widget/widget_manager.cpp	2006-11-04 18:29:44 UTC (rev 690)
+++ trunk/netbrush/src/widget/widget_manager.cpp	2006-11-04 19:51:28 UTC (rev 691)
@@ -28,6 +28,8 @@
 #include "../video.hpp"
 #include "widget.hpp"
 #include "events.hpp"
+#include "../globals.hpp"
+#include "../screen_buffer.hpp"
 #include "widget_manager.hpp"
 
 WidgetManager::WidgetManager()
@@ -134,6 +136,13 @@
 }
 
 void
+WidgetManager::on_pen_motion(const PenEvent& pen)
+{
+  // FIXME: Hack, should to normal widget handling instead
+  screen_buffer->on_pen_motion(pen);
+}
+
+void
 WidgetManager::update()
 {
   for(Widgets::reverse_iterator i = widgets.rbegin(); i != widgets.rend(); ++i)

Modified: trunk/netbrush/src/widget/widget_manager.hpp
===================================================================
--- trunk/netbrush/src/widget/widget_manager.hpp	2006-11-04 18:29:44 UTC (rev 690)
+++ trunk/netbrush/src/widget/widget_manager.hpp	2006-11-04 19:51:28 UTC (rev 691)
@@ -31,6 +31,7 @@
 
 class MouseMotionEvent;
 class MouseButtonEvent;
+class PenEvent;
 
 class Widget;
 
@@ -48,6 +49,7 @@
   
   void on_mouse_motion(const MouseMotionEvent& motion);
   void on_mouse_button(const MouseButtonEvent& button);
+  void on_pen_motion(const PenEvent& pen);
 
   void grab(Widget* widget);
   void ungrab(Widget* widget);



From grumbel at mail.berlios.de  Sun Nov  5 16:14:56 2006
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Sun, 5 Nov 2006 16:14:56 +0100
Subject: [Flexlay-commit] r692 - in trunk/netbrush: . src
Message-ID: <200611051514.kA5FEu0t014835@sheep.berlios.de>

Author: grumbel
Date: 2006-11-05 16:14:55 +0100 (Sun, 05 Nov 2006)
New Revision: 692

Added:
   trunk/netbrush/src/graphic_context.hpp
   trunk/netbrush/src/surface_graphic_context.cpp
   trunk/netbrush/src/surface_graphic_context.hpp
Modified:
   trunk/netbrush/SConstruct
   trunk/netbrush/src/airbrush_tool.cpp
   trunk/netbrush/src/airbrush_tool.hpp
   trunk/netbrush/src/color.cpp
   trunk/netbrush/src/color.hpp
   trunk/netbrush/src/grayscale_buffer.cpp
   trunk/netbrush/src/grayscale_buffer.hpp
   trunk/netbrush/src/screen_buffer.cpp
   trunk/netbrush/src/stroke_buffer.cpp
   trunk/netbrush/src/tool.hpp
Log:
added graphic context for use in widgets

Modified: trunk/netbrush/SConstruct
===================================================================
--- trunk/netbrush/SConstruct	2006-11-04 19:51:28 UTC (rev 691)
+++ trunk/netbrush/SConstruct	2006-11-05 15:14:55 UTC (rev 692)
@@ -71,6 +71,7 @@
         'src/rect_tool.cpp',
         'src/circle_tool.cpp',
         'src/line_tool.cpp',
+        'src/surface_graphic_context.cpp',
         'src/SDL_gfx/SDL_gfxPrimitives.c',
         'src/input_device_xinput.cpp'
 #        'src/widget/events.cpp',

Modified: trunk/netbrush/src/airbrush_tool.cpp
===================================================================
--- trunk/netbrush/src/airbrush_tool.cpp	2006-11-04 19:51:28 UTC (rev 691)
+++ trunk/netbrush/src/airbrush_tool.cpp	2006-11-05 15:14:55 UTC (rev 692)
@@ -33,7 +33,8 @@
 #include "airbrush_tool.hpp"
 
 AirbrushTool::AirbrushTool()
-  : current_stroke(0)
+  : current_stroke(0),
+    pen_active(false)
 {
 }
 
@@ -44,6 +45,8 @@
 void
 AirbrushTool::on_motion(const ToolMotionEvent& ev)
 {
+  if (pen_active) return;
+
   if (current_stroke)
     {
       current_stroke->add_dab(Dab(ev.x, ev.y));
@@ -61,12 +64,59 @@
       rect.bottom += client_draw_param->thickness()/2;
                   
       screen_buffer->mark_dirty(rect);
-    } 
+    }
 }
 
 void
+AirbrushTool::on_pen_motion(const PenEvent& pen)
+{
+  if (0)
+    printf("x: %1.5f y: %1.5f pressure: %1.5f x_tilt: %2.5f y_tilt: %2.5f\n",
+           pen.x, pen.y, pen.pressure, pen.x_tilt, pen.y_tilt);
+
+  if (pen.pressure > 0)
+    {
+      if (!current_stroke)
+        {
+          current_stroke = new Stroke();
+          pen_active = true;
+        }      
+
+      float x = pen.x;
+      float y = pen.y;
+
+      current_stroke->add_dab(Dab(x, y, pen.pressure));
+      stroke_buffer->add_dab(Dab(x, y, pen.pressure));
+
+      // sync
+      Rect rect = current_stroke->get_bounding_rect(); 
+              
+      // calculate bounding rectangle by taking brush thickness into account
+      // FIXME: Handle x/y thickness independetly to get a smaller clip rect
+      rect.left -= client_draw_param->thickness()/2;
+      rect.top  -= client_draw_param->thickness()/2;
+
+      rect.right  += client_draw_param->thickness()/2;
+      rect.bottom += client_draw_param->thickness()/2;
+                  
+      screen_buffer->mark_dirty(rect);
+    }
+  else if (current_stroke)
+    {
+      stroke_buffer->clear();
+      server->send_stroke(*current_stroke, client_draw_param);
+
+      delete current_stroke;
+      current_stroke = 0;
+      pen_active = false;
+    }
+}
+
+void
 AirbrushTool::on_button_press(const ToolButtonEvent& ev)
 {
+  if (pen_active) return;
+
   widget_manager->grab(screen_buffer); // FIXME: ugly out of place widget class abuse
 
   // FIXME: activate this and test: delete current_stroke;
@@ -82,6 +132,8 @@
 void
 AirbrushTool::on_button_release(const ToolButtonEvent& ev)
 {
+  if (pen_active) return;
+
   if (current_stroke)
     {
       widget_manager->ungrab(screen_buffer); // FIXME: ugly out of place widget class abuse
@@ -89,6 +141,7 @@
       stroke_buffer->clear();
       server->send_stroke(*current_stroke, client_draw_param);
 
+      delete current_stroke;
       current_stroke = 0;
     }
 }

Modified: trunk/netbrush/src/airbrush_tool.hpp
===================================================================
--- trunk/netbrush/src/airbrush_tool.hpp	2006-11-04 19:51:28 UTC (rev 691)
+++ trunk/netbrush/src/airbrush_tool.hpp	2006-11-05 15:14:55 UTC (rev 692)
@@ -33,7 +33,7 @@
 {
 private:
   Stroke* current_stroke;
-
+  bool pen_active;
 public:
   AirbrushTool();
   ~AirbrushTool();
@@ -41,6 +41,7 @@
   void on_motion(const ToolMotionEvent& ev);
   void on_button_press(const ToolButtonEvent& ev);
   void on_button_release(const ToolButtonEvent& ev);
+  void on_pen_motion(const PenEvent& pen);
   void draw(SDL_Surface* target, const Rect& rect, int x_of, int y_of) {}
 private:
   AirbrushTool (const AirbrushTool&);

Modified: trunk/netbrush/src/color.cpp
===================================================================
--- trunk/netbrush/src/color.cpp	2006-11-04 19:51:28 UTC (rev 691)
+++ trunk/netbrush/src/color.cpp	2006-11-05 15:14:55 UTC (rev 692)
@@ -67,8 +67,8 @@
   : r(0), g(0), b(0)
 {}
 
-Color::Color(Uint8 r_, Uint8 g_, Uint8 b_)
-  : r(r_), g(g_), b(b_)
+Color::Color(Uint8 r_, Uint8 g_, Uint8 b_, Uint8 a_)
+  : r(r_), g(g_), b(b_), a(a_)
 {}
 
 Color

Modified: trunk/netbrush/src/color.hpp
===================================================================
--- trunk/netbrush/src/color.hpp	2006-11-04 19:51:28 UTC (rev 691)
+++ trunk/netbrush/src/color.hpp	2006-11-05 15:14:55 UTC (rev 692)
@@ -46,9 +46,10 @@
   Uint8 r;
   Uint8 g;
   Uint8 b;
+  Uint8 a;
 
   Color();
-  Color(Uint8 r_, Uint8 g_, Uint8 b_);
+  Color(Uint8 r_, Uint8 g_, Uint8 b_, Uint8 a_ = 255);
   static Color from_hsv(Uint8 hue, Uint8 saturation, Uint8 value);
   static Color from_hue(Uint8 hue);
   void apply_value_saturation(Uint8 value, Uint8 saturation);

Added: trunk/netbrush/src/graphic_context.hpp
===================================================================
--- trunk/netbrush/src/graphic_context.hpp	2006-11-04 19:51:28 UTC (rev 691)
+++ trunk/netbrush/src/graphic_context.hpp	2006-11-05 15:14:55 UTC (rev 692)
@@ -0,0 +1,50 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_GRAPHIC_CONTEXT_HPP
+#define HEADER_GRAPHIC_CONTEXT_HPP
+
+/** */
+class GraphicContext
+{
+private:
+public:
+  virtual void fill_rect(const Rect& rect, const Color& color) =0;
+  virtual void draw_rect(const Rect& rect, const Color& color) =0;
+
+  virtual void fill_circle(const Point& pos, int radius, const Color& color) =0;
+  virtual void draw_circle(const Point& pos, int radius, const Color& color) =0;
+  
+  virtual void blit(SDL_Surface* source, const Point& pos) =0;
+  virtual void blit(SDL_Surface* source, const Rect& src_rect, const Point& pos) =0;
+
+private:
+  GraphicContext (const GraphicContext&);
+  GraphicContext& operator= (const GraphicContext&);
+};
+
+#endif
+
+/* EOF */

Modified: trunk/netbrush/src/grayscale_buffer.cpp
===================================================================
--- trunk/netbrush/src/grayscale_buffer.cpp	2006-11-04 19:51:28 UTC (rev 691)
+++ trunk/netbrush/src/grayscale_buffer.cpp	2006-11-05 15:14:55 UTC (rev 692)
@@ -99,8 +99,9 @@
 }
 
 void
-GrayscaleBuffer::blit(GrayscaleBuffer* source, int of_x, int of_y, BlendMode mode)
+GrayscaleBuffer::blit(GrayscaleBuffer* source, int of_x, int of_y, Uint8 alpha, BlendMode mode)
 {
+  std::cout << "alpha: " << int(alpha) << std::endl;
   int start_x = std::max(of_x, 0);
   int start_y = std::max(of_y, 0);
 
@@ -152,8 +153,9 @@
             Uint8& p = source->buffer[(y - of_y) * source->width + (x - of_x)];
             
             // Works, but not exactly alpha
-            f = std::max(std::min(f + p/4, 255), 0);
-            
+            f = std::max(std::min(f + (alpha * p / 255)/4, 255), 0);
+            //f = alpha;
+
             //f = (((255 - p) * f) + (p * p))/255; 
             
             // Speed worm: f = ((p)*p + p*f)/255;

Modified: trunk/netbrush/src/grayscale_buffer.hpp
===================================================================
--- trunk/netbrush/src/grayscale_buffer.hpp	2006-11-04 19:51:28 UTC (rev 691)
+++ trunk/netbrush/src/grayscale_buffer.hpp	2006-11-05 15:14:55 UTC (rev 692)
@@ -46,7 +46,7 @@
   ~GrayscaleBuffer();
   
   void blit(GrayscaleBuffer* source, SDL_Rect* srcrect, int of_x, int of_y);
-  void blit(GrayscaleBuffer* source, int of_x, int of_y, BlendMode mode);
+  void blit(GrayscaleBuffer* source, int of_x, int of_y, Uint8 alpha, BlendMode mode);
 
   inline Uint8& at(int x, int y) 
   { 

Modified: trunk/netbrush/src/screen_buffer.cpp
===================================================================
--- trunk/netbrush/src/screen_buffer.cpp	2006-11-04 19:51:28 UTC (rev 691)
+++ trunk/netbrush/src/screen_buffer.cpp	2006-11-05 15:14:55 UTC (rev 692)
@@ -227,8 +227,6 @@
 void
 ScreenBuffer::on_pen_motion(const PenEvent& pen)
 {
-  printf("x: %1.5f y: %1.5f pressure: %1.5f x_tilt: %2.5f y_tilt: %2.5f\n",
-         pen.x, pen.y, pen.pressure, pen.x_tilt, pen.y_tilt);
   if (pen.pressure > 0)
     {
       pen_active = true;
@@ -237,6 +235,8 @@
     {
       
     }
+
+  tools.front()->on_pen_motion(pen);
 }
 
 void

Modified: trunk/netbrush/src/stroke_buffer.cpp
===================================================================
--- trunk/netbrush/src/stroke_buffer.cpp	2006-11-04 19:51:28 UTC (rev 691)
+++ trunk/netbrush/src/stroke_buffer.cpp	2006-11-05 15:14:55 UTC (rev 692)
@@ -92,6 +92,7 @@
               buffer->blit(brush,
                            static_cast<int>(i->pos.x - brush->get_width()/2), 
                            static_cast<int>(i->pos.y - brush->get_height()/2), 
+                           (Uint8)(255 * dab.pressure),
                            GrayscaleBuffer::ALPHA);
             }
         }
@@ -101,6 +102,7 @@
       buffer->blit(brush,
                    static_cast<int>(dab.pos.x - brush->get_width()/2), 
                    static_cast<int>(dab.pos.y - brush->get_height()/2), 
+                   (Uint8)(255 * dab.pressure),
                    GrayscaleBuffer::ALPHA);
     }
 }
@@ -118,6 +120,7 @@
           buffer->blit(brush,
                        static_cast<int>(i->pos.x - brush->get_width()/2), 
                        static_cast<int>(i->pos.y - brush->get_height()/2), 
+                       (Uint8)(255 * i->pressure),
                        GrayscaleBuffer::ALPHA);
         }
     }
@@ -128,7 +131,8 @@
         {
           buffer->blit(brush,
                        static_cast<int>(i->pos.x - brush->get_width()/2), 
-                       static_cast<int>(i->pos.y - brush->get_height()/2), 
+                       static_cast<int>(i->pos.y - brush->get_height()/2),
+                       (Uint8)(255 * i->pressure), 
                        GrayscaleBuffer::ALPHA);
         }      
     }

Added: trunk/netbrush/src/surface_graphic_context.cpp
===================================================================
--- trunk/netbrush/src/surface_graphic_context.cpp	2006-11-04 19:51:28 UTC (rev 691)
+++ trunk/netbrush/src/surface_graphic_context.cpp	2006-11-05 15:14:55 UTC (rev 692)
@@ -0,0 +1,106 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#include "SDL_gfx/SDL_gfxPrimitives.h"
+#include "surface_graphic_context.hpp"
+
+SurfaceGraphicContext::SurfaceGraphicContext(SDL_Surface* surface)
+  : target(surface),
+    anti_aliasing(false)
+{
+}
+
+SurfaceGraphicContext::~SurfaceGraphicContext()
+{
+  SDL_FreeSurface(target);
+}
+
+void
+SurfaceGraphicContext::fill_rect(const Rect& rect, const Color& color)
+{
+  boxRGBA(target,
+          rect.left, rect.top, rect.right, rect.bottom,
+          color.r, color.g, color.b, color.a);
+}
+
+void
+SurfaceGraphicContext::draw_rect(const Rect& rect, const Color& color)
+{
+  boxRGBA(target,
+          rect.left, rect.top, rect.right, rect.bottom,
+          color.r, color.g, color.b, color.a);
+}
+  
+void
+SurfaceGraphicContext::fill_circle(const Point& pos, int radius, const Color& color)
+{
+  filledCircleRGBA(target,
+                   pos.x, pos.y, radius,
+                   color.r, color.g, color.b, color.a);
+}
+
+void
+SurfaceGraphicContext::draw_circle(const Point& pos, int radius, const Color& color)
+{
+  circleRGBA(target,
+             pos.x, pos.y, radius,
+             color.r, color.g, color.b, color.a);
+}
+
+void
+SurfaceGraphicContext::draw_line(const Point& p1, const Point& p2, const Color& color)
+{
+  aalineRGBA(target,
+             p1.x, p1.y, p2.x, p2.y,
+             color.r, color.g, color.b, color.a);
+}
+
+void
+SurfaceGraphicContext::blit(SDL_Surface* source, const Point& pos)
+{
+  SDL_Rect target_rect;
+  target_rect.x = pos.x;
+  target_rect.y = pos.y;
+
+  SDL_BlitSurface(source, 0, target, &target_rect);
+}
+
+void
+SurfaceGraphicContext::blit(SDL_Surface* source, const Rect& src_rect, const Point& pos)
+{
+  SDL_Rect source_rect;
+  source_rect.x = src_rect.left;
+  source_rect.y = src_rect.right;
+  source_rect.w = src_rect.get_width();
+  source_rect.h = src_rect.get_height();
+
+  SDL_Rect target_rect;
+  target_rect.x = pos.x;
+  target_rect.y = pos.y;
+
+  SDL_BlitSurface(source, &source_rect, target, &target_rect);  
+}
+
+/* EOF */

Added: trunk/netbrush/src/surface_graphic_context.hpp
===================================================================
--- trunk/netbrush/src/surface_graphic_context.hpp	2006-11-04 19:51:28 UTC (rev 691)
+++ trunk/netbrush/src/surface_graphic_context.hpp	2006-11-05 15:14:55 UTC (rev 692)
@@ -0,0 +1,64 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_SURFACE_GRAPHIC_CONTEXT_HPP
+#define HEADER_SURFACE_GRAPHIC_CONTEXT_HPP
+
+#include "SDL.h"
+#include "math/point.hpp"
+#include "math/rect.hpp"
+#include "color.hpp"
+
+/** */
+class SurfaceGraphicContext
+{
+private:
+  SDL_Surface* target;
+  bool anti_aliasing;
+public:
+  SurfaceGraphicContext(SDL_Surface* surface);
+  ~SurfaceGraphicContext();
+  
+  void set_anti_aliasing(bool t);
+
+  void fill_rect(const Rect& rect, const Color& color);
+  void draw_rect(const Rect& rect, const Color& color);
+  
+  void fill_circle(const Point& pos, int radius, const Color& color);
+  void draw_circle(const Point& pos, int radius, const Color& color);
+
+  void draw_line(const Point& p1, const Point& p2, const Color& color);
+  
+  void blit(SDL_Surface* source, const Point& pos);
+  void blit(SDL_Surface* source, const Rect& src_rect, const Point& pos);
+
+private:
+  SurfaceGraphicContext (const SurfaceGraphicContext&);
+  SurfaceGraphicContext& operator= (const SurfaceGraphicContext&);
+};
+
+#endif
+
+/* EOF */

Modified: trunk/netbrush/src/tool.hpp
===================================================================
--- trunk/netbrush/src/tool.hpp	2006-11-04 19:51:28 UTC (rev 691)
+++ trunk/netbrush/src/tool.hpp	2006-11-05 15:14:55 UTC (rev 692)
@@ -41,6 +41,7 @@
   Point screen;
 };
 
+
 struct ToolButtonEvent
 {
   int x;
@@ -60,6 +61,7 @@
   virtual void on_motion(const ToolMotionEvent& ev) =0;
   virtual void on_button_press(const ToolButtonEvent& ev) =0;
   virtual void on_button_release(const ToolButtonEvent& ev) =0;
+  virtual void on_pen_motion(const PenEvent& pen) {}
 
   /** @param target SDL_Surface to which should be drawn 
       @param rect   rectangle in screenspace which should be redrawn



From grumbel at mail.berlios.de  Sun Nov  5 20:06:06 2006
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Sun, 5 Nov 2006 20:06:06 +0100
Subject: [Flexlay-commit] r693 - in trunk/netbrush/src: . widget
Message-ID: <200611051906.kA5J66FV007513@sheep.berlios.de>

Author: grumbel
Date: 2006-11-05 20:06:05 +0100 (Sun, 05 Nov 2006)
New Revision: 693

Modified:
   trunk/netbrush/src/airbrush_tool.cpp
   trunk/netbrush/src/alpha_picker.cpp
   trunk/netbrush/src/alpha_picker.hpp
   trunk/netbrush/src/brush_widget.cpp
   trunk/netbrush/src/brush_widget.hpp
   trunk/netbrush/src/client.cpp
   trunk/netbrush/src/client_state.cpp
   trunk/netbrush/src/client_state.hpp
   trunk/netbrush/src/color_display.cpp
   trunk/netbrush/src/color_display.hpp
   trunk/netbrush/src/graphic_context.hpp
   trunk/netbrush/src/grayscale_buffer.cpp
   trunk/netbrush/src/hue_picker.cpp
   trunk/netbrush/src/hue_picker.hpp
   trunk/netbrush/src/navigation.cpp
   trunk/netbrush/src/navigation.hpp
   trunk/netbrush/src/saturation_value_picker.cpp
   trunk/netbrush/src/saturation_value_picker.hpp
   trunk/netbrush/src/screen_buffer.cpp
   trunk/netbrush/src/screen_buffer.hpp
   trunk/netbrush/src/server_connection.cpp
   trunk/netbrush/src/surface_graphic_context.cpp
   trunk/netbrush/src/surface_graphic_context.hpp
   trunk/netbrush/src/text_view.cpp
   trunk/netbrush/src/text_view.hpp
   trunk/netbrush/src/widget/button.cpp
   trunk/netbrush/src/widget/button.hpp
   trunk/netbrush/src/widget/scrollbar.cpp
   trunk/netbrush/src/widget/scrollbar.hpp
   trunk/netbrush/src/widget/slider_widget.cpp
   trunk/netbrush/src/widget/slider_widget.hpp
   trunk/netbrush/src/widget/widget.hpp
   trunk/netbrush/src/widget/widget_manager.cpp
   trunk/netbrush/src/widget/widget_manager.hpp
Log:
- added graphic context to widget

Modified: trunk/netbrush/src/airbrush_tool.cpp
===================================================================
--- trunk/netbrush/src/airbrush_tool.cpp	2006-11-05 15:14:55 UTC (rev 692)
+++ trunk/netbrush/src/airbrush_tool.cpp	2006-11-05 19:06:05 UTC (rev 693)
@@ -23,6 +23,7 @@
 **  02111-1307, USA.
 */
 
+#include <iostream>
 #include "globals.hpp"
 #include "stroke.hpp"
 #include "stroke_buffer.hpp"
@@ -70,7 +71,7 @@
 void
 AirbrushTool::on_pen_motion(const PenEvent& pen)
 {
-  if (0)
+  if (0 && pen_active)
     printf("x: %1.5f y: %1.5f pressure: %1.5f x_tilt: %2.5f y_tilt: %2.5f\n",
            pen.x, pen.y, pen.pressure, pen.x_tilt, pen.y_tilt);
 
@@ -78,6 +79,7 @@
     {
       if (!current_stroke)
         {
+          std::cout << "Motian start" << std::endl;
           current_stroke = new Stroke();
           pen_active = true;
         }      
@@ -103,6 +105,7 @@
     }
   else if (current_stroke)
     {
+      std::cout << "Motian End" << std::endl;
       stroke_buffer->clear();
       server->send_stroke(*current_stroke, client_draw_param);
 

Modified: trunk/netbrush/src/alpha_picker.cpp
===================================================================
--- trunk/netbrush/src/alpha_picker.cpp	2006-11-05 15:14:55 UTC (rev 692)
+++ trunk/netbrush/src/alpha_picker.cpp	2006-11-05 19:06:05 UTC (rev 693)
@@ -86,27 +86,12 @@
 }
 
 void
-AlphaPicker::draw(SDL_Surface* target)
+AlphaPicker::draw(GraphicContext& gc)
 {
-  SDL_Rect pos;
-  pos.x = get_rect().left;
-  pos.y = get_rect().top;
-
-  SDL_BlitSurface(surface, 0, target, &pos);
-
-
-  SDL_Rect vline;
-  vline.x = click_pos.x + get_rect().left - 1;
-  vline.y = 0 + get_rect().top;
-  vline.w = 3;
-  vline.h = get_rect().get_height();
-
-  SDL_FillRect(target, &vline, SDL_MapRGB(target->format, 0, 0, 0));
-
-  vline.x += 1;
-  vline.w = 1;
-
-  SDL_FillRect(target, &vline, SDL_MapRGB(target->format, 255, 255, 255));
+  gc.blit(surface, Point(0, 0));
+  gc.draw_line(Point(click_pos.x, 0),
+               Point(click_pos.x, get_rect().get_height()),
+               Color(0, 0, 0));
 }
 
 void

Modified: trunk/netbrush/src/alpha_picker.hpp
===================================================================
--- trunk/netbrush/src/alpha_picker.hpp	2006-11-05 15:14:55 UTC (rev 692)
+++ trunk/netbrush/src/alpha_picker.hpp	2006-11-05 19:06:05 UTC (rev 693)
@@ -47,7 +47,7 @@
   void on_enter() {}
   void on_leave() {}
 
-  void draw(SDL_Surface* target);
+  void draw(GraphicContext& gc);
 
   void set_color(const Color& color);
 private:

Modified: trunk/netbrush/src/brush_widget.cpp
===================================================================
--- trunk/netbrush/src/brush_widget.cpp	2006-11-05 15:14:55 UTC (rev 692)
+++ trunk/netbrush/src/brush_widget.cpp	2006-11-05 19:06:05 UTC (rev 693)
@@ -54,13 +54,9 @@
 }
 
 void
-BrushWidget::draw(SDL_Surface* target)
+BrushWidget::draw(GraphicContext& gc)
 {
-  SDL_Rect pos;
-  pos.x = get_rect().left;
-  pos.y = get_rect().top;
-
-  SDL_BlitSurface(surface, 0, target, &pos);
+  gc.blit(surface, Point(0,0));
 }
 
 void 

Modified: trunk/netbrush/src/brush_widget.hpp
===================================================================
--- trunk/netbrush/src/brush_widget.hpp	2006-11-05 15:14:55 UTC (rev 692)
+++ trunk/netbrush/src/brush_widget.hpp	2006-11-05 19:06:05 UTC (rev 693)
@@ -45,7 +45,7 @@
   void on_enter() {}
   void on_leave() {}
 
-  void draw(SDL_Surface* target);
+  void draw(GraphicContext& gc);
   void set_brush(GrayscaleBuffer* brushmask);
 
 private:

Modified: trunk/netbrush/src/client.cpp
===================================================================
--- trunk/netbrush/src/client.cpp	2006-11-05 15:14:55 UTC (rev 692)
+++ trunk/netbrush/src/client.cpp	2006-11-05 19:06:05 UTC (rev 693)
@@ -170,6 +170,7 @@
     std::string hostname;
     std::string port     = "4711";
     int rest_arg_count = 0;
+    std::string stylus;
 
     CommandLine argp;
 
@@ -180,6 +181,7 @@
     argp.add_option('f', "fullscreen", "",            "Start the application in fullscreen mode");
     argp.add_option('w', "window",     "",            "Start the application in window mode");
     argp.add_option('v', "version",    "",            "Display the netBrush version");
+    argp.add_option('i', "input",      "NAME",        "Use XInput device NAME for drawing (tablet support)");
     argp.add_option('h', "help",       "",            "Show this help text");
 
     argp.parse_args(argc, argv);
@@ -202,6 +204,12 @@
             }
             break;
 
+          case 'i':
+            {
+              stylus = argp.get_argument();
+            }
+            break;
+
           case 'c':
             {
               if (sscanf(argp.get_argument().c_str(), "%dx%d",
@@ -274,7 +282,7 @@
       printf("SDL_SetVideoMode: %s\n", SDL_GetError());
     SDL_WM_SetCaption("netBrush", "netBrush");
 
-    if (1) // enable tablet support
+    if (!stylus.empty()) // enable tablet support
       {
         SDL_SysWMinfo syswm;
 
@@ -285,7 +293,7 @@
           }
 
         syswm.info.x11.lock_func();
-        xinput = new InputDevice_XInput(syswm.info.x11.display, "gstylus");
+        xinput = new InputDevice_XInput(syswm.info.x11.display, stylus);
         syswm.info.x11.unlock_func();
 
         SDL_EventState(SDL_SYSWMEVENT, SDL_ENABLE);

Modified: trunk/netbrush/src/client_state.cpp
===================================================================
--- trunk/netbrush/src/client_state.cpp	2006-11-05 15:14:55 UTC (rev 692)
+++ trunk/netbrush/src/client_state.cpp	2006-11-05 19:06:05 UTC (rev 693)
@@ -113,12 +113,12 @@
 }
 
 void
-ClientState::dab(unsigned int time, int x, int y) 
+ClientState::dab(unsigned int time, int x, int y, float pressure) 
 {
   //std::cout << "CL" << id << " dab " << time << " " << x << " " << y << std::endl;
   if (current_stroke)
     {
-      current_stroke->add_dab(Dab(x, y));
+      current_stroke->add_dab(Dab(x, y, pressure));
     }
 }
 

Modified: trunk/netbrush/src/client_state.hpp
===================================================================
--- trunk/netbrush/src/client_state.hpp	2006-11-05 15:14:55 UTC (rev 692)
+++ trunk/netbrush/src/client_state.hpp	2006-11-05 19:06:05 UTC (rev 693)
@@ -65,7 +65,7 @@
   void fill_circle(const Point& pos, int radius);
   void draw_line(const Point& p1, const Point& p2);
 
-  void dab(unsigned int time, int x, int y);
+  void dab(unsigned int time, int x, int y, float pressure);
 };
 
 #endif

Modified: trunk/netbrush/src/color_display.cpp
===================================================================
--- trunk/netbrush/src/color_display.cpp	2006-11-05 15:14:55 UTC (rev 692)
+++ trunk/netbrush/src/color_display.cpp	2006-11-05 19:06:05 UTC (rev 693)
@@ -48,8 +48,9 @@
 }
 
 void
-ColorDisplay::draw(SDL_Surface* target)
+ColorDisplay::draw(GraphicContext& gc)
 {
+#if 0
   SDL_Rect r;
  
   r.x = get_rect().left + get_rect().get_width()/3;
@@ -82,6 +83,7 @@
   SDL_FillRect(target, &r, SDL_MapRGB(target->format, foreground.r, foreground.g, foreground.b));
 
   if (0) std::cout << "Color: " << (int)foreground.r << " " << (int)foreground.g << " " << (int)foreground.b << std::endl;
+#endif 
 }
 
 void

Modified: trunk/netbrush/src/color_display.hpp
===================================================================
--- trunk/netbrush/src/color_display.hpp	2006-11-05 15:14:55 UTC (rev 692)
+++ trunk/netbrush/src/color_display.hpp	2006-11-05 19:06:05 UTC (rev 693)
@@ -45,7 +45,7 @@
   void on_enter() {}
   void on_leave() {}
   
-  void draw(SDL_Surface* target);
+  void draw(GraphicContext& gc);
   void set_color(const Color& color);
 private:
   ColorDisplay (const ColorDisplay&);

Modified: trunk/netbrush/src/graphic_context.hpp
===================================================================
--- trunk/netbrush/src/graphic_context.hpp	2006-11-05 15:14:55 UTC (rev 692)
+++ trunk/netbrush/src/graphic_context.hpp	2006-11-05 19:06:05 UTC (rev 693)
@@ -26,11 +26,18 @@
 #ifndef HEADER_GRAPHIC_CONTEXT_HPP
 #define HEADER_GRAPHIC_CONTEXT_HPP
 
+#include "math/rect.hpp"
+#include "math/point.hpp"
+#include "color.hpp"
+
 /** */
 class GraphicContext
 {
 private:
 public:
+  GraphicContext() {}
+  virtual ~GraphicContext() {}
+
   virtual void fill_rect(const Rect& rect, const Color& color) =0;
   virtual void draw_rect(const Rect& rect, const Color& color) =0;
 
@@ -40,6 +47,9 @@
   virtual void blit(SDL_Surface* source, const Point& pos) =0;
   virtual void blit(SDL_Surface* source, const Rect& src_rect, const Point& pos) =0;
 
+  virtual void draw_line(const Point& p1, const Point& p2, const Color& color) =0;
+
+  virtual SDL_Surface* get_surface() =0;
 private:
   GraphicContext (const GraphicContext&);
   GraphicContext& operator= (const GraphicContext&);

Modified: trunk/netbrush/src/grayscale_buffer.cpp
===================================================================
--- trunk/netbrush/src/grayscale_buffer.cpp	2006-11-05 15:14:55 UTC (rev 692)
+++ trunk/netbrush/src/grayscale_buffer.cpp	2006-11-05 19:06:05 UTC (rev 693)
@@ -101,7 +101,7 @@
 void
 GrayscaleBuffer::blit(GrayscaleBuffer* source, int of_x, int of_y, Uint8 alpha, BlendMode mode)
 {
-  std::cout << "alpha: " << int(alpha) << std::endl;
+  std::cout << "alpha: " << mode << " " << int(alpha) << std::endl;
   int start_x = std::max(of_x, 0);
   int start_y = std::max(of_y, 0);
 
@@ -153,7 +153,7 @@
             Uint8& p = source->buffer[(y - of_y) * source->width + (x - of_x)];
             
             // Works, but not exactly alpha
-            f = std::max(std::min(f + (alpha * p / 255)/4, 255), 0);
+            f = std::max(std::min(f + (alpha * p/255), 255), 0);
             //f = alpha;
 
             //f = (((255 - p) * f) + (p * p))/255; 

Modified: trunk/netbrush/src/hue_picker.cpp
===================================================================
--- trunk/netbrush/src/hue_picker.cpp	2006-11-05 15:14:55 UTC (rev 692)
+++ trunk/netbrush/src/hue_picker.cpp	2006-11-05 19:06:05 UTC (rev 693)
@@ -92,20 +92,12 @@
 }
 
 void
-HuePicker::draw(SDL_Surface* target)
+HuePicker::draw(GraphicContext& gc)
 {
-  SDL_Rect pos;
-  pos.x = get_rect().left;
-  pos.y = get_rect().top;
-
-  SDL_Rect vline;
-  vline.x = click_pos.x + get_rect().left;
-  vline.y = 0 + get_rect().top;
-  vline.w = 1;
-  vline.h = get_rect().get_height();
-
-  SDL_BlitSurface(surface, 0, target, &pos);
-  SDL_FillRect(target, &vline, SDL_MapRGB(target->format, 0, 0, 0));
+  gc.blit(surface, Point(0,0));
+  gc.draw_line(Point(click_pos.x, 0),
+               Point(click_pos.x, get_rect().get_height()),
+               Color(0,0,0));
 }
 
 void

Modified: trunk/netbrush/src/hue_picker.hpp
===================================================================
--- trunk/netbrush/src/hue_picker.hpp	2006-11-05 15:14:55 UTC (rev 692)
+++ trunk/netbrush/src/hue_picker.hpp	2006-11-05 19:06:05 UTC (rev 693)
@@ -47,7 +47,7 @@
   void on_enter() {}
   void on_leave() {}
 
-  void draw(SDL_Surface* target);
+  void draw(GraphicContext& gc);
  
 private:
   HuePicker (const HuePicker&);

Modified: trunk/netbrush/src/navigation.cpp
===================================================================
--- trunk/netbrush/src/navigation.cpp	2006-11-05 15:14:55 UTC (rev 692)
+++ trunk/netbrush/src/navigation.cpp	2006-11-05 19:06:05 UTC (rev 693)
@@ -67,13 +67,9 @@
 }
 
 void
-Navigation::draw(SDL_Surface* target)
+Navigation::draw(GraphicContext& gc)
 {
-  SDL_Rect pos;
-  pos.x = get_rect().left;
-  pos.y = get_rect().top;
-
-  SDL_BlitSurface(surface, 0, target, &pos);  
+  gc.blit(surface, Point(0, 0));
 }
 
 void

Modified: trunk/netbrush/src/navigation.hpp
===================================================================
--- trunk/netbrush/src/navigation.hpp	2006-11-05 15:14:55 UTC (rev 692)
+++ trunk/netbrush/src/navigation.hpp	2006-11-05 19:06:05 UTC (rev 693)
@@ -34,6 +34,7 @@
 private:
   SDL_Surface* surface;
   bool dragging;
+
 public:
   Navigation(const Rect& rect);
   
@@ -43,7 +44,7 @@
   void on_enter() {};
   void on_leave() {}
 
-  void draw(SDL_Surface* target);
+  void draw(GraphicContext& gc);
   void update();
 private:
   Navigation (const Navigation&);

Modified: trunk/netbrush/src/saturation_value_picker.cpp
===================================================================
--- trunk/netbrush/src/saturation_value_picker.cpp	2006-11-05 15:14:55 UTC (rev 692)
+++ trunk/netbrush/src/saturation_value_picker.cpp	2006-11-05 19:06:05 UTC (rev 693)
@@ -107,28 +107,15 @@
 }
 
 void
-SaturationValuePicker::draw(SDL_Surface* target)
+SaturationValuePicker::draw(GraphicContext& gc)
 {
-  SDL_Rect pos;
-  pos.x = get_rect().left;
-  pos.y = get_rect().top;
-
-  SDL_Rect hline;
-  hline.x = 0  + get_rect().left;;
-  hline.y = click_pos.y  + get_rect().top;
-  hline.w = get_rect().get_width();
-  hline.h = 1;
-
-  SDL_Rect vline;
-  vline.x = click_pos.x + get_rect().left;
-  vline.y = 0 + get_rect().top;
-  vline.w = 1;
-  vline.h = get_rect().get_height();
-
-  SDL_BlitSurface(surface, 0, target, &pos);
-
-  SDL_FillRect(target, &hline, SDL_MapRGB(target->format, 0, 0, 0));
-  SDL_FillRect(target, &vline, SDL_MapRGB(target->format, 0, 0, 0));
+  gc.blit(surface, Point(0, 0));
+  gc.draw_line(Point(click_pos.x, 0),
+               Point(click_pos.x, get_rect().get_height()),
+               Color(0, 0, 0));
+  gc.draw_line(Point(0, click_pos.y),
+               Point(get_rect().get_width(), click_pos.y),
+               Color(0, 0, 0));
 }
 
 /* EOF */

Modified: trunk/netbrush/src/saturation_value_picker.hpp
===================================================================
--- trunk/netbrush/src/saturation_value_picker.hpp	2006-11-05 15:14:55 UTC (rev 692)
+++ trunk/netbrush/src/saturation_value_picker.hpp	2006-11-05 19:06:05 UTC (rev 693)
@@ -37,6 +37,7 @@
   SDL_Surface* surface;
   bool  dragging;
   Point click_pos;
+
 public:
   SaturationValuePicker(const Rect& rect);
 
@@ -46,7 +47,7 @@
   void on_enter() {};
   void on_leave() {}
 
-  void draw(SDL_Surface* target);
+  void draw(GraphicContext& gc);
   void set_color(const Color& color);
 
   Color get_color(Uint8 value, Uint8 saturation) const;

Modified: trunk/netbrush/src/screen_buffer.cpp
===================================================================
--- trunk/netbrush/src/screen_buffer.cpp	2006-11-05 15:14:55 UTC (rev 692)
+++ trunk/netbrush/src/screen_buffer.cpp	2006-11-05 19:06:05 UTC (rev 693)
@@ -71,8 +71,9 @@
 }
 
 void
-ScreenBuffer::draw(SDL_Surface* target)
+ScreenBuffer::draw(GraphicContext& gc)
 {
+  SDL_Surface* target = gc.get_surface();
   //SDL_SetClipRect(target, &rect);
 
   int trans_x = get_rect().left + scroll_offset_x;

Modified: trunk/netbrush/src/screen_buffer.hpp
===================================================================
--- trunk/netbrush/src/screen_buffer.hpp	2006-11-05 15:14:55 UTC (rev 692)
+++ trunk/netbrush/src/screen_buffer.hpp	2006-11-05 19:06:05 UTC (rev 693)
@@ -73,7 +73,7 @@
   void mark_dirty(const Rect& region);
   void force_full_refresh();
   
-  void draw(SDL_Surface* target);
+  void draw(GraphicContext& gc);
 
   void on_mouse_motion(const MouseMotionEvent& motion);
   void on_mouse_button(const MouseButtonEvent& button);

Modified: trunk/netbrush/src/server_connection.cpp
===================================================================
--- trunk/netbrush/src/server_connection.cpp	2006-11-05 15:14:55 UTC (rev 692)
+++ trunk/netbrush/src/server_connection.cpp	2006-11-05 19:06:05 UTC (rev 693)
@@ -25,6 +25,7 @@
 
 #include <iostream>
 #include <sstream>
+#include <stdlib.h>
 #include "globals.hpp"
 #include "client_state.hpp"
 #include "color.hpp"
@@ -288,8 +289,16 @@
                 {
                   client_state->dab(atoi(tokens[3].c_str()), 
                                     atoi(tokens[4].c_str()),
-                                    atoi(tokens[5].c_str()));
+                                    atoi(tokens[5].c_str()),
+                                    1.0f);
                 }
+              else if (tokens.size() == 7 && tokens[2] == "dab")
+                {
+                  client_state->dab(atoi(tokens[3].c_str()), 
+                                    atoi(tokens[4].c_str()),
+                                    atoi(tokens[5].c_str()),
+                                    atof(tokens[6].c_str()));
+                }
               else
                 {
                   std::cout << "# invalid command: " << cmd << std::endl;
@@ -360,7 +369,7 @@
   str << "stroke_begin" << std::endl;
   for(Stroke::Dabs::const_iterator i = dabs.begin(); i != dabs.end(); ++i)
     {
-      str << "dab " << i->time << " " << i->pos.x << " " << i->pos.y  << std::endl;
+      str << "dab " << i->time << " " << i->pos.x << " " << i->pos.y << " " << i->pressure << std::endl;
     }
   str << "stroke_end" << std::endl;
       

Modified: trunk/netbrush/src/surface_graphic_context.cpp
===================================================================
--- trunk/netbrush/src/surface_graphic_context.cpp	2006-11-05 15:14:55 UTC (rev 692)
+++ trunk/netbrush/src/surface_graphic_context.cpp	2006-11-05 19:06:05 UTC (rev 693)
@@ -26,8 +26,10 @@
 #include "SDL_gfx/SDL_gfxPrimitives.h"
 #include "surface_graphic_context.hpp"
 
-SurfaceGraphicContext::SurfaceGraphicContext(SDL_Surface* surface)
-  : target(surface),
+SurfaceGraphicContext::SurfaceGraphicContext(SDL_Surface* target_, 
+                                             const Rect&  region_)
+  : target(target_),
+    region(region_),
     anti_aliasing(false)
 {
 }
@@ -41,7 +43,8 @@
 SurfaceGraphicContext::fill_rect(const Rect& rect, const Color& color)
 {
   boxRGBA(target,
-          rect.left, rect.top, rect.right, rect.bottom,
+          rect.left  + region.left, rect.top    + region.top, 
+          rect.right + region.left, rect.bottom + region.top,
           color.r, color.g, color.b, color.a);
 }
 
@@ -49,7 +52,8 @@
 SurfaceGraphicContext::draw_rect(const Rect& rect, const Color& color)
 {
   boxRGBA(target,
-          rect.left, rect.top, rect.right, rect.bottom,
+          rect.left  + region.left, rect.top    + region.top, 
+          rect.right + region.left, rect.bottom + region.top,
           color.r, color.g, color.b, color.a);
 }
   
@@ -57,7 +61,9 @@
 SurfaceGraphicContext::fill_circle(const Point& pos, int radius, const Color& color)
 {
   filledCircleRGBA(target,
-                   pos.x, pos.y, radius,
+                   pos.x + region.left,
+                   pos.y + region.top, 
+                   radius,
                    color.r, color.g, color.b, color.a);
 }
 
@@ -65,7 +71,8 @@
 SurfaceGraphicContext::draw_circle(const Point& pos, int radius, const Color& color)
 {
   circleRGBA(target,
-             pos.x, pos.y, radius,
+             pos.x + region.left, pos.y + region.top, 
+             radius,
              color.r, color.g, color.b, color.a);
 }
 
@@ -73,7 +80,8 @@
 SurfaceGraphicContext::draw_line(const Point& p1, const Point& p2, const Color& color)
 {
   aalineRGBA(target,
-             p1.x, p1.y, p2.x, p2.y,
+             p1.x + region.left, p1.y + region.top,
+             p2.x + region.left, p2.y + region.top,
              color.r, color.g, color.b, color.a);
 }
 
@@ -81,8 +89,8 @@
 SurfaceGraphicContext::blit(SDL_Surface* source, const Point& pos)
 {
   SDL_Rect target_rect;
-  target_rect.x = pos.x;
-  target_rect.y = pos.y;
+  target_rect.x = pos.x + region.left;
+  target_rect.y = pos.y + region.top;
 
   SDL_BlitSurface(source, 0, target, &target_rect);
 }
@@ -90,6 +98,7 @@
 void
 SurfaceGraphicContext::blit(SDL_Surface* source, const Rect& src_rect, const Point& pos)
 {
+  // FIXME: add clipping
   SDL_Rect source_rect;
   source_rect.x = src_rect.left;
   source_rect.y = src_rect.right;
@@ -97,8 +106,8 @@
   source_rect.h = src_rect.get_height();
 
   SDL_Rect target_rect;
-  target_rect.x = pos.x;
-  target_rect.y = pos.y;
+  target_rect.x = pos.x + region.left;
+  target_rect.y = pos.y + region.top;
 
   SDL_BlitSurface(source, &source_rect, target, &target_rect);  
 }

Modified: trunk/netbrush/src/surface_graphic_context.hpp
===================================================================
--- trunk/netbrush/src/surface_graphic_context.hpp	2006-11-05 15:14:55 UTC (rev 692)
+++ trunk/netbrush/src/surface_graphic_context.hpp	2006-11-05 19:06:05 UTC (rev 693)
@@ -30,15 +30,23 @@
 #include "math/point.hpp"
 #include "math/rect.hpp"
 #include "color.hpp"
+#include "graphic_context.hpp"
 
 /** */
-class SurfaceGraphicContext
+class SurfaceGraphicContext : public GraphicContext
 {
 private:
+  /** the SDL_Surface onto which all drawing command will land */
   SDL_Surface* target;
+
+  /** The region into which all drawing commands will land, drawing to
+      (0, 0) will land on (region.left, region.top)  */
+  Rect region;
+
   bool anti_aliasing;
+
 public:
-  SurfaceGraphicContext(SDL_Surface* surface);
+  SurfaceGraphicContext(SDL_Surface* surface, const Rect& region);
   ~SurfaceGraphicContext();
   
   void set_anti_aliasing(bool t);
@@ -54,6 +62,7 @@
   void blit(SDL_Surface* source, const Point& pos);
   void blit(SDL_Surface* source, const Rect& src_rect, const Point& pos);
 
+  SDL_Surface* get_surface() { return target; }
 private:
   SurfaceGraphicContext (const SurfaceGraphicContext&);
   SurfaceGraphicContext& operator= (const SurfaceGraphicContext&);

Modified: trunk/netbrush/src/text_view.cpp
===================================================================
--- trunk/netbrush/src/text_view.cpp	2006-11-05 15:14:55 UTC (rev 692)
+++ trunk/netbrush/src/text_view.cpp	2006-11-05 19:06:05 UTC (rev 693)
@@ -57,19 +57,13 @@
 }
 
 void
-TextView::draw(SDL_Surface* target)
+TextView::draw(GraphicContext& gc)
 {
   if (1)
-    {
-      SDL_Rect r;
-      r.x = get_rect().left;
-      r.y = get_rect().top;
-      r.w = get_rect().get_width();
-      r.h = get_rect().get_height();
-
-      SDL_FillRect(target, &r, SDL_MapRGB(target->format, 64, 64, 64));
-    }
-  TTY_Blit(tty, target, get_rect().left, get_rect().top);
+    gc.fill_rect(get_rect(), Color(64, 64, 64));
+  
+  // FIXME: move font handling in GraphicContext
+  TTY_Blit(tty, gc.get_surface(), get_rect().left, get_rect().top);
 }
 
 void

Modified: trunk/netbrush/src/text_view.hpp
===================================================================
--- trunk/netbrush/src/text_view.hpp	2006-11-05 15:14:55 UTC (rev 692)
+++ trunk/netbrush/src/text_view.hpp	2006-11-05 19:06:05 UTC (rev 693)
@@ -48,7 +48,7 @@
   void on_enter() {}
   void on_leave() {}
 
-  void draw(SDL_Surface* target);
+  void draw(GraphicContext& gc);
   void put(const std::string& str);
 
 private:

Modified: trunk/netbrush/src/widget/button.cpp
===================================================================
--- trunk/netbrush/src/widget/button.cpp	2006-11-05 15:14:55 UTC (rev 692)
+++ trunk/netbrush/src/widget/button.cpp	2006-11-05 19:06:05 UTC (rev 693)
@@ -90,38 +90,23 @@
 }
 
 void
-Button::draw(SDL_Surface* target)
+Button::draw(GraphicContext& gc)
 {
-  //Uint32 color = SDL_MapRGB(target->format, 255, 0, 0);
-
-  SDL_Rect r;
-
-  r.x = get_rect().left;
-  r.y = get_rect().top;
-
-  r.w = get_rect().get_width();
-  r.h = get_rect().get_height();
-
   switch(state)
     {
     case UP:
       if (hover)
-        SDL_BlitSurface(hover_surface, NULL, target, &r);
+        gc.blit(hover_surface, Point(0, 0));
       else
-        SDL_BlitSurface(up_surface, NULL, target, &r);
+        gc.blit(up_surface, Point(0, 0));
       break;
 
     case DOWN:
-      SDL_BlitSurface(down_surface, NULL, target, &r);
+      gc.blit(up_surface, Point(0, 0));
       break;
     }
 
-  r.x = get_rect().left + 6;
-  r.y = get_rect().top  + 6;
-
-  SDL_BlitSurface(icon, NULL, target, &r);
-
-  //SDL_FillRect(target, get_rect(), color);
+  gc.blit(icon, Point(6, 6));
 }
 
 /* EOF */

Modified: trunk/netbrush/src/widget/button.hpp
===================================================================
--- trunk/netbrush/src/widget/button.hpp	2006-11-05 15:14:55 UTC (rev 692)
+++ trunk/netbrush/src/widget/button.hpp	2006-11-05 19:06:05 UTC (rev 693)
@@ -66,7 +66,7 @@
   void on_enter();
   void on_leave();
 
-  void draw(SDL_Surface* target);
+  void draw(GraphicContext& gc);
   
 private:
   Button (const Button&);

Modified: trunk/netbrush/src/widget/scrollbar.cpp
===================================================================
--- trunk/netbrush/src/widget/scrollbar.cpp	2006-11-05 15:14:55 UTC (rev 692)
+++ trunk/netbrush/src/widget/scrollbar.cpp	2006-11-05 19:06:05 UTC (rev 693)
@@ -47,32 +47,25 @@
 }
 
 void
-Scrollbar::draw(SDL_Surface* target)
+Scrollbar::draw(GraphicContext& gc)
 {
-  SDL_Rect r;
-  r.x = get_rect().left;
-  r.y = get_rect().top;
-  r.w = get_rect().get_width();
-  r.h = get_rect().get_height();
-  SDL_FillRect(target, &r, SDL_MapRGB(target->format, 200, 200, 200));
+  gc.fill_rect(get_rect(), Color(200, 200, 200));
 
   if (orientation == HORIZONTAL)
     {
-      r.x = get_rect().left + 2 + ((pos-min) * (get_rect().get_width()-4) / (max - min));
-      r.y = get_rect().top + 2;
-      r.w = page_step * (get_rect().get_width()-4) / (max - min);
-      r.h = get_rect().get_height()-4;
-
-      SDL_FillRect(target, &r, SDL_MapRGB(target->format, 0, 0, 0));
+      gc.fill_rect(Rect(Point(2 + ((pos-min) * (get_rect().get_width()-4) / (max - min)),
+                              2),
+                        Size(page_step * (get_rect().get_width()-4) / (max - min),
+                             get_rect().get_height()-4)),
+                   Color(0, 0, 0));
     }
   else // VERSION
     {
-      r.x = get_rect().left + 2;
-      r.y = get_rect().top  + 2 + ((pos-min) * (get_rect().get_height()-4) / (max - min));
-      r.w = get_rect().get_width()-4;
-      r.h = page_step * (get_rect().get_height()-4) / (max - min);
-
-      SDL_FillRect(target, &r, SDL_MapRGB(target->format, 0, 0, 0));
+      gc.fill_rect(Rect(Point(2,
+                              2 + ((pos-min) * (get_rect().get_height()-4) / (max - min))),
+                        Size(get_rect().get_width()-4,
+                             page_step * (get_rect().get_height()-4) / (max - min))),
+                   Color(0, 0, 0));
     }
 }
 

Modified: trunk/netbrush/src/widget/scrollbar.hpp
===================================================================
--- trunk/netbrush/src/widget/scrollbar.hpp	2006-11-05 15:14:55 UTC (rev 692)
+++ trunk/netbrush/src/widget/scrollbar.hpp	2006-11-05 19:06:05 UTC (rev 693)
@@ -50,7 +50,7 @@
   void on_enter() {}
   void on_leave() {}
 
-  void draw(SDL_Surface* target);
+  void draw(GraphicContext& gc);
   
   void set_pos(int p);
 private:

Modified: trunk/netbrush/src/widget/slider_widget.cpp
===================================================================
--- trunk/netbrush/src/widget/slider_widget.cpp	2006-11-05 15:14:55 UTC (rev 692)
+++ trunk/netbrush/src/widget/slider_widget.cpp	2006-11-05 19:06:05 UTC (rev 693)
@@ -93,30 +93,25 @@
 }
 
 void
-SliderWidget::draw(SDL_Surface* target)
+SliderWidget::draw(GraphicContext& gc)
 {
-  SDL_Rect rect;
-  rect.x = get_rect().left;
-  rect.y = get_rect().top;
-  rect.w = get_rect().get_width();
-  rect.h = get_rect().get_height();
+  Rect rect(0, 0, 
+            get_rect().get_width(), get_rect().get_height());
+  
+  gc.fill_rect(rect,
+               Color(200, 200, 200));
+  
+  rect.left   += 2;
+  rect.top    += 10;
+  rect.right  -= 2;
+  rect.bottom -= 10;
 
-  SDL_FillRect(target, &rect, SDL_MapRGB(target->format, 200, 200, 200));
+  gc.fill_rect(rect, Color(100, 100, 100));
 
-  rect.x += 2;
-  rect.y += 10;
-  rect.w -= 4;
-  rect.h -= 20;
-
-  SDL_FillRect(target, &rect, SDL_MapRGB(target->format, 100, 100, 100));
-
-  SDL_Rect slider;
-  slider.x = int(get_rect().get_width() * (pos - min)/(max - min)) + get_rect().left - 4;
-  slider.y = 2 + get_rect().top;
-  slider.w = 8;
-  slider.h = get_rect().get_height() - 4;
-
-  SDL_FillRect(target, &slider, SDL_MapRGB(target->format, 0, 0, 0));
+  gc.fill_rect(Rect(Point(int(get_rect().get_width() * (pos - min)/(max - min)) - 4,
+                          2),
+                    Size(8, get_rect().get_height() - 4)),
+               Color(0, 0, 0));
 }
 
 void

Modified: trunk/netbrush/src/widget/slider_widget.hpp
===================================================================
--- trunk/netbrush/src/widget/slider_widget.hpp	2006-11-05 15:14:55 UTC (rev 692)
+++ trunk/netbrush/src/widget/slider_widget.hpp	2006-11-05 19:06:05 UTC (rev 693)
@@ -63,7 +63,7 @@
   void on_enter();
   void on_leave();
 
-  void draw(SDL_Surface* target);
+  void draw(GraphicContext& gc);
 
   void set_pos(int v);
 

Modified: trunk/netbrush/src/widget/widget.hpp
===================================================================
--- trunk/netbrush/src/widget/widget.hpp	2006-11-05 15:14:55 UTC (rev 692)
+++ trunk/netbrush/src/widget/widget.hpp	2006-11-05 19:06:05 UTC (rev 693)
@@ -29,6 +29,7 @@
 #include "SDL.h"
 #include "math/rect.hpp"
 #include "events.hpp"
+#include "../graphic_context.hpp"
 
 /** */
 class Widget
@@ -56,7 +57,7 @@
   virtual void on_enter() = 0;
   virtual void on_leave() = 0;
 
-  virtual void draw(SDL_Surface* target) =0;
+  virtual void draw(GraphicContext& target) =0;
 
 private:
   Widget (const Widget&);

Modified: trunk/netbrush/src/widget/widget_manager.cpp
===================================================================
--- trunk/netbrush/src/widget/widget_manager.cpp	2006-11-05 15:14:55 UTC (rev 692)
+++ trunk/netbrush/src/widget/widget_manager.cpp	2006-11-05 19:06:05 UTC (rev 693)
@@ -30,6 +30,7 @@
 #include "events.hpp"
 #include "../globals.hpp"
 #include "../screen_buffer.hpp"
+#include "surface_graphic_context.hpp"
 #include "widget_manager.hpp"
 
 WidgetManager::WidgetManager()
@@ -157,7 +158,8 @@
 
           SDL_SetClipRect(screen, &clip_rect);
 
-          (*i)->draw(screen);
+          SurfaceGraphicContext gc(screen, (*i)->get_rect());
+          (*i)->draw(gc);
 
           SDL_SetClipRect(screen, NULL);
 

Modified: trunk/netbrush/src/widget/widget_manager.hpp
===================================================================
--- trunk/netbrush/src/widget/widget_manager.hpp	2006-11-05 15:14:55 UTC (rev 692)
+++ trunk/netbrush/src/widget/widget_manager.hpp	2006-11-05 19:06:05 UTC (rev 693)
@@ -43,6 +43,7 @@
   Widgets widgets;
   Widget* grabbed_widget;
   Widget* focused_widget;
+
 public:
   WidgetManager();
   ~WidgetManager();



From grumbel at mail.berlios.de  Sun Nov  5 20:19:53 2006
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Sun, 5 Nov 2006 20:19:53 +0100
Subject: [Flexlay-commit] r694 - trunk/netbrush/src
Message-ID: <200611051919.kA5JJr3Q008951@sheep.berlios.de>

Author: grumbel
Date: 2006-11-05 20:19:53 +0100 (Sun, 05 Nov 2006)
New Revision: 694

Modified:
   trunk/netbrush/src/color_display.cpp
Log:
- added graphic context to widget

Modified: trunk/netbrush/src/color_display.cpp
===================================================================
--- trunk/netbrush/src/color_display.cpp	2006-11-05 19:06:05 UTC (rev 693)
+++ trunk/netbrush/src/color_display.cpp	2006-11-05 19:19:53 UTC (rev 694)
@@ -50,40 +50,29 @@
 void
 ColorDisplay::draw(GraphicContext& gc)
 {
-#if 0
-  SDL_Rect r;
- 
-  r.x = get_rect().left + get_rect().get_width()/3;
-  r.y = get_rect().top  + get_rect().get_height()/3;
-  r.w = 2*get_rect().get_width()/3;
-  r.h = 2*get_rect().get_height()/3;
+  gc.fill_rect(Rect(Point(get_rect().get_width()/3,
+                          get_rect().get_height()/3),
+                    Size(2*get_rect().get_width()/3,
+                         2*get_rect().get_height()/3)),
+               Color(128, 128, 128));
 
-  SDL_FillRect(target, &r, SDL_MapRGB(target->format, 128, 128, 128));
+  gc.fill_rect(Rect(Point(get_rect().get_width()/3+1,
+                          get_rect().get_height()/3+1),
+                    Size(2*get_rect().get_width()/3-2,
+                         2*get_rect().get_height()/3-2)),
+               Color(background.r, background.g, background.b));
 
-  r.x = get_rect().left;
-  r.y = get_rect().top;
-  r.w = 2*get_rect().get_width()/3;
-  r.h = 2*get_rect().get_height()/3;
+  gc.fill_rect(Rect(Point(0, 0),
+                    Size(2*get_rect().get_width()/3,
+                         2*get_rect().get_height()/3)),
+               Color(128, 128, 128));
+                 
+  gc.fill_rect(Rect(Point(1, 1),
+                    Size(2*get_rect().get_width()/3-2,
+                         2*get_rect().get_height()/3-2)),
+               Color(foreground.r, foreground.g, foreground.b));
 
-  SDL_FillRect(target, &r, SDL_MapRGB(target->format, 128, 128, 128));
-
-  
-  r.x = get_rect().left + get_rect().get_width()/3+1;
-  r.y = get_rect().top  + get_rect().get_height()/3+1;
-  r.w = 2*get_rect().get_width()/3-2;
-  r.h = 2*get_rect().get_height()/3-2;
-
-  SDL_FillRect(target, &r, SDL_MapRGB(target->format, background.r, background.g, background.b));
-
-  r.x = get_rect().left+1;
-  r.y = get_rect().top+1;
-  r.w = 2*get_rect().get_width()/3-2;
-  r.h = 2*get_rect().get_height()/3-2;
-
-  SDL_FillRect(target, &r, SDL_MapRGB(target->format, foreground.r, foreground.g, foreground.b));
-
   if (0) std::cout << "Color: " << (int)foreground.r << " " << (int)foreground.g << " " << (int)foreground.b << std::endl;
-#endif 
 }
 
 void



From grumbel at mail.berlios.de  Sun Nov  5 23:21:08 2006
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Sun, 5 Nov 2006 23:21:08 +0100
Subject: [Flexlay-commit] r695 - trunk/netbrush/src
Message-ID: <200611052221.kA5ML8oK025287@sheep.berlios.de>

Author: grumbel
Date: 2006-11-05 23:21:07 +0100 (Sun, 05 Nov 2006)
New Revision: 695

Added:
   trunk/netbrush/src/line_tool.cpp
   trunk/netbrush/src/line_tool.hpp
Modified:
   trunk/netbrush/src/airbrush_tool.cpp
   trunk/netbrush/src/airbrush_tool.hpp
   trunk/netbrush/src/client_connection.hpp
   trunk/netbrush/src/color.cpp
   trunk/netbrush/src/color.hpp
   trunk/netbrush/src/color_display.cpp
Log:
- some ostream

Modified: trunk/netbrush/src/airbrush_tool.cpp
===================================================================
--- trunk/netbrush/src/airbrush_tool.cpp	2006-11-05 19:19:53 UTC (rev 694)
+++ trunk/netbrush/src/airbrush_tool.cpp	2006-11-05 22:21:07 UTC (rev 695)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/airbrush_tool.hpp
===================================================================
--- trunk/netbrush/src/airbrush_tool.hpp	2006-11-05 19:19:53 UTC (rev 694)
+++ trunk/netbrush/src/airbrush_tool.hpp	2006-11-05 22:21:07 UTC (rev 695)
@@ -1,5 +1,4 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
+/*   __      __ __             ___        __   __ __   __
 **  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
 **  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
 **   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/

Modified: trunk/netbrush/src/client_connection.hpp
===================================================================
--- trunk/netbrush/src/client_connection.hpp	2006-11-05 19:19:53 UTC (rev 694)
+++ trunk/netbrush/src/client_connection.hpp	2006-11-05 22:21:07 UTC (rev 695)
@@ -1,11 +1,9 @@
 /*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+**            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/color.cpp
===================================================================
--- trunk/netbrush/src/color.cpp	2006-11-05 19:19:53 UTC (rev 694)
+++ trunk/netbrush/src/color.cpp	2006-11-05 22:21:07 UTC (rev 695)
@@ -24,6 +24,7 @@
 */
 
 #include <algorithm>
+#include <iostream>
 #include "color.hpp"
 
 HSVColor::HSVColor()
@@ -109,4 +110,18 @@
   b = (0*value + (255-value) * ((255 * saturation + b * (255 - saturation))/255))/255;
 }
 
+std::ostream& operator<<(std::ostream& s, const Color& color)
+{
+  return (s << "RGBA("
+          << int(color.r) << ", " << int(color.g) << ", " << int(color.b) << ", " << int(color.a) 
+          << ")");
+}
+
+std::ostream& operator<<(std::ostream& s, const HSVColor& hsv)
+{
+  return (s << "HSV("
+          << int(hsv.hue) << ", " << int(hsv.saturation) << ", " << int(hsv.value)
+          << ")");
+}
+
 /* EOF */

Modified: trunk/netbrush/src/color.hpp
===================================================================
--- trunk/netbrush/src/color.hpp	2006-11-05 19:19:53 UTC (rev 694)
+++ trunk/netbrush/src/color.hpp	2006-11-05 22:21:07 UTC (rev 695)
@@ -26,6 +26,7 @@
 #ifndef HEADER_COLOR_HPP
 #define HEADER_COLOR_HPP
 
+#include <iosfwd>
 #include "SDL.h"
 
 struct Color;
@@ -55,6 +56,9 @@
   void apply_value_saturation(Uint8 value, Uint8 saturation);
 };
 
+std::ostream& operator<<(std::ostream& s, const Color&    rgba);
+std::ostream& operator<<(std::ostream& s, const HSVColor& hsv);
+
 #endif
 
 /* EOF */

Modified: trunk/netbrush/src/color_display.cpp
===================================================================
--- trunk/netbrush/src/color_display.cpp	2006-11-05 19:19:53 UTC (rev 694)
+++ trunk/netbrush/src/color_display.cpp	2006-11-05 22:21:07 UTC (rev 695)
@@ -72,7 +72,8 @@
                          2*get_rect().get_height()/3-2)),
                Color(foreground.r, foreground.g, foreground.b));
 
-  if (0) std::cout << "Color: " << (int)foreground.r << " " << (int)foreground.g << " " << (int)foreground.b << std::endl;
+  if (0)
+    std::cout << "Color: " << (int)foreground.r << " " << (int)foreground.g << " " << (int)foreground.b << std::endl;
 }
 
 void

Added: trunk/netbrush/src/line_tool.cpp
===================================================================
--- trunk/netbrush/src/line_tool.cpp	2006-11-05 19:19:53 UTC (rev 694)
+++ trunk/netbrush/src/line_tool.cpp	2006-11-05 22:21:07 UTC (rev 695)
@@ -0,0 +1,100 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#include <sstream>
+#include "SDL_gfx/SDL_gfxPrimitives.h"
+#include "globals.hpp"
+#include "drawing_parameter.hpp"
+#include "screen_buffer.hpp"
+#include "server_connection.hpp"
+#include "drawing_parameter.hpp"
+#include "line_tool.hpp"
+
+LineTool::LineTool()
+  : dragging(false)
+{
+}
+
+LineTool::~LineTool()
+{
+}
+
+void
+LineTool::on_motion(const ToolMotionEvent& ev)
+{
+  if (dragging)
+    {
+      p2 = Point(ev.x, ev.y);
+      screen_buffer->force_full_refresh();
+    }
+}
+
+void
+LineTool::on_button_press(const ToolButtonEvent& ev)
+{
+  dragging = true;
+  p1 = Point(ev.x, ev.y);
+}
+
+void
+LineTool::on_button_release(const ToolButtonEvent& ev)
+{
+  if (dragging)
+    {
+      dragging = false;
+      p2 = Point(ev.x, ev.y);
+
+      // FIXME: Send line drawing request
+
+      std::ostringstream str;
+      str << "set_color "
+          << int(client_draw_param->color.r) << " " 
+          << int(client_draw_param->color.g) << " " 
+          << int(client_draw_param->color.b) << std::endl;
+
+      str << "set_opacity " << int(client_draw_param->opacity) << std::endl;
+
+      str << "draw_line "
+          << p1.x  << " " << p1.y << " " 
+          << p2.x  << " " << p2.y << " " 
+          << std::endl;
+      server->send(str.str());
+    }
+}
+
+void
+LineTool::draw(SDL_Surface* target, const Rect& rect, int x_of, int y_of)
+{
+  if (dragging)
+    {
+      lineRGBA(target, 
+               p1.x + x_of,  p1.y + y_of,
+               p2.x + x_of,  p2.y + y_of,
+               client_draw_param->color.r, client_draw_param->color.g, client_draw_param->color.b, 
+               client_draw_param->opacity);
+    }
+}
+
+/* EOF */

Added: trunk/netbrush/src/line_tool.hpp
===================================================================
--- trunk/netbrush/src/line_tool.hpp	2006-11-05 19:19:53 UTC (rev 694)
+++ trunk/netbrush/src/line_tool.hpp	2006-11-05 22:21:07 UTC (rev 695)
@@ -0,0 +1,55 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_LINE_TOOL_HPP
+#define HEADER_LINE_TOOL_HPP
+
+#include "tool.hpp"
+
+/** */
+class LineTool : public Tool
+{
+private:
+  bool  dragging;
+  Point p1;
+  Point p2;
+
+public:
+  LineTool();
+  ~LineTool();
+
+  void on_motion(const ToolMotionEvent& ev);
+  void on_button_press(const ToolButtonEvent& ev);
+  void on_button_release(const ToolButtonEvent& ev);
+  void draw(SDL_Surface* target, const Rect& rect, int x_of, int y_of);
+ 
+private:
+  LineTool (const LineTool&);
+  LineTool& operator= (const LineTool&);
+};
+
+#endif
+
+/* EOF */



From grumbel at mail.berlios.de  Mon Nov  6 03:29:39 2006
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Mon, 6 Nov 2006 03:29:39 +0100
Subject: [Flexlay-commit] r696 - in trunk/netbrush: data/fonts src src/math
	src/widget
Message-ID: <200611060229.kA62TdQ6021332@sheep.berlios.de>

Author: grumbel
Date: 2006-11-06 03:29:37 +0100 (Mon, 06 Nov 2006)
New Revision: 696

Modified:
   trunk/netbrush/data/fonts/8x8font.png
   trunk/netbrush/src/airbrush_tool.hpp
   trunk/netbrush/src/alpha_picker.cpp
   trunk/netbrush/src/alpha_picker.hpp
   trunk/netbrush/src/brush_widget.cpp
   trunk/netbrush/src/brush_widget.hpp
   trunk/netbrush/src/brushmask.hpp
   trunk/netbrush/src/circle_tool.cpp
   trunk/netbrush/src/circle_tool.hpp
   trunk/netbrush/src/client.cpp
   trunk/netbrush/src/client_connection.cpp
   trunk/netbrush/src/client_state.cpp
   trunk/netbrush/src/client_state.hpp
   trunk/netbrush/src/color.cpp
   trunk/netbrush/src/color.hpp
   trunk/netbrush/src/color_display.cpp
   trunk/netbrush/src/color_display.hpp
   trunk/netbrush/src/colorpicker_tool.cpp
   trunk/netbrush/src/colorpicker_tool.hpp
   trunk/netbrush/src/controller.cpp
   trunk/netbrush/src/controller.hpp
   trunk/netbrush/src/debug.cpp
   trunk/netbrush/src/debug.hpp
   trunk/netbrush/src/drawing_context.cpp
   trunk/netbrush/src/drawing_context.hpp
   trunk/netbrush/src/drawing_parameter.cpp
   trunk/netbrush/src/drawing_parameter.hpp
   trunk/netbrush/src/generic_brush.cpp
   trunk/netbrush/src/generic_brush.hpp
   trunk/netbrush/src/globals.cpp
   trunk/netbrush/src/globals.hpp
   trunk/netbrush/src/graphic_context.hpp
   trunk/netbrush/src/grayscale_buffer.cpp
   trunk/netbrush/src/grayscale_buffer.hpp
   trunk/netbrush/src/hue_picker.cpp
   trunk/netbrush/src/hue_picker.hpp
   trunk/netbrush/src/input_device_xinput.cpp
   trunk/netbrush/src/input_device_xinput.hpp
   trunk/netbrush/src/line_tool.cpp
   trunk/netbrush/src/line_tool.hpp
   trunk/netbrush/src/math/rect.cpp
   trunk/netbrush/src/math/rect.hpp
   trunk/netbrush/src/navigation.cpp
   trunk/netbrush/src/navigation.hpp
   trunk/netbrush/src/paintbrush_tool.cpp
   trunk/netbrush/src/paintbrush_tool.hpp
   trunk/netbrush/src/rect_tool.cpp
   trunk/netbrush/src/rect_tool.hpp
   trunk/netbrush/src/region_tool.cpp
   trunk/netbrush/src/region_tool.hpp
   trunk/netbrush/src/saturation_value_picker.cpp
   trunk/netbrush/src/saturation_value_picker.hpp
   trunk/netbrush/src/screen_buffer.cpp
   trunk/netbrush/src/screen_buffer.hpp
   trunk/netbrush/src/scroll_tool.cpp
   trunk/netbrush/src/scroll_tool.hpp
   trunk/netbrush/src/server.cpp
   trunk/netbrush/src/server_connection.cpp
   trunk/netbrush/src/server_connection.hpp
   trunk/netbrush/src/stroke.cpp
   trunk/netbrush/src/stroke.hpp
   trunk/netbrush/src/stroke_buffer.cpp
   trunk/netbrush/src/stroke_buffer.hpp
   trunk/netbrush/src/surface_graphic_context.cpp
   trunk/netbrush/src/surface_graphic_context.hpp
   trunk/netbrush/src/text_view.cpp
   trunk/netbrush/src/text_view.hpp
   trunk/netbrush/src/tool.hpp
   trunk/netbrush/src/video.cpp
   trunk/netbrush/src/video.hpp
   trunk/netbrush/src/widget/button.cpp
   trunk/netbrush/src/widget/button.hpp
   trunk/netbrush/src/widget/events.hpp
   trunk/netbrush/src/widget/scrollbar.cpp
   trunk/netbrush/src/widget/scrollbar.hpp
   trunk/netbrush/src/widget/slider_widget.cpp
   trunk/netbrush/src/widget/slider_widget.hpp
   trunk/netbrush/src/widget/widget.cpp
   trunk/netbrush/src/widget/widget.hpp
   trunk/netbrush/src/widget/widget_manager.cpp
   trunk/netbrush/src/widget/widget_manager.hpp
Log:
- some more fixes to the tablet support, its now mostly useable

Modified: trunk/netbrush/data/fonts/8x8font.png
===================================================================
(Binary files differ)

Modified: trunk/netbrush/src/airbrush_tool.hpp
===================================================================
--- trunk/netbrush/src/airbrush_tool.hpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/airbrush_tool.hpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,10 +1,8 @@
-/*   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/alpha_picker.cpp
===================================================================
--- trunk/netbrush/src/alpha_picker.cpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/alpha_picker.cpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/alpha_picker.hpp
===================================================================
--- trunk/netbrush/src/alpha_picker.hpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/alpha_picker.hpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/brush_widget.cpp
===================================================================
--- trunk/netbrush/src/brush_widget.cpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/brush_widget.cpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/brush_widget.hpp
===================================================================
--- trunk/netbrush/src/brush_widget.hpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/brush_widget.hpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/brushmask.hpp
===================================================================
--- trunk/netbrush/src/brushmask.hpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/brushmask.hpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/circle_tool.cpp
===================================================================
--- trunk/netbrush/src/circle_tool.cpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/circle_tool.cpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/circle_tool.hpp
===================================================================
--- trunk/netbrush/src/circle_tool.hpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/circle_tool.hpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/client.cpp
===================================================================
--- trunk/netbrush/src/client.cpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/client.cpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -35,6 +35,8 @@
 #define F_OK   0
 #endif
 
+SDL_SysWMinfo syswm;
+
 SDL_Rect* make_rect(int x, int y, int w, int h)
 {
   static SDL_Rect rect;
@@ -153,8 +155,17 @@
 
         case SDL_SYSWMEVENT:
           if (xinput)
-            xinput->on_xevent(event.syswm.msg->event.xevent);
+            {
+              syswm.info.x11.lock_func();
+              xinput->on_xevent(syswm.info.x11.display, syswm.info.x11.window, 
+                                event.syswm.msg->event.xevent);
+              syswm.info.x11.unlock_func();
+            }
           break;
+
+        default: 
+          std::cout << "Unknown event" << std::endl;
+          break;
         }
     }  
 }
@@ -284,8 +295,6 @@
 
     if (!stylus.empty()) // enable tablet support
       {
-        SDL_SysWMinfo syswm;
-
         SDL_VERSION(&syswm.version); // this is important!
         if (SDL_GetWMInfo(&syswm) == -1)
           {
@@ -293,7 +302,7 @@
           }
 
         syswm.info.x11.lock_func();
-        xinput = new InputDevice_XInput(syswm.info.x11.display, stylus);
+        xinput = new InputDevice_XInput(syswm.info.x11.display, syswm.info.x11.window, stylus);
         syswm.info.x11.unlock_func();
 
         SDL_EventState(SDL_SYSWMEVENT, SDL_ENABLE);

Modified: trunk/netbrush/src/client_connection.cpp
===================================================================
--- trunk/netbrush/src/client_connection.cpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/client_connection.cpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/client_state.cpp
===================================================================
--- trunk/netbrush/src/client_state.cpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/client_state.cpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/client_state.hpp
===================================================================
--- trunk/netbrush/src/client_state.hpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/client_state.hpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/color.cpp
===================================================================
--- trunk/netbrush/src/color.cpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/color.cpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/color.hpp
===================================================================
--- trunk/netbrush/src/color.hpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/color.hpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/color_display.cpp
===================================================================
--- trunk/netbrush/src/color_display.cpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/color_display.cpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/color_display.hpp
===================================================================
--- trunk/netbrush/src/color_display.hpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/color_display.hpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/colorpicker_tool.cpp
===================================================================
--- trunk/netbrush/src/colorpicker_tool.cpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/colorpicker_tool.cpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/colorpicker_tool.hpp
===================================================================
--- trunk/netbrush/src/colorpicker_tool.hpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/colorpicker_tool.hpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/controller.cpp
===================================================================
--- trunk/netbrush/src/controller.cpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/controller.cpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License
@@ -193,7 +190,12 @@
   brush_widget = new BrushWidget(Rect(Point(screen->w-128, 128+24+24), Size(128, 128)));
   widget_manager->add(brush_widget);
 
-  text_view->put("netBrush Version 0.1.0\n");
+  text_view->put("          _   ___              _\n"
+                 " _ _  ___| |_| _ )_ _ _  _ _ _| |_\n"
+                 "| ' \\/ -_)  _| _ \\ '_| || (_-<|   |\n"
+                 "|_||_\\___|\\__|___/_|  \\_,_/__/|_|_|\n"
+                 "netBrush 0.1.0 - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>\n");
+
   set_generic_brush(client_draw_param->generic_brush);
 
   set_color(Color(0, 0, 0));

Modified: trunk/netbrush/src/controller.hpp
===================================================================
--- trunk/netbrush/src/controller.hpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/controller.hpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/debug.cpp
===================================================================
--- trunk/netbrush/src/debug.cpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/debug.cpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/debug.hpp
===================================================================
--- trunk/netbrush/src/debug.hpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/debug.hpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/drawing_context.cpp
===================================================================
--- trunk/netbrush/src/drawing_context.cpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/drawing_context.cpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/drawing_context.hpp
===================================================================
--- trunk/netbrush/src/drawing_context.hpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/drawing_context.hpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/drawing_parameter.cpp
===================================================================
--- trunk/netbrush/src/drawing_parameter.cpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/drawing_parameter.cpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/drawing_parameter.hpp
===================================================================
--- trunk/netbrush/src/drawing_parameter.hpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/drawing_parameter.hpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/generic_brush.cpp
===================================================================
--- trunk/netbrush/src/generic_brush.cpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/generic_brush.cpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/generic_brush.hpp
===================================================================
--- trunk/netbrush/src/generic_brush.hpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/generic_brush.hpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/globals.cpp
===================================================================
--- trunk/netbrush/src/globals.cpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/globals.cpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/globals.hpp
===================================================================
--- trunk/netbrush/src/globals.hpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/globals.hpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/graphic_context.hpp
===================================================================
--- trunk/netbrush/src/graphic_context.hpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/graphic_context.hpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/grayscale_buffer.cpp
===================================================================
--- trunk/netbrush/src/grayscale_buffer.cpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/grayscale_buffer.cpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License
@@ -101,7 +98,7 @@
 void
 GrayscaleBuffer::blit(GrayscaleBuffer* source, int of_x, int of_y, Uint8 alpha, BlendMode mode)
 {
-  std::cout << "alpha: " << mode << " " << int(alpha) << std::endl;
+  //std::cout << "alpha: " << mode << " " << int(alpha) << std::endl;
   int start_x = std::max(of_x, 0);
   int start_y = std::max(of_y, 0);
 
@@ -153,7 +150,7 @@
             Uint8& p = source->buffer[(y - of_y) * source->width + (x - of_x)];
             
             // Works, but not exactly alpha
-            f = std::max(std::min(f + (alpha * p/255), 255), 0);
+            f = std::max(std::min(f + (alpha * p/255)/4, 255), 0);
             //f = alpha;
 
             //f = (((255 - p) * f) + (p * p))/255; 

Modified: trunk/netbrush/src/grayscale_buffer.hpp
===================================================================
--- trunk/netbrush/src/grayscale_buffer.hpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/grayscale_buffer.hpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/hue_picker.cpp
===================================================================
--- trunk/netbrush/src/hue_picker.cpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/hue_picker.cpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/hue_picker.hpp
===================================================================
--- trunk/netbrush/src/hue_picker.hpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/hue_picker.hpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/input_device_xinput.cpp
===================================================================
--- trunk/netbrush/src/input_device_xinput.cpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/input_device_xinput.cpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -53,7 +53,7 @@
 #define INVALID_EVENT_TYPE	-1
 #define verbose false
 
-InputDevice_XInput::InputDevice_XInput(Display* dpy, const std::string& name_)
+InputDevice_XInput::InputDevice_XInput(Display* dpy, Window w, const std::string& name_)
   : name(name_),
     absolute(false),
     num_keys   (0),
@@ -67,6 +67,13 @@
     proximity_out_type (INVALID_EVENT_TYPE)
 
 {
+  window_rect = get_window_rect(dpy, w);
+
+  display_width  = DisplayWidth(dpy, DefaultScreen(dpy));
+  display_height = DisplayHeight(dpy, DefaultScreen(dpy));
+
+  //std::cout << "WindowRect: " << window_rect << std::endl;
+
   XDeviceInfo* info = find_device_info(dpy, name.c_str(), True);
   if (!info)
     std::cout << "InputDeviceXInput Error: Couldn't find device: " << name << std::endl;
@@ -87,6 +94,51 @@
 	
 }
 
+Rect
+InputDevice_XInput::get_window_rect(Display* dpy, Window w)
+{ // Calculate the exact positon of the window
+  Window root_win = RootWindow(dpy, DefaultScreen(dpy)); 
+  Window current_window = w;
+
+  int w_x, w_y, w_w, w_h;
+
+  int x, y;
+  unsigned int width, height;
+  unsigned int border, depth;
+  Window root;
+  XGetGeometry(dpy, w,
+               &root, &x, &y, &width, &height, &border, &depth);
+  
+  window_x = x;
+  window_y = y;
+  w_x = x;
+  w_y = y;
+  w_w = width;
+  w_h = height;
+
+  while(current_window != root_win)
+    {
+      Window  parent;
+      Window* children;
+      unsigned int num_children;
+      XQueryTree(dpy, current_window, &root, &parent, &children, &num_children);
+
+      XGetGeometry(dpy, parent,
+                   &root, &x, &y, &width, &height, &border, &depth);
+
+      w_x += x;
+      w_y += y;
+
+      if (children)
+        XFree(children);
+      
+      current_window = parent;
+    }
+
+  return Rect(Point(w_x, w_y),
+              Size(w_w, w_h));
+}
+
 void
 InputDevice_XInput::get_info(XDeviceInfo* info)
 {
@@ -254,7 +306,7 @@
 }
 
 void
-InputDevice_XInput::on_xevent(XEvent &event)
+InputDevice_XInput::on_xevent(Display* dpy, Window w, XEvent &event)
 {
   if (0)
     std::cout << this << " event: "
@@ -268,6 +320,14 @@
               << proximity_in_type << " "
               << std::endl;
 
+  if (event.type == ConfigureNotify) //Resize or Move
+    { // FIXME: Due to the way SDL works, this one is never ever reached
+      //window_x = x;
+      //window_y = y;
+      std::cout 
+        << event.xconfigure.x     << " " << event.xconfigure.y << " " 
+        << event.xconfigure.width << " " << event.xconfigure.height << std::endl;
+    }
   if (event.type == motion_type)
     {
       on_device_motion_event((XDeviceMotionEvent *)&event);
@@ -285,11 +345,14 @@
   else if ((event.type == proximity_out_type) ||
            (event.type == proximity_in_type))
     {
+      // FIXME: This shouldn't be here
+      window_rect = get_window_rect(dpy, w);
+
       on_proximity_notify_event((XProximityNotifyEvent*)&event);
     }
   else
     {  // Events that aren't XInput events lang here (focus and stuff)
-      if (verbose) printf("InputDevice_XInput: what's that %d\n", event.type);
+      printf("InputDevice_XInput: what's that %d\n", event.type);
     }
 }
 
@@ -372,7 +435,11 @@
 
   if (0) 
     printf("x: %1.5f y: %1.5f pressure: %1.5f x_tilt: %2.5f y_tilt: %2.5f\n", x, y, pressure, x_tilt, y_tilt);
-  widget_manager->on_pen_motion(PenEvent(x * 1152, y * 864, // FIXME: Calculate those dynamically
+
+  // translate the pen coordinates into window space and send them to
+  // the WidgetManager
+  widget_manager->on_pen_motion(PenEvent(x * display_width  - window_rect.left,
+                                         y * display_height - window_rect.top, 
                                          pressure, 
                                          x_tilt, y_tilt));
 }

Modified: trunk/netbrush/src/input_device_xinput.hpp
===================================================================
--- trunk/netbrush/src/input_device_xinput.hpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/input_device_xinput.hpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -26,6 +26,7 @@
 
 #include <vector>
 #include "../src/math/point.hpp"
+#include "../src/math/rect.hpp"
 #include <X11/Xlib.h>
 #include <X11/Xutil.h>
 #include <X11/extensions/XInput.h>
@@ -34,7 +35,7 @@
 {
   //!Construction:
 public:
-  InputDevice_XInput(Display* dpy, const std::string& name);
+  InputDevice_XInput(Display* dpy, Window w, const std::string& name);
 
   virtual ~InputDevice_XInput();
 
@@ -75,7 +76,7 @@
 
   void get_info(XDeviceInfo	*info);
 public:
-  void on_xevent(XEvent &event);
+  void on_xevent(Display* dpy, Window w, XEvent &event);
   bool in_proximity() const { return proximity; }
 private:
   void on_device_button_event(XDeviceButtonEvent *button);
@@ -83,9 +84,17 @@
   void on_device_motion_event(XDeviceMotionEvent* motion);
   void on_proximity_notify_event(XProximityNotifyEvent* prox);
 
+  Rect get_window_rect(Display* dpy, Window w);
 private:
   void received_mouse_input(XEvent &event);
   void received_mouse_move(XEvent &event);
+
+  // Window size and stuff used to translate coordinates
+  Rect window_rect;
+  // window x/y coordinates, border included!
+  int  window_x, window_y;
+  int  display_width;
+  int  display_height;
 	
   std::string name;
 

Modified: trunk/netbrush/src/line_tool.cpp
===================================================================
--- trunk/netbrush/src/line_tool.cpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/line_tool.cpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/line_tool.hpp
===================================================================
--- trunk/netbrush/src/line_tool.hpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/line_tool.hpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/math/rect.cpp
===================================================================
--- trunk/netbrush/src/math/rect.cpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/math/rect.cpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -29,7 +29,7 @@
 
 
 #include <cmath>
-
+#include <iostream>
 #include "rect.hpp"
 
 #define cl_min(a,b) ((a < b) ? a : b)
@@ -60,3 +60,10 @@
 		angle);
 }
 
+std::ostream& operator<<(std::ostream& s, const Rect& rect)
+{
+  return (s << rect.left  << ", " << rect.top << ", "
+          << rect.right << ", " << rect.bottom);
+}
+
+/* EOF */

Modified: trunk/netbrush/src/math/rect.hpp
===================================================================
--- trunk/netbrush/src/math/rect.hpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/math/rect.hpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -30,6 +30,7 @@
 #ifndef __MATH_RECT_HPP__
 #define __MATH_RECT_HPP__
 
+#include <iosfwd>
 #include "origin.hpp"
 #include "vector.hpp"
 #include "size.hpp"
@@ -370,5 +371,7 @@
 	  bottom(static_cast<int>(rect.bottom))
 {}
 
+std::ostream& operator<<(std::ostream& s, const Rect& rect);
+
 #endif
 

Modified: trunk/netbrush/src/navigation.cpp
===================================================================
--- trunk/netbrush/src/navigation.cpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/navigation.cpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/navigation.hpp
===================================================================
--- trunk/netbrush/src/navigation.hpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/navigation.hpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/paintbrush_tool.cpp
===================================================================
--- trunk/netbrush/src/paintbrush_tool.cpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/paintbrush_tool.cpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/paintbrush_tool.hpp
===================================================================
--- trunk/netbrush/src/paintbrush_tool.hpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/paintbrush_tool.hpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/rect_tool.cpp
===================================================================
--- trunk/netbrush/src/rect_tool.cpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/rect_tool.cpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/rect_tool.hpp
===================================================================
--- trunk/netbrush/src/rect_tool.hpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/rect_tool.hpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/region_tool.cpp
===================================================================
--- trunk/netbrush/src/region_tool.cpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/region_tool.cpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/region_tool.hpp
===================================================================
--- trunk/netbrush/src/region_tool.hpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/region_tool.hpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/saturation_value_picker.cpp
===================================================================
--- trunk/netbrush/src/saturation_value_picker.cpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/saturation_value_picker.cpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/saturation_value_picker.hpp
===================================================================
--- trunk/netbrush/src/saturation_value_picker.hpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/saturation_value_picker.hpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/screen_buffer.cpp
===================================================================
--- trunk/netbrush/src/screen_buffer.cpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/screen_buffer.cpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/screen_buffer.hpp
===================================================================
--- trunk/netbrush/src/screen_buffer.hpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/screen_buffer.hpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/scroll_tool.cpp
===================================================================
--- trunk/netbrush/src/scroll_tool.cpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/scroll_tool.cpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/scroll_tool.hpp
===================================================================
--- trunk/netbrush/src/scroll_tool.hpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/scroll_tool.hpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/server.cpp
===================================================================
--- trunk/netbrush/src/server.cpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/server.cpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,3 +1,25 @@
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
 #include <string>
 #include <iostream>
 #include <fstream>

Modified: trunk/netbrush/src/server_connection.cpp
===================================================================
--- trunk/netbrush/src/server_connection.cpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/server_connection.cpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/server_connection.hpp
===================================================================
--- trunk/netbrush/src/server_connection.hpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/server_connection.hpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/stroke.cpp
===================================================================
--- trunk/netbrush/src/stroke.cpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/stroke.cpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License
@@ -54,18 +51,15 @@
       // by from the InputDevice and interpolates new dabs inbetween to
       // give them an equal spacing (ie. every dab is only 'spacing' away
       // from the next)
-      
       const Dab& prev_dab = dabs.back();
       const Dab& next_dab = dab;
 
       Vector dist  = next_dab.pos - prev_dab.pos;
-      float length = sqrt(dist.x * dist.x + dist.y * dist.y);
+      float length = dist.length();
       int n = 1;
     
-      // Spacing is keep relative to the brush size
-      // FIXME: This is specific to a Sprite based drawer, might not work for others
       // FIXME: y_spacing isn't taken into account either
-      float local_spacing = x_spacing * prev_dab.pressure;
+      float local_spacing = x_spacing;
 
       while (length + overspace > (local_spacing * n))
         {
@@ -118,7 +112,7 @@
           // Spacing is keep relative to the brush size
           // FIXME: This is specific to a Sprite based drawer, might not work for others
           // FIXME: y_spacing isn't taken into account either
-          float local_spacing = x_spacing * dabs[j].pressure;
+          float local_spacing = x_spacing;
 
           while (length + overspace > (local_spacing * n))
             {

Modified: trunk/netbrush/src/stroke.hpp
===================================================================
--- trunk/netbrush/src/stroke.hpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/stroke.hpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/stroke_buffer.cpp
===================================================================
--- trunk/netbrush/src/stroke_buffer.cpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/stroke_buffer.cpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/stroke_buffer.hpp
===================================================================
--- trunk/netbrush/src/stroke_buffer.hpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/stroke_buffer.hpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/surface_graphic_context.cpp
===================================================================
--- trunk/netbrush/src/surface_graphic_context.cpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/surface_graphic_context.cpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/surface_graphic_context.hpp
===================================================================
--- trunk/netbrush/src/surface_graphic_context.hpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/surface_graphic_context.hpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/text_view.cpp
===================================================================
--- trunk/netbrush/src/text_view.cpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/text_view.cpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License
@@ -60,7 +57,8 @@
 TextView::draw(GraphicContext& gc)
 {
   if (1)
-    gc.fill_rect(get_rect(), Color(64, 64, 64));
+    gc.fill_rect(Rect(0, 0, get_rect().get_width(), get_rect().get_height()),
+                 Color(64, 64, 64));
   
   // FIXME: move font handling in GraphicContext
   TTY_Blit(tty, gc.get_surface(), get_rect().left, get_rect().top);

Modified: trunk/netbrush/src/text_view.hpp
===================================================================
--- trunk/netbrush/src/text_view.hpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/text_view.hpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/tool.hpp
===================================================================
--- trunk/netbrush/src/tool.hpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/tool.hpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/video.cpp
===================================================================
--- trunk/netbrush/src/video.cpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/video.cpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/video.hpp
===================================================================
--- trunk/netbrush/src/video.hpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/video.hpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/widget/button.cpp
===================================================================
--- trunk/netbrush/src/widget/button.cpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/widget/button.cpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/widget/button.hpp
===================================================================
--- trunk/netbrush/src/widget/button.hpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/widget/button.hpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/widget/events.hpp
===================================================================
--- trunk/netbrush/src/widget/events.hpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/widget/events.hpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/widget/scrollbar.cpp
===================================================================
--- trunk/netbrush/src/widget/scrollbar.cpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/widget/scrollbar.cpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License
@@ -49,7 +46,7 @@
 void
 Scrollbar::draw(GraphicContext& gc)
 {
-  gc.fill_rect(get_rect(), Color(200, 200, 200));
+  gc.fill_rect(Rect(0, 0, get_width(), get_height()), Color(200, 200, 200));
 
   if (orientation == HORIZONTAL)
     {

Modified: trunk/netbrush/src/widget/scrollbar.hpp
===================================================================
--- trunk/netbrush/src/widget/scrollbar.hpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/widget/scrollbar.hpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/widget/slider_widget.cpp
===================================================================
--- trunk/netbrush/src/widget/slider_widget.cpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/widget/slider_widget.cpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/widget/slider_widget.hpp
===================================================================
--- trunk/netbrush/src/widget/slider_widget.hpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/widget/slider_widget.hpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/widget/widget.cpp
===================================================================
--- trunk/netbrush/src/widget/widget.cpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/widget/widget.cpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/netbrush/src/widget/widget.hpp
===================================================================
--- trunk/netbrush/src/widget/widget.hpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/widget/widget.hpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License
@@ -46,6 +43,8 @@
   void set_dirty(bool d) { dirty = d; }
 
   const Rect& get_rect() { return rect; }
+  int get_width() { return rect.get_width(); }
+  int get_height() { return rect.get_height(); }
 
   virtual bool do_update() { return true; }
   

Modified: trunk/netbrush/src/widget/widget_manager.cpp
===================================================================
--- trunk/netbrush/src/widget/widget_manager.cpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/widget/widget_manager.cpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License
@@ -140,7 +137,10 @@
 WidgetManager::on_pen_motion(const PenEvent& pen)
 {
   // FIXME: Hack, should to normal widget handling instead
-  screen_buffer->on_pen_motion(pen);
+  PenEvent new_pen = pen;
+  new_pen.x -= screen_buffer->get_rect().left;
+  new_pen.y -= screen_buffer->get_rect().top;
+  screen_buffer->on_pen_motion(new_pen);
 }
 
 void

Modified: trunk/netbrush/src/widget/widget_manager.hpp
===================================================================
--- trunk/netbrush/src/widget/widget_manager.hpp	2006-11-05 22:21:07 UTC (rev 695)
+++ trunk/netbrush/src/widget/widget_manager.hpp	2006-11-06 02:29:37 UTC (rev 696)
@@ -1,11 +1,8 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+/*            _   ___              _   
+**   _ _  ___| |_| _ )_ _ _  _ _ _| |_ 
+**  | ' \/ -_)  _| _ \ '_| || (_-<|   |
+**  |_||_\___|\__|___/_|  \_,_/__/|_|_|
+**  netBrush - Copyright (C) 2006 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License



From grumbel at mail.berlios.de  Mon Nov  6 18:44:41 2006
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Mon, 6 Nov 2006 18:44:41 +0100
Subject: [Flexlay-commit] r697 - in trunk/netbrush: . src src/widget
Message-ID: <200611061744.kA6Hif97000562@sheep.berlios.de>

Author: grumbel
Date: 2006-11-06 18:44:35 +0100 (Mon, 06 Nov 2006)
New Revision: 697

Modified:
   trunk/netbrush/BUGS
   trunk/netbrush/src/airbrush_tool.cpp
   trunk/netbrush/src/client.cpp
   trunk/netbrush/src/input_device_xinput.cpp
   trunk/netbrush/src/input_device_xinput.hpp
   trunk/netbrush/src/screen_buffer.cpp
   trunk/netbrush/src/screen_buffer.hpp
   trunk/netbrush/src/widget/widget_manager.cpp
   trunk/netbrush/src/widget/widget_manager.hpp
Log:
- some more graphic tablet support, now actually usable, except for bugs

Modified: trunk/netbrush/BUGS
===================================================================
--- trunk/netbrush/BUGS	2006-11-06 02:29:37 UTC (rev 696)
+++ trunk/netbrush/BUGS	2006-11-06 17:44:35 UTC (rev 697)
@@ -13,5 +13,6 @@
 
 - picking a color doesn't change the color widgets correctly
 
+- SDL eats window move events, so we can't properly react to them
 
 # EOF #

Modified: trunk/netbrush/src/airbrush_tool.cpp
===================================================================
--- trunk/netbrush/src/airbrush_tool.cpp	2006-11-06 02:29:37 UTC (rev 696)
+++ trunk/netbrush/src/airbrush_tool.cpp	2006-11-06 17:44:35 UTC (rev 697)
@@ -76,7 +76,6 @@
     {
       if (!current_stroke)
         {
-          std::cout << "Motian start" << std::endl;
           current_stroke = new Stroke();
           pen_active = true;
         }      
@@ -102,7 +101,6 @@
     }
   else if (current_stroke)
     {
-      std::cout << "Motian End" << std::endl;
       stroke_buffer->clear();
       server->send_stroke(*current_stroke, client_draw_param);
 

Modified: trunk/netbrush/src/client.cpp
===================================================================
--- trunk/netbrush/src/client.cpp	2006-11-06 02:29:37 UTC (rev 696)
+++ trunk/netbrush/src/client.cpp	2006-11-06 17:44:35 UTC (rev 697)
@@ -139,18 +139,15 @@
           break;
 
         case SDL_MOUSEBUTTONDOWN:
-          if (!(xinput && xinput->in_proximity()))
-            widget_manager->on_mouse_button(event.button);
+          widget_manager->on_mouse_button(event.button);
           break;
 
         case SDL_MOUSEBUTTONUP:
-          if (!(xinput && xinput->in_proximity()))
-            widget_manager->on_mouse_button(event.button);
+          widget_manager->on_mouse_button(event.button);
           break;
 
         case SDL_MOUSEMOTION:
-          if (!(xinput && xinput->in_proximity()))
-            widget_manager->on_mouse_motion(event.motion);
+          widget_manager->on_mouse_motion(event.motion);
           break;
 
         case SDL_SYSWMEVENT:
@@ -164,7 +161,7 @@
           break;
 
         default: 
-          std::cout << "Unknown event" << std::endl;
+          std::cout << "Unhandled SDL event: " << int(event.type) << std::endl;
           break;
         }
     }  

Modified: trunk/netbrush/src/input_device_xinput.cpp
===================================================================
--- trunk/netbrush/src/input_device_xinput.cpp	2006-11-06 02:29:37 UTC (rev 696)
+++ trunk/netbrush/src/input_device_xinput.cpp	2006-11-06 17:44:35 UTC (rev 697)
@@ -67,11 +67,6 @@
     proximity_out_type (INVALID_EVENT_TYPE)
 
 {
-  window_rect = get_window_rect(dpy, w);
-
-  display_width  = DisplayWidth(dpy, DefaultScreen(dpy));
-  display_height = DisplayHeight(dpy, DefaultScreen(dpy));
-
   //std::cout << "WindowRect: " << window_rect << std::endl;
 
   XDeviceInfo* info = find_device_info(dpy, name.c_str(), True);
@@ -94,51 +89,6 @@
 	
 }
 
-Rect
-InputDevice_XInput::get_window_rect(Display* dpy, Window w)
-{ // Calculate the exact positon of the window
-  Window root_win = RootWindow(dpy, DefaultScreen(dpy)); 
-  Window current_window = w;
-
-  int w_x, w_y, w_w, w_h;
-
-  int x, y;
-  unsigned int width, height;
-  unsigned int border, depth;
-  Window root;
-  XGetGeometry(dpy, w,
-               &root, &x, &y, &width, &height, &border, &depth);
-  
-  window_x = x;
-  window_y = y;
-  w_x = x;
-  w_y = y;
-  w_w = width;
-  w_h = height;
-
-  while(current_window != root_win)
-    {
-      Window  parent;
-      Window* children;
-      unsigned int num_children;
-      XQueryTree(dpy, current_window, &root, &parent, &children, &num_children);
-
-      XGetGeometry(dpy, parent,
-                   &root, &x, &y, &width, &height, &border, &depth);
-
-      w_x += x;
-      w_y += y;
-
-      if (children)
-        XFree(children);
-      
-      current_window = parent;
-    }
-
-  return Rect(Point(w_x, w_y),
-              Size(w_w, w_h));
-}
-
 void
 InputDevice_XInput::get_info(XDeviceInfo* info)
 {
@@ -320,17 +270,9 @@
               << proximity_in_type << " "
               << std::endl;
 
-  if (event.type == ConfigureNotify) //Resize or Move
-    { // FIXME: Due to the way SDL works, this one is never ever reached
-      //window_x = x;
-      //window_y = y;
-      std::cout 
-        << event.xconfigure.x     << " " << event.xconfigure.y << " " 
-        << event.xconfigure.width << " " << event.xconfigure.height << std::endl;
-    }
   if (event.type == motion_type)
     {
-      on_device_motion_event((XDeviceMotionEvent *)&event);
+      on_device_motion_event(dpy, w, (XDeviceMotionEvent *)&event);
     }
   else if ((event.type == button_press_type) ||
            (event.type == button_release_type))
@@ -345,14 +287,12 @@
   else if ((event.type == proximity_out_type) ||
            (event.type == proximity_in_type))
     {
-      // FIXME: This shouldn't be here
-      window_rect = get_window_rect(dpy, w);
-
       on_proximity_notify_event((XProximityNotifyEvent*)&event);
     }
   else
     {  // Events that aren't XInput events lang here (focus and stuff)
-      printf("InputDevice_XInput: what's that %d\n", event.type);
+      if (verbose)
+        printf("InputDevice_XInput: what's that %d\n", event.type);
     }
 }
 
@@ -385,7 +325,7 @@
 }
 
 void
-InputDevice_XInput::on_device_motion_event(XDeviceMotionEvent* motion)
+InputDevice_XInput::on_device_motion_event(Display* dpy, Window w, XDeviceMotionEvent* motion)
 {
   if (verbose) printf("motion ");
   float x;
@@ -435,11 +375,17 @@
 
   if (0) 
     printf("x: %1.5f y: %1.5f pressure: %1.5f x_tilt: %2.5f y_tilt: %2.5f\n", x, y, pressure, x_tilt, y_tilt);
+  
+  // Translate tablet coordinates into window coordinates
+  Window child_return;
+  int x_origin, y_origin;
+  XTranslateCoordinates(dpy, w, RootWindow(dpy, DefaultScreen(dpy)), 0, 0, &x_origin, &y_origin, &child_return);
 
-  // translate the pen coordinates into window space and send them to
-  // the WidgetManager
-  widget_manager->on_pen_motion(PenEvent(x * display_width  - window_rect.left,
-                                         y * display_height - window_rect.top, 
+  int display_width  = DisplayWidth(dpy, DefaultScreen(dpy));
+  int display_height = DisplayHeight(dpy, DefaultScreen(dpy));
+
+  widget_manager->on_pen_motion(PenEvent(x * display_width  - x_origin,
+                                         y * display_height - y_origin,
                                          pressure, 
                                          x_tilt, y_tilt));
 }

Modified: trunk/netbrush/src/input_device_xinput.hpp
===================================================================
--- trunk/netbrush/src/input_device_xinput.hpp	2006-11-06 02:29:37 UTC (rev 696)
+++ trunk/netbrush/src/input_device_xinput.hpp	2006-11-06 17:44:35 UTC (rev 697)
@@ -81,20 +81,12 @@
 private:
   void on_device_button_event(XDeviceButtonEvent *button);
   void on_device_key_event(XDeviceKeyEvent* key);
-  void on_device_motion_event(XDeviceMotionEvent* motion);
+  void on_device_motion_event(Display* dpy, Window w, XDeviceMotionEvent* motion);
   void on_proximity_notify_event(XProximityNotifyEvent* prox);
 
-  Rect get_window_rect(Display* dpy, Window w);
 private:
   void received_mouse_input(XEvent &event);
   void received_mouse_move(XEvent &event);
-
-  // Window size and stuff used to translate coordinates
-  Rect window_rect;
-  // window x/y coordinates, border included!
-  int  window_x, window_y;
-  int  display_width;
-  int  display_height;
 	
   std::string name;
 

Modified: trunk/netbrush/src/screen_buffer.cpp
===================================================================
--- trunk/netbrush/src/screen_buffer.cpp	2006-11-06 02:29:37 UTC (rev 696)
+++ trunk/netbrush/src/screen_buffer.cpp	2006-11-06 17:44:35 UTC (rev 697)
@@ -44,8 +44,7 @@
   : Widget(rect),
     complete_refresh(false),
     scroll_offset_x(0),
-    scroll_offset_y(0),
-    pen_active(false)
+    scroll_offset_y(0)
 {
   tools.push_back(airbrush_tool    = new AirbrushTool());
   tools.push_back(scroll_tool      = new ScrollTool());
@@ -225,15 +224,6 @@
 void
 ScreenBuffer::on_pen_motion(const PenEvent& pen)
 {
-  if (pen.pressure > 0)
-    {
-      pen_active = true;
-    }
-  else
-    {
-      
-    }
-
   tools.front()->on_pen_motion(pen);
 }
 

Modified: trunk/netbrush/src/screen_buffer.hpp
===================================================================
--- trunk/netbrush/src/screen_buffer.hpp	2006-11-06 02:29:37 UTC (rev 696)
+++ trunk/netbrush/src/screen_buffer.hpp	2006-11-06 17:44:35 UTC (rev 697)
@@ -57,8 +57,6 @@
   AirbrushTool*    airbrush_tool;
   LineTool*    line_tool;
 
-  bool pen_active;
-
   typedef std::vector<Tool*> Tools;
   Tools tools;
 public:

Modified: trunk/netbrush/src/widget/widget_manager.cpp
===================================================================
--- trunk/netbrush/src/widget/widget_manager.cpp	2006-11-06 02:29:37 UTC (rev 696)
+++ trunk/netbrush/src/widget/widget_manager.cpp	2006-11-06 17:44:35 UTC (rev 697)
@@ -133,14 +133,31 @@
     }
 }
 
+Widget*
+WidgetManager::get_widget(const Point& p) const
+{
+  for(Widgets::const_iterator i = widgets.begin(); i != widgets.end(); ++i)
+    {
+      if ((*i)->get_rect().is_inside(Point(p.x, p.y)))
+        return (*i);
+    }
+  return 0;
+}
+
 void
 WidgetManager::on_pen_motion(const PenEvent& pen)
 {
   // FIXME: Hack, should to normal widget handling instead
   PenEvent new_pen = pen;
-  new_pen.x -= screen_buffer->get_rect().left;
-  new_pen.y -= screen_buffer->get_rect().top;
-  screen_buffer->on_pen_motion(new_pen);
+
+  Widget* widget = get_widget(Point(int(new_pen.x), int(new_pen.y)));
+  if (widget)
+    {
+      new_pen.x -= screen_buffer->get_rect().left;
+      new_pen.y -= widget->get_rect().top;
+
+      widget->on_pen_motion(new_pen);
+    }
 }
 
 void

Modified: trunk/netbrush/src/widget/widget_manager.hpp
===================================================================
--- trunk/netbrush/src/widget/widget_manager.hpp	2006-11-06 02:29:37 UTC (rev 696)
+++ trunk/netbrush/src/widget/widget_manager.hpp	2006-11-06 17:44:35 UTC (rev 697)
@@ -26,6 +26,7 @@
 #include <list>
 #include "SDL.h"
 
+class Point;
 class MouseMotionEvent;
 class MouseButtonEvent;
 class PenEvent;
@@ -57,6 +58,8 @@
   void update();
 
 private:
+  Widget* get_widget(const Point& p) const;
+
   WidgetManager (const WidgetManager&);
   WidgetManager& operator= (const WidgetManager&);
 };



From grumbel at mail.berlios.de  Mon Nov  6 19:12:48 2006
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Mon, 6 Nov 2006 19:12:48 +0100
Subject: [Flexlay-commit] r698 - trunk/netbrush/src
Message-ID: <200611061812.kA6ICmpP003406@sheep.berlios.de>

Author: grumbel
Date: 2006-11-06 19:12:36 +0100 (Mon, 06 Nov 2006)
New Revision: 698

Modified:
   trunk/netbrush/src/grayscale_buffer.cpp
   trunk/netbrush/src/grayscale_buffer.hpp
   trunk/netbrush/src/screen_buffer.cpp
Log:
- some bug fixing

Modified: trunk/netbrush/src/grayscale_buffer.cpp
===================================================================
--- trunk/netbrush/src/grayscale_buffer.cpp	2006-11-06 17:44:35 UTC (rev 697)
+++ trunk/netbrush/src/grayscale_buffer.cpp	2006-11-06 18:12:36 UTC (rev 698)
@@ -164,6 +164,12 @@
     }
 }
 
+Uint8
+GrayscaleBuffer::interpolated_at(float x, float y) const
+{
+  return 0; //at(x, y)
+}
+
 #ifdef __TEST__
 #include <stdio.h>
 

Modified: trunk/netbrush/src/grayscale_buffer.hpp
===================================================================
--- trunk/netbrush/src/grayscale_buffer.hpp	2006-11-06 17:44:35 UTC (rev 697)
+++ trunk/netbrush/src/grayscale_buffer.hpp	2006-11-06 18:12:36 UTC (rev 698)
@@ -45,6 +45,8 @@
   void blit(GrayscaleBuffer* source, SDL_Rect* srcrect, int of_x, int of_y);
   void blit(GrayscaleBuffer* source, int of_x, int of_y, Uint8 alpha, BlendMode mode);
 
+  Uint8 interpolated_at(float x, float y) const;
+
   inline Uint8& at(int x, int y) 
   { 
     assert(x >= 0 && x < width && y >= 0 && y < height);

Modified: trunk/netbrush/src/screen_buffer.cpp
===================================================================
--- trunk/netbrush/src/screen_buffer.cpp	2006-11-06 17:44:35 UTC (rev 697)
+++ trunk/netbrush/src/screen_buffer.cpp	2006-11-06 18:12:36 UTC (rev 698)
@@ -224,7 +224,12 @@
 void
 ScreenBuffer::on_pen_motion(const PenEvent& pen)
 {
-  tools.front()->on_pen_motion(pen);
+  PenEvent new_pen = pen;
+  
+  new_pen.x -= scroll_offset_x;
+  new_pen.y -= scroll_offset_y;
+
+  tools.front()->on_pen_motion(new_pen);
 }
 
 void



